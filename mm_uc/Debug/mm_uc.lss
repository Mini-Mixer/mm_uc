
mm_uc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b6  00800100  00000d30  00000dc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  008001b6  008001b6  00000e7a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e7a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000eaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000961  00000000  00000000  00000f42  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000286  00000000  00000000  000018a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003dd  00000000  00000000  00001b29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000214  00000000  00000000  00001f08  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002af  00000000  00000000  0000211c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000898  00000000  00000000  000023cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  00002c63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e3       	ldi	r30, 0x30	; 48
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 3b       	cpi	r26, 0xB6	; 182
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 eb       	ldi	r26, 0xB6	; 182
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 3b       	cpi	r26, 0xBC	; 188
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 81 03 	call	0x702	; 0x702 <main>
  9e:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <UART_Init>:


void UART_Init( unsigned int ubrr)
{
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
  a6:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
  aa:	80 93 c4 00 	sts	0x00C4, r24
	
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  ae:	88 e1       	ldi	r24, 0x18	; 24
  b0:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
  b4:	8e e0       	ldi	r24, 0x0E	; 14
  b6:	80 93 c2 00 	sts	0x00C2, r24
  ba:	08 95       	ret

000000bc <UART_Transmit>:
}

void UART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
  bc:	e0 ec       	ldi	r30, 0xC0	; 192
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	90 81       	ld	r25, Z
  c2:	95 ff       	sbrs	r25, 5
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <UART_Transmit+0x4>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
  c6:	80 93 c6 00 	sts	0x00C6, r24
  ca:	08 95       	ret

000000cc <UART_TString>:
void UART_Transmit(unsigned char);
unsigned char UART_Receive(void);
void UART_Flush(void);

void UART_TString(char* string){
  cc:	1f 93       	push	r17
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	ec 01       	movw	r28, r24
	uint8_t index = 0;
	while(string[index]){
  d4:	88 81       	ld	r24, Y
  d6:	88 23       	and	r24, r24
  d8:	51 f0       	breq	.+20     	; 0xee <UART_TString+0x22>
void UART_Transmit(unsigned char);
unsigned char UART_Receive(void);
void UART_Flush(void);

void UART_TString(char* string){
	uint8_t index = 0;
  da:	10 e0       	ldi	r17, 0x00	; 0
	while(string[index]){
		UART_Transmit((unsigned char)string[index]);
  dc:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_Transmit>
		index++;
  e0:	1f 5f       	subi	r17, 0xFF	; 255
unsigned char UART_Receive(void);
void UART_Flush(void);

void UART_TString(char* string){
	uint8_t index = 0;
	while(string[index]){
  e2:	fe 01       	movw	r30, r28
  e4:	e1 0f       	add	r30, r17
  e6:	f1 1d       	adc	r31, r1
  e8:	80 81       	ld	r24, Z
  ea:	81 11       	cpse	r24, r1
  ec:	f7 cf       	rjmp	.-18     	; 0xdc <UART_TString+0x10>
		UART_Transmit((unsigned char)string[index]);
		index++;
	}
}
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	1f 91       	pop	r17
  f4:	08 95       	ret

000000f6 <CRLF>:

void CRLF(){
	UART_Transmit(0x0D);
  f6:	8d e0       	ldi	r24, 0x0D	; 13
  f8:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_Transmit>
	UART_Transmit(0x0A);
  fc:	8a e0       	ldi	r24, 0x0A	; 10
  fe:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_Transmit>
 102:	08 95       	ret

00000104 <println>:
}

void println(char* string){
	UART_TString(string);
 104:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
	CRLF();
 108:	0e 94 7b 00 	call	0xf6	; 0xf6 <CRLF>
 10c:	08 95       	ret

0000010e <UART_Receive>:
}

unsigned char UART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
 10e:	e0 ec       	ldi	r30, 0xC0	; 192
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	88 23       	and	r24, r24
 116:	ec f7       	brge	.-6      	; 0x112 <UART_Receive+0x4>
	;
	/* Get and return received data from buffer */
	return UDR0;
 118:	80 91 c6 00 	lds	r24, 0x00C6
}
 11c:	08 95       	ret

0000011e <__vector_14>:

/* Interrupt based timer
	Credit: https://sites.google.com/site/qeewiki/books/avr-guide/timers-on-the-atmega328
*/

ISR (TIMER0_COMPA_vect){
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
	mstime+=4; 
 12c:	80 91 b6 01 	lds	r24, 0x01B6
 130:	90 91 b7 01 	lds	r25, 0x01B7
 134:	04 96       	adiw	r24, 0x04	; 4
 136:	90 93 b7 01 	sts	0x01B7, r25
 13a:	80 93 b6 01 	sts	0x01B6, r24
}
 13e:	9f 91       	pop	r25
 140:	8f 91       	pop	r24
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <timer0_Init>:

void timer0_Init(void){
    TCCR0A |= (1 << WGM01);
 14c:	84 b5       	in	r24, 0x24	; 36
 14e:	82 60       	ori	r24, 0x02	; 2
 150:	84 bd       	out	0x24, r24	; 36
    OCR0A = 0xF9;
 152:	89 ef       	ldi	r24, 0xF9	; 249
 154:	87 bd       	out	0x27, r24	; 39
    TIMSK0 |= (1 << OCIE0A);
 156:	ee e6       	ldi	r30, 0x6E	; 110
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	82 60       	ori	r24, 0x02	; 2
 15e:	80 83       	st	Z, r24
    sei();         
 160:	78 94       	sei
    TCCR0B |= (1 << CS02);  
 162:	85 b5       	in	r24, 0x25	; 37
 164:	84 60       	ori	r24, 0x04	; 4
 166:	85 bd       	out	0x25, r24	; 37
 168:	08 95       	ret

0000016a <pumpOn>:
#define DELTA 10

void pumpOn(pump *pmp){
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	ec 01       	movw	r28, r24
	pmp->finished = 0;
 170:	19 86       	std	Y+9, r1	; 0x09
	UART_Transmit(pmp->label);
 172:	88 81       	ld	r24, Y
 174:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_Transmit>
	UART_TString(" is on!");
 178:	86 e0       	ldi	r24, 0x06	; 6
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
	switch(pmp->label){
 180:	88 81       	ld	r24, Y
 182:	81 34       	cpi	r24, 0x41	; 65
 184:	19 f4       	brne	.+6      	; 0x18c <pumpOn+0x22>
		case 'A':
			OCR2B = 100;
 186:	84 e6       	ldi	r24, 0x64	; 100
 188:	80 93 b4 00 	sts	0x00B4, r24
		case 'B':
			break;
		default:
			break;
	}
	CRLF();
 18c:	0e 94 7b 00 	call	0xf6	; 0xf6 <CRLF>
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <pumpOff>:

void pumpOff(pump *pmp){
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	ec 01       	movw	r28, r24
	pmp->finished = 1;
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	89 87       	std	Y+9, r24	; 0x09
	UART_Transmit(pmp->label);
 1a0:	88 81       	ld	r24, Y
 1a2:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_Transmit>
	UART_TString(" is off!");
 1a6:	8e e0       	ldi	r24, 0x0E	; 14
 1a8:	91 e0       	ldi	r25, 0x01	; 1
 1aa:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
	switch(pmp->label){
 1ae:	88 81       	ld	r24, Y
 1b0:	81 34       	cpi	r24, 0x41	; 65
 1b2:	19 f4       	brne	.+6      	; 0x1ba <pumpOff+0x24>
		case 'A':
			OCR2B = 255;
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	80 93 b4 00 	sts	0x00B4, r24
		case 'B':
			break;
		default:
		break;
	}
	CRLF();
 1ba:	0e 94 7b 00 	call	0xf6	; 0xf6 <CRLF>
}
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <parallelDispense>:

void parallelDispense(request* req){
 1c4:	6f 92       	push	r6
 1c6:	7f 92       	push	r7
 1c8:	8f 92       	push	r8
 1ca:	9f 92       	push	r9
 1cc:	af 92       	push	r10
 1ce:	bf 92       	push	r11
 1d0:	cf 92       	push	r12
 1d2:	df 92       	push	r13
 1d4:	ef 92       	push	r14
 1d6:	ff 92       	push	r15
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	8c 01       	movw	r16, r24
	
	println("Dispensing parallel pumps");
 1e2:	87 e1       	ldi	r24, 0x17	; 23
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	0e 94 82 00 	call	0x104	; 0x104 <println>
	
	/* Get the duration of the pump that will run the longest */
	float maxTime = 0;
	for(uint8_t i = 0; i < req->parPumps; i++){
 1ea:	f8 01       	movw	r30, r16
 1ec:	a2 80       	ldd	r10, Z+2	; 0x02
 1ee:	aa 20       	and	r10, r10
 1f0:	09 f4       	brne	.+2      	; 0x1f4 <parallelDispense+0x30>
 1f2:	a0 c0       	rjmp	.+320    	; 0x334 <parallelDispense+0x170>
 1f4:	c0 81       	ld	r28, Z
 1f6:	d1 81       	ldd	r29, Z+1	; 0x01
 1f8:	f1 2c       	mov	r15, r1
void parallelDispense(request* req){
	
	println("Dispensing parallel pumps");
	
	/* Get the duration of the pump that will run the longest */
	float maxTime = 0;
 1fa:	61 2c       	mov	r6, r1
 1fc:	71 2c       	mov	r7, r1
 1fe:	81 2c       	mov	r8, r1
 200:	91 2c       	mov	r9, r1
	for(uint8_t i = 0; i < req->parPumps; i++){
		if(req->pumps[i].amount > maxTime)
 202:	b9 80       	ldd	r11, Y+1	; 0x01
 204:	ca 80       	ldd	r12, Y+2	; 0x02
 206:	db 80       	ldd	r13, Y+3	; 0x03
 208:	ec 80       	ldd	r14, Y+4	; 0x04
 20a:	26 2d       	mov	r18, r6
 20c:	37 2d       	mov	r19, r7
 20e:	48 2d       	mov	r20, r8
 210:	59 2d       	mov	r21, r9
 212:	6b 2d       	mov	r22, r11
 214:	7c 2d       	mov	r23, r12
 216:	8d 2d       	mov	r24, r13
 218:	9e 2d       	mov	r25, r14
 21a:	0e 94 08 05 	call	0xa10	; 0xa10 <__gesf2>
 21e:	18 16       	cp	r1, r24
 220:	24 f4       	brge	.+8      	; 0x22a <parallelDispense+0x66>
			maxTime = req->pumps[i].amount;
 222:	6b 2c       	mov	r6, r11
 224:	7c 2c       	mov	r7, r12
 226:	8d 2c       	mov	r8, r13
 228:	9e 2c       	mov	r9, r14
	
	println("Dispensing parallel pumps");
	
	/* Get the duration of the pump that will run the longest */
	float maxTime = 0;
	for(uint8_t i = 0; i < req->parPumps; i++){
 22a:	f3 94       	inc	r15
 22c:	2a 96       	adiw	r28, 0x0a	; 10
 22e:	fa 10       	cpse	r15, r10
 230:	e8 cf       	rjmp	.-48     	; 0x202 <parallelDispense+0x3e>
 232:	68 c0       	rjmp	.+208    	; 0x304 <parallelDispense+0x140>
	/* Set total pump time duration and initial time */ 
	unsigned int totalDuration = mstime + (unsigned int)(maxTime);
	unsigned int initialTime = mstime;

	for(uint8_t i = 0; i < req->parPumps; i++)
		pumpOn(&(req->pumps[i])); // Turn the pumps on
 234:	2c 2f       	mov	r18, r28
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	c9 01       	movw	r24, r18
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	22 0f       	add	r18, r18
 240:	33 1f       	adc	r19, r19
 242:	22 0f       	add	r18, r18
 244:	33 1f       	adc	r19, r19
 246:	22 0f       	add	r18, r18
 248:	33 1f       	adc	r19, r19
 24a:	28 0f       	add	r18, r24
 24c:	39 1f       	adc	r19, r25
 24e:	f8 01       	movw	r30, r16
 250:	80 81       	ld	r24, Z
 252:	91 81       	ldd	r25, Z+1	; 0x01
 254:	82 0f       	add	r24, r18
 256:	93 1f       	adc	r25, r19
 258:	0e 94 b5 00 	call	0x16a	; 0x16a <pumpOn>
	maxTime *= 1000;
	/* Set total pump time duration and initial time */ 
	unsigned int totalDuration = mstime + (unsigned int)(maxTime);
	unsigned int initialTime = mstime;

	for(uint8_t i = 0; i < req->parPumps; i++)
 25c:	cf 5f       	subi	r28, 0xFF	; 255
 25e:	f8 01       	movw	r30, r16
 260:	82 81       	ldd	r24, Z+2	; 0x02
 262:	c8 17       	cp	r28, r24
 264:	38 f3       	brcs	.-50     	; 0x234 <parallelDispense+0x70>
 266:	3d c0       	rjmp	.+122    	; 0x2e2 <parallelDispense+0x11e>
		pumpOn(&(req->pumps[i])); // Turn the pumps on
	
	while(mstime < (totalDuration + DELTA)){
		for(uint8_t i = 0; i < req->parPumps; i++){
			//println("in this loop");
			if((mstime - initialTime) > (unsigned int)((req->pumps[i].amount)*1000) ){
 268:	e0 90 b6 01 	lds	r14, 0x01B6
 26c:	f0 90 b7 01 	lds	r15, 0x01B7
 270:	89 2d       	mov	r24, r9
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	ec 01       	movw	r28, r24
 276:	cc 0f       	add	r28, r28
 278:	dd 1f       	adc	r29, r29
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	8c 0f       	add	r24, r28
 288:	9d 1f       	adc	r25, r29
 28a:	f8 01       	movw	r30, r16
 28c:	c0 81       	ld	r28, Z
 28e:	d1 81       	ldd	r29, Z+1	; 0x01
 290:	c8 0f       	add	r28, r24
 292:	d9 1f       	adc	r29, r25
 294:	ec 18       	sub	r14, r12
 296:	fd 08       	sbc	r15, r13
 298:	20 e0       	ldi	r18, 0x00	; 0
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	4a e7       	ldi	r20, 0x7A	; 122
 29e:	54 e4       	ldi	r21, 0x44	; 68
 2a0:	69 81       	ldd	r22, Y+1	; 0x01
 2a2:	7a 81       	ldd	r23, Y+2	; 0x02
 2a4:	8b 81       	ldd	r24, Y+3	; 0x03
 2a6:	9c 81       	ldd	r25, Y+4	; 0x04
 2a8:	0e 94 0c 05 	call	0xa18	; 0xa18 <__mulsf3>
 2ac:	0e 94 2a 04 	call	0x854	; 0x854 <__fixunssfsi>
 2b0:	6e 15       	cp	r22, r14
 2b2:	7f 05       	cpc	r23, r15
 2b4:	38 f4       	brcc	.+14     	; 0x2c4 <parallelDispense+0x100>
				if(req->pumps[i].finished == 0){
 2b6:	89 85       	ldd	r24, Y+9	; 0x09
 2b8:	81 11       	cpse	r24, r1
 2ba:	0d c0       	rjmp	.+26     	; 0x2d6 <parallelDispense+0x112>
					pumpOff(&(req->pumps[i]));
 2bc:	ce 01       	movw	r24, r28
 2be:	0e 94 cb 00 	call	0x196	; 0x196 <pumpOff>
 2c2:	09 c0       	rjmp	.+18     	; 0x2d6 <parallelDispense+0x112>
				}
			}
			else{
				UART_Transmit(req->pumps[i].label);
 2c4:	88 81       	ld	r24, Y
 2c6:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_Transmit>
				UART_TString(" is still running");
 2ca:	81 e3       	ldi	r24, 0x31	; 49
 2cc:	91 e0       	ldi	r25, 0x01	; 1
 2ce:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
				CRLF();
 2d2:	0e 94 7b 00 	call	0xf6	; 0xf6 <CRLF>

	for(uint8_t i = 0; i < req->parPumps; i++)
		pumpOn(&(req->pumps[i])); // Turn the pumps on
	
	while(mstime < (totalDuration + DELTA)){
		for(uint8_t i = 0; i < req->parPumps; i++){
 2d6:	93 94       	inc	r9
 2d8:	f8 01       	movw	r30, r16
 2da:	82 81       	ldd	r24, Z+2	; 0x02
 2dc:	98 16       	cp	r9, r24
 2de:	20 f2       	brcs	.-120    	; 0x268 <parallelDispense+0xa4>
 2e0:	04 c0       	rjmp	.+8      	; 0x2ea <parallelDispense+0x126>
	unsigned int initialTime = mstime;

	for(uint8_t i = 0; i < req->parPumps; i++)
		pumpOn(&(req->pumps[i])); // Turn the pumps on
	
	while(mstime < (totalDuration + DELTA)){
 2e2:	fa e0       	ldi	r31, 0x0A	; 10
 2e4:	af 0e       	add	r10, r31
 2e6:	b1 1c       	adc	r11, r1
		for(uint8_t i = 0; i < req->parPumps; i++){
 2e8:	81 2c       	mov	r8, r1
	unsigned int initialTime = mstime;

	for(uint8_t i = 0; i < req->parPumps; i++)
		pumpOn(&(req->pumps[i])); // Turn the pumps on
	
	while(mstime < (totalDuration + DELTA)){
 2ea:	80 91 b6 01 	lds	r24, 0x01B6
 2ee:	90 91 b7 01 	lds	r25, 0x01B7
 2f2:	8a 15       	cp	r24, r10
 2f4:	9b 05       	cpc	r25, r11
 2f6:	38 f5       	brcc	.+78     	; 0x346 <parallelDispense+0x182>
		for(uint8_t i = 0; i < req->parPumps; i++){
 2f8:	f8 01       	movw	r30, r16
 2fa:	82 81       	ldd	r24, Z+2	; 0x02
 2fc:	88 23       	and	r24, r24
 2fe:	a9 f3       	breq	.-22     	; 0x2ea <parallelDispense+0x126>
 300:	98 2c       	mov	r9, r8
 302:	b2 cf       	rjmp	.-156    	; 0x268 <parallelDispense+0xa4>
		if(req->pumps[i].amount > maxTime)
			maxTime = req->pumps[i].amount;
	}
	maxTime *= 1000;
	/* Set total pump time duration and initial time */ 
	unsigned int totalDuration = mstime + (unsigned int)(maxTime);
 304:	a0 90 b6 01 	lds	r10, 0x01B6
 308:	b0 90 b7 01 	lds	r11, 0x01B7
	float maxTime = 0;
	for(uint8_t i = 0; i < req->parPumps; i++){
		if(req->pumps[i].amount > maxTime)
			maxTime = req->pumps[i].amount;
	}
	maxTime *= 1000;
 30c:	20 e0       	ldi	r18, 0x00	; 0
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	4a e7       	ldi	r20, 0x7A	; 122
 312:	54 e4       	ldi	r21, 0x44	; 68
 314:	66 2d       	mov	r22, r6
 316:	77 2d       	mov	r23, r7
 318:	88 2d       	mov	r24, r8
 31a:	99 2d       	mov	r25, r9
 31c:	0e 94 0c 05 	call	0xa18	; 0xa18 <__mulsf3>
	/* Set total pump time duration and initial time */ 
	unsigned int totalDuration = mstime + (unsigned int)(maxTime);
 320:	0e 94 2a 04 	call	0x854	; 0x854 <__fixunssfsi>
 324:	a6 0e       	add	r10, r22
 326:	b7 1e       	adc	r11, r23
	unsigned int initialTime = mstime;
 328:	c0 90 b6 01 	lds	r12, 0x01B6
 32c:	d0 90 b7 01 	lds	r13, 0x01B7

	for(uint8_t i = 0; i < req->parPumps; i++)
 330:	c0 e0       	ldi	r28, 0x00	; 0
 332:	80 cf       	rjmp	.-256    	; 0x234 <parallelDispense+0x70>
		if(req->pumps[i].amount > maxTime)
			maxTime = req->pumps[i].amount;
	}
	maxTime *= 1000;
	/* Set total pump time duration and initial time */ 
	unsigned int totalDuration = mstime + (unsigned int)(maxTime);
 334:	a0 90 b6 01 	lds	r10, 0x01B6
 338:	b0 90 b7 01 	lds	r11, 0x01B7
	unsigned int initialTime = mstime;
 33c:	c0 90 b6 01 	lds	r12, 0x01B6
 340:	d0 90 b7 01 	lds	r13, 0x01B7
 344:	ce cf       	rjmp	.-100    	; 0x2e2 <parallelDispense+0x11e>
			}
		}
	}
	

}
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	1f 91       	pop	r17
 34c:	0f 91       	pop	r16
 34e:	ff 90       	pop	r15
 350:	ef 90       	pop	r14
 352:	df 90       	pop	r13
 354:	cf 90       	pop	r12
 356:	bf 90       	pop	r11
 358:	af 90       	pop	r10
 35a:	9f 90       	pop	r9
 35c:	8f 90       	pop	r8
 35e:	7f 90       	pop	r7
 360:	6f 90       	pop	r6
 362:	08 95       	ret

00000364 <sequentialDispense>:

void sequentialDispense(request* req){
 364:	af 92       	push	r10
 366:	bf 92       	push	r11
 368:	cf 92       	push	r12
 36a:	df 92       	push	r13
 36c:	ef 92       	push	r14
 36e:	ff 92       	push	r15
 370:	0f 93       	push	r16
 372:	1f 93       	push	r17
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
 378:	7c 01       	movw	r14, r24
	
	println("Dispensing sequential pumps");
 37a:	83 e4       	ldi	r24, 0x43	; 67
 37c:	91 e0       	ldi	r25, 0x01	; 1
 37e:	0e 94 82 00 	call	0x104	; 0x104 <println>
	
	uint8_t totalPumps = req->parPumps + req->seqPumps;
 382:	f7 01       	movw	r30, r14
 384:	b2 80       	ldd	r11, Z+2	; 0x02
 386:	a3 80       	ldd	r10, Z+3	; 0x03
 388:	ab 0c       	add	r10, r11
	for(uint8_t i = req->parPumps; i < totalPumps; i++){
 38a:	ba 14       	cp	r11, r10
 38c:	c8 f5       	brcc	.+114    	; 0x400 <sequentialDispense+0x9c>
		unsigned int totalDuration = mstime + (unsigned int)((req->pumps[i].amount)*1000);
 38e:	8b 2d       	mov	r24, r11
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	ec 01       	movw	r28, r24
 394:	cc 0f       	add	r28, r28
 396:	dd 1f       	adc	r29, r29
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	88 0f       	add	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	c8 0f       	add	r28, r24
 3a6:	d9 1f       	adc	r29, r25
 3a8:	f7 01       	movw	r30, r14
 3aa:	00 81       	ld	r16, Z
 3ac:	11 81       	ldd	r17, Z+1	; 0x01
 3ae:	0c 0f       	add	r16, r28
 3b0:	1d 1f       	adc	r17, r29
 3b2:	c0 90 b6 01 	lds	r12, 0x01B6
 3b6:	d0 90 b7 01 	lds	r13, 0x01B7
 3ba:	20 e0       	ldi	r18, 0x00	; 0
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	4a e7       	ldi	r20, 0x7A	; 122
 3c0:	54 e4       	ldi	r21, 0x44	; 68
 3c2:	f8 01       	movw	r30, r16
 3c4:	61 81       	ldd	r22, Z+1	; 0x01
 3c6:	72 81       	ldd	r23, Z+2	; 0x02
 3c8:	83 81       	ldd	r24, Z+3	; 0x03
 3ca:	94 81       	ldd	r25, Z+4	; 0x04
 3cc:	0e 94 0c 05 	call	0xa18	; 0xa18 <__mulsf3>
 3d0:	0e 94 2a 04 	call	0x854	; 0x854 <__fixunssfsi>
 3d4:	c6 0e       	add	r12, r22
 3d6:	d7 1e       	adc	r13, r23
		pumpOn(&(req->pumps[i]));
 3d8:	c8 01       	movw	r24, r16
 3da:	0e 94 b5 00 	call	0x16a	; 0x16a <pumpOn>
		while(mstime < totalDuration){ }
 3de:	80 91 b6 01 	lds	r24, 0x01B6
 3e2:	90 91 b7 01 	lds	r25, 0x01B7
 3e6:	8c 15       	cp	r24, r12
 3e8:	9d 05       	cpc	r25, r13
 3ea:	c8 f3       	brcs	.-14     	; 0x3de <sequentialDispense+0x7a>
		pumpOff(&(req->pumps[i]));
 3ec:	f7 01       	movw	r30, r14
 3ee:	80 81       	ld	r24, Z
 3f0:	91 81       	ldd	r25, Z+1	; 0x01
 3f2:	8c 0f       	add	r24, r28
 3f4:	9d 1f       	adc	r25, r29
 3f6:	0e 94 cb 00 	call	0x196	; 0x196 <pumpOff>
void sequentialDispense(request* req){
	
	println("Dispensing sequential pumps");
	
	uint8_t totalPumps = req->parPumps + req->seqPumps;
	for(uint8_t i = req->parPumps; i < totalPumps; i++){
 3fa:	b3 94       	inc	r11
 3fc:	ba 14       	cp	r11, r10
 3fe:	38 f2       	brcs	.-114    	; 0x38e <sequentialDispense+0x2a>
		unsigned int totalDuration = mstime + (unsigned int)((req->pumps[i].amount)*1000);
		pumpOn(&(req->pumps[i]));
		while(mstime < totalDuration){ }
		pumpOff(&(req->pumps[i]));
	}	
}
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	1f 91       	pop	r17
 406:	0f 91       	pop	r16
 408:	ff 90       	pop	r15
 40a:	ef 90       	pop	r14
 40c:	df 90       	pop	r13
 40e:	cf 90       	pop	r12
 410:	bf 90       	pop	r11
 412:	af 90       	pop	r10
 414:	08 95       	ret

00000416 <init>:
#include "timer.h"
#include "pump.h"
#include "utils.c"

void init(void){
	UART_Init(MYUBRR);
 416:	88 e6       	ldi	r24, 0x68	; 104
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_Init>
	timer0_Init();
 41e:	0e 94 a6 00 	call	0x14c	; 0x14c <timer0_Init>
	TCCR2A = _BV(COM2A1) | _BV(COM2B1) | _BV(WGM21) | _BV(WGM20);
 422:	83 ea       	ldi	r24, 0xA3	; 163
 424:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = _BV(CS22);
 428:	84 e0       	ldi	r24, 0x04	; 4
 42a:	80 93 b1 00 	sts	0x00B1, r24
	OCR2B = 255; 
 42e:	8f ef       	ldi	r24, 0xFF	; 255
 430:	80 93 b4 00 	sts	0x00B4, r24
	OCR2A = 255; 
 434:	80 93 b3 00 	sts	0x00B3, r24
	DDRD |= 1<<PD3; // OC2B
 438:	53 9a       	sbi	0x0a, 3	; 10
	DDRD |= 1<<PB3; // OC2B
 43a:	53 9a       	sbi	0x0a, 3	; 10
 43c:	08 95       	ret

0000043e <processRequest>:
}

request* processRequest(){
 43e:	6f 92       	push	r6
 440:	7f 92       	push	r7
 442:	8f 92       	push	r8
 444:	9f 92       	push	r9
 446:	af 92       	push	r10
 448:	bf 92       	push	r11
 44a:	cf 92       	push	r12
 44c:	df 92       	push	r13
 44e:	ef 92       	push	r14
 450:	ff 92       	push	r15
 452:	0f 93       	push	r16
 454:	1f 93       	push	r17
 456:	cf 93       	push	r28
 458:	df 93       	push	r29
	pump* pumps = (pump*)malloc(sizeof(pump)*6);
 45a:	8c e3       	ldi	r24, 0x3C	; 60
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0e 94 6f 05 	call	0xade	; 0xade <malloc>
 462:	8c 01       	movw	r16, r24
	UART_TString("OK");
 464:	8f e5       	ldi	r24, 0x5F	; 95
 466:	91 e0       	ldi	r25, 0x01	; 1
 468:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
	unsigned char parPumps = UART_Receive();
 46c:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 470:	c8 2f       	mov	r28, r24
	UART_TString("OK");
 472:	8f e5       	ldi	r24, 0x5F	; 95
 474:	91 e0       	ldi	r25, 0x01	; 1
 476:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
	unsigned char seqPumps = UART_Receive();
 47a:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
	parPumps -= 48; seqPumps -= 48;
 47e:	0f 2e       	mov	r0, r31
 480:	f0 ed       	ldi	r31, 0xD0	; 208
 482:	8f 2e       	mov	r8, r31
 484:	f0 2d       	mov	r31, r0
 486:	8c 0e       	add	r8, r28
 488:	0f 2e       	mov	r0, r31
 48a:	f0 ed       	ldi	r31, 0xD0	; 208
 48c:	7f 2e       	mov	r7, r31
 48e:	f0 2d       	mov	r31, r0
 490:	78 0e       	add	r7, r24
	
	// Error checking
	if(parPumps + seqPumps > MAXPUMPS)
 492:	87 2d       	mov	r24, r7
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	88 0d       	add	r24, r8
 498:	91 1d       	adc	r25, r1
 49a:	07 97       	sbiw	r24, 0x07	; 7
 49c:	0c f0       	brlt	.+2      	; 0x4a0 <processRequest+0x62>
 49e:	f6 c0       	rjmp	.+492    	; 0x68c <processRequest+0x24e>
		return NULL;
					
	if(parPumps > MAXPUMPS || parPumps < 0)
 4a0:	86 e0       	ldi	r24, 0x06	; 6
 4a2:	88 15       	cp	r24, r8
 4a4:	08 f4       	brcc	.+2      	; 0x4a8 <processRequest+0x6a>
 4a6:	f5 c0       	rjmp	.+490    	; 0x692 <processRequest+0x254>
		return NULL;
		
	if(seqPumps > MAXPUMPS || seqPumps < 0)
 4a8:	87 15       	cp	r24, r7
 4aa:	08 f4       	brcc	.+2      	; 0x4ae <processRequest+0x70>
 4ac:	f5 c0       	rjmp	.+490    	; 0x698 <processRequest+0x25a>
	
	/* Handle request */
	
	// Process parallel pump information
	uint8_t i = 0;
	if(parPumps > 0){
 4ae:	88 20       	and	r8, r8
 4b0:	09 f4       	brne	.+2      	; 0x4b4 <processRequest+0x76>
 4b2:	65 c0       	rjmp	.+202    	; 0x57e <processRequest+0x140>
 4b4:	e8 01       	movw	r28, r16
 4b6:	91 2c       	mov	r9, r1
		for(; i < parPumps; i++){
			UART_TString("OK");
 4b8:	8f e5       	ldi	r24, 0x5F	; 95
 4ba:	91 e0       	ldi	r25, 0x01	; 1
 4bc:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
			// Get label info
			pumps[i].label = UART_Receive();
 4c0:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 4c4:	88 83       	st	Y, r24
			if(pumps[i].label < 65 || pumps[i].label > 70 )
 4c6:	81 54       	subi	r24, 0x41	; 65
 4c8:	86 30       	cpi	r24, 0x06	; 6
 4ca:	08 f0       	brcs	.+2      	; 0x4ce <processRequest+0x90>
 4cc:	e8 c0       	rjmp	.+464    	; 0x69e <processRequest+0x260>
				return NULL;
			UART_TString("OK");
 4ce:	8f e5       	ldi	r24, 0x5F	; 95
 4d0:	91 e0       	ldi	r25, 0x01	; 1
 4d2:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
			// Get amount info
			uint8_t ones = UART_Receive() - 48;
 4d6:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 4da:	0f 2e       	mov	r0, r31
 4dc:	f0 ed       	ldi	r31, 0xD0	; 208
 4de:	ff 2e       	mov	r15, r31
 4e0:	f0 2d       	mov	r31, r0
 4e2:	f8 0e       	add	r15, r24
			if(ones < 0 || ones > 8 )
 4e4:	e8 e0       	ldi	r30, 0x08	; 8
 4e6:	ef 15       	cp	r30, r15
 4e8:	08 f4       	brcc	.+2      	; 0x4ec <processRequest+0xae>
 4ea:	dc c0       	rjmp	.+440    	; 0x6a4 <processRequest+0x266>
				return NULL;
			if(UART_Receive() != '.')
 4ec:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 4f0:	8e 32       	cpi	r24, 0x2E	; 46
 4f2:	09 f0       	breq	.+2      	; 0x4f6 <processRequest+0xb8>
 4f4:	da c0       	rjmp	.+436    	; 0x6aa <processRequest+0x26c>
				return NULL;			
			uint8_t tens = UART_Receive() - 48;
 4f6:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 4fa:	0f 2e       	mov	r0, r31
 4fc:	f0 ed       	ldi	r31, 0xD0	; 208
 4fe:	6f 2e       	mov	r6, r31
 500:	f0 2d       	mov	r31, r0
 502:	68 0e       	add	r6, r24
			if(tens < 0 || tens > 9 )
 504:	f9 e0       	ldi	r31, 0x09	; 9
 506:	f6 15       	cp	r31, r6
 508:	08 f4       	brcc	.+2      	; 0x50c <processRequest+0xce>
 50a:	d2 c0       	rjmp	.+420    	; 0x6b0 <processRequest+0x272>
				return NULL;			
			pumps[i].amount = (float)ones + (float)(tens)*0.1;
 50c:	6f 2d       	mov	r22, r15
 50e:	70 e0       	ldi	r23, 0x00	; 0
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	0e 94 56 04 	call	0x8ac	; 0x8ac <__floatunsisf>
 518:	6b 01       	movw	r12, r22
 51a:	7c 01       	movw	r14, r24
 51c:	66 2d       	mov	r22, r6
 51e:	70 e0       	ldi	r23, 0x00	; 0
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	0e 94 56 04 	call	0x8ac	; 0x8ac <__floatunsisf>
 528:	2d ec       	ldi	r18, 0xCD	; 205
 52a:	3c ec       	ldi	r19, 0xCC	; 204
 52c:	4c ec       	ldi	r20, 0xCC	; 204
 52e:	5d e3       	ldi	r21, 0x3D	; 61
 530:	0e 94 0c 05 	call	0xa18	; 0xa18 <__mulsf3>
 534:	9b 01       	movw	r18, r22
 536:	ac 01       	movw	r20, r24
 538:	c7 01       	movw	r24, r14
 53a:	b6 01       	movw	r22, r12
 53c:	0e 94 c2 03 	call	0x784	; 0x784 <__addsf3>
 540:	6b 01       	movw	r12, r22
 542:	7c 01       	movw	r14, r24
 544:	fe 01       	movw	r30, r28
 546:	61 83       	std	Z+1, r22	; 0x01
 548:	72 83       	std	Z+2, r23	; 0x02
 54a:	83 83       	std	Z+3, r24	; 0x03
 54c:	94 83       	std	Z+4, r25	; 0x04
			if(pumps[i].amount < 0 || pumps[i].amount > 8)
 54e:	20 e0       	ldi	r18, 0x00	; 0
 550:	30 e0       	ldi	r19, 0x00	; 0
 552:	a9 01       	movw	r20, r18
 554:	0e 94 26 04 	call	0x84c	; 0x84c <__cmpsf2>
 558:	88 23       	and	r24, r24
 55a:	0c f4       	brge	.+2      	; 0x55e <processRequest+0x120>
 55c:	ac c0       	rjmp	.+344    	; 0x6b6 <processRequest+0x278>
 55e:	20 e0       	ldi	r18, 0x00	; 0
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	40 e0       	ldi	r20, 0x00	; 0
 564:	51 e4       	ldi	r21, 0x41	; 65
 566:	c7 01       	movw	r24, r14
 568:	b6 01       	movw	r22, r12
 56a:	0e 94 08 05 	call	0xa10	; 0xa10 <__gesf2>
 56e:	18 16       	cp	r1, r24
 570:	0c f4       	brge	.+2      	; 0x574 <processRequest+0x136>
 572:	a4 c0       	rjmp	.+328    	; 0x6bc <processRequest+0x27e>
	/* Handle request */
	
	// Process parallel pump information
	uint8_t i = 0;
	if(parPumps > 0){
		for(; i < parPumps; i++){
 574:	93 94       	inc	r9
 576:	2a 96       	adiw	r28, 0x0a	; 10
 578:	89 10       	cpse	r8, r9
 57a:	9e cf       	rjmp	.-196    	; 0x4b8 <processRequest+0x7a>
 57c:	01 c0       	rjmp	.+2      	; 0x580 <processRequest+0x142>
	
	
	/* Handle request */
	
	// Process parallel pump information
	uint8_t i = 0;
 57e:	91 2c       	mov	r9, r1
				return NULL;
		}
	}
	// Process sequential pump information 
	uint8_t j = i + seqPumps;
	if(seqPumps > 0){
 580:	77 20       	and	r7, r7
 582:	09 f4       	brne	.+2      	; 0x586 <processRequest+0x148>
 584:	74 c0       	rjmp	.+232    	; 0x66e <processRequest+0x230>
			if(pumps[i].amount < 0 || pumps[i].amount > 8)
				return NULL;
		}
	}
	// Process sequential pump information 
	uint8_t j = i + seqPumps;
 586:	b9 2c       	mov	r11, r9
 588:	b7 0c       	add	r11, r7
	if(seqPumps > 0){
		for(; i < j; i++){
 58a:	9b 14       	cp	r9, r11
 58c:	08 f0       	brcs	.+2      	; 0x590 <processRequest+0x152>
 58e:	6f c0       	rjmp	.+222    	; 0x66e <processRequest+0x230>
			UART_TString("OK");
 590:	8f e5       	ldi	r24, 0x5F	; 95
 592:	91 e0       	ldi	r25, 0x01	; 1
 594:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
			// Get label info
			pumps[i].label = UART_Receive();
 598:	89 2d       	mov	r24, r9
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	ec 01       	movw	r28, r24
 59e:	cc 0f       	add	r28, r28
 5a0:	dd 1f       	adc	r29, r29
 5a2:	88 0f       	add	r24, r24
 5a4:	99 1f       	adc	r25, r25
 5a6:	88 0f       	add	r24, r24
 5a8:	99 1f       	adc	r25, r25
 5aa:	88 0f       	add	r24, r24
 5ac:	99 1f       	adc	r25, r25
 5ae:	c8 0f       	add	r28, r24
 5b0:	d9 1f       	adc	r29, r25
 5b2:	c0 0f       	add	r28, r16
 5b4:	d1 1f       	adc	r29, r17
 5b6:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 5ba:	88 83       	st	Y, r24
			if(pumps[i].label < 65 || pumps[i].label > 70)
 5bc:	81 54       	subi	r24, 0x41	; 65
 5be:	86 30       	cpi	r24, 0x06	; 6
 5c0:	08 f0       	brcs	.+2      	; 0x5c4 <processRequest+0x186>
 5c2:	7f c0       	rjmp	.+254    	; 0x6c2 <processRequest+0x284>
				return NULL;
			UART_TString("OK");
 5c4:	8f e5       	ldi	r24, 0x5F	; 95
 5c6:	91 e0       	ldi	r25, 0x01	; 1
 5c8:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
			// Get amount info
			uint8_t ones = UART_Receive() - 48;
 5cc:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 5d0:	0f 2e       	mov	r0, r31
 5d2:	f0 ed       	ldi	r31, 0xD0	; 208
 5d4:	ff 2e       	mov	r15, r31
 5d6:	f0 2d       	mov	r31, r0
 5d8:	f8 0e       	add	r15, r24
			if(ones < 0 || ones > 8 )
 5da:	f8 e0       	ldi	r31, 0x08	; 8
 5dc:	ff 15       	cp	r31, r15
 5de:	08 f4       	brcc	.+2      	; 0x5e2 <processRequest+0x1a4>
 5e0:	73 c0       	rjmp	.+230    	; 0x6c8 <processRequest+0x28a>
				return NULL;
			if(UART_Receive() != '.')
 5e2:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 5e6:	8e 32       	cpi	r24, 0x2E	; 46
 5e8:	09 f0       	breq	.+2      	; 0x5ec <processRequest+0x1ae>
 5ea:	71 c0       	rjmp	.+226    	; 0x6ce <processRequest+0x290>
				return NULL;			
			uint8_t tens = UART_Receive() - 48;
 5ec:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 5f0:	0f 2e       	mov	r0, r31
 5f2:	f0 ed       	ldi	r31, 0xD0	; 208
 5f4:	af 2e       	mov	r10, r31
 5f6:	f0 2d       	mov	r31, r0
 5f8:	a8 0e       	add	r10, r24
			if(tens < 0 || tens > 9 )
 5fa:	89 e0       	ldi	r24, 0x09	; 9
 5fc:	8a 15       	cp	r24, r10
 5fe:	08 f4       	brcc	.+2      	; 0x602 <processRequest+0x1c4>
 600:	69 c0       	rjmp	.+210    	; 0x6d4 <processRequest+0x296>
				return NULL;			
			pumps[i].amount = (float)ones + (float)(tens)*0.1;
 602:	6f 2d       	mov	r22, r15
 604:	70 e0       	ldi	r23, 0x00	; 0
 606:	80 e0       	ldi	r24, 0x00	; 0
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	0e 94 56 04 	call	0x8ac	; 0x8ac <__floatunsisf>
 60e:	6b 01       	movw	r12, r22
 610:	7c 01       	movw	r14, r24
 612:	6a 2d       	mov	r22, r10
 614:	70 e0       	ldi	r23, 0x00	; 0
 616:	80 e0       	ldi	r24, 0x00	; 0
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	0e 94 56 04 	call	0x8ac	; 0x8ac <__floatunsisf>
 61e:	2d ec       	ldi	r18, 0xCD	; 205
 620:	3c ec       	ldi	r19, 0xCC	; 204
 622:	4c ec       	ldi	r20, 0xCC	; 204
 624:	5d e3       	ldi	r21, 0x3D	; 61
 626:	0e 94 0c 05 	call	0xa18	; 0xa18 <__mulsf3>
 62a:	9b 01       	movw	r18, r22
 62c:	ac 01       	movw	r20, r24
 62e:	c7 01       	movw	r24, r14
 630:	b6 01       	movw	r22, r12
 632:	0e 94 c2 03 	call	0x784	; 0x784 <__addsf3>
 636:	6b 01       	movw	r12, r22
 638:	7c 01       	movw	r14, r24
 63a:	69 83       	std	Y+1, r22	; 0x01
 63c:	7a 83       	std	Y+2, r23	; 0x02
 63e:	8b 83       	std	Y+3, r24	; 0x03
 640:	9c 83       	std	Y+4, r25	; 0x04
			if(pumps[i].amount < 0 || pumps[i].amount > 8)
 642:	20 e0       	ldi	r18, 0x00	; 0
 644:	30 e0       	ldi	r19, 0x00	; 0
 646:	a9 01       	movw	r20, r18
 648:	0e 94 26 04 	call	0x84c	; 0x84c <__cmpsf2>
 64c:	88 23       	and	r24, r24
 64e:	0c f4       	brge	.+2      	; 0x652 <processRequest+0x214>
 650:	44 c0       	rjmp	.+136    	; 0x6da <processRequest+0x29c>
 652:	20 e0       	ldi	r18, 0x00	; 0
 654:	30 e0       	ldi	r19, 0x00	; 0
 656:	40 e0       	ldi	r20, 0x00	; 0
 658:	51 e4       	ldi	r21, 0x41	; 65
 65a:	c7 01       	movw	r24, r14
 65c:	b6 01       	movw	r22, r12
 65e:	0e 94 08 05 	call	0xa10	; 0xa10 <__gesf2>
 662:	18 16       	cp	r1, r24
 664:	ec f1       	brlt	.+122    	; 0x6e0 <processRequest+0x2a2>
		}
	}
	// Process sequential pump information 
	uint8_t j = i + seqPumps;
	if(seqPumps > 0){
		for(; i < j; i++){
 666:	93 94       	inc	r9
 668:	9b 14       	cp	r9, r11
 66a:	08 f4       	brcc	.+2      	; 0x66e <processRequest+0x230>
 66c:	91 cf       	rjmp	.-222    	; 0x590 <processRequest+0x152>
			pumps[i].amount = (float)ones + (float)(tens)*0.1;
			if(pumps[i].amount < 0 || pumps[i].amount > 8)
				return NULL;
		}
	}
	UART_TString("OK");
 66e:	8f e5       	ldi	r24, 0x5F	; 95
 670:	91 e0       	ldi	r25, 0x01	; 1
 672:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
	
	/* Create and return the request */
	
	request* req = (request*)malloc(sizeof(request));
 676:	84 e0       	ldi	r24, 0x04	; 4
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	0e 94 6f 05 	call	0xade	; 0xade <malloc>
 67e:	fc 01       	movw	r30, r24
	req->pumps = pumps;
 680:	11 83       	std	Z+1, r17	; 0x01
 682:	00 83       	st	Z, r16
	req->parPumps = parPumps;
 684:	82 82       	std	Z+2, r8	; 0x02
	req->seqPumps = seqPumps;
 686:	73 82       	std	Z+3, r7	; 0x03
	return req;
 688:	9f 2f       	mov	r25, r31
 68a:	2c c0       	rjmp	.+88     	; 0x6e4 <processRequest+0x2a6>
	unsigned char seqPumps = UART_Receive();
	parPumps -= 48; seqPumps -= 48;
	
	// Error checking
	if(parPumps + seqPumps > MAXPUMPS)
		return NULL;
 68c:	80 e0       	ldi	r24, 0x00	; 0
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	29 c0       	rjmp	.+82     	; 0x6e4 <processRequest+0x2a6>
					
	if(parPumps > MAXPUMPS || parPumps < 0)
		return NULL;
 692:	80 e0       	ldi	r24, 0x00	; 0
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	26 c0       	rjmp	.+76     	; 0x6e4 <processRequest+0x2a6>
		
	if(seqPumps > MAXPUMPS || seqPumps < 0)
		return NULL;
 698:	80 e0       	ldi	r24, 0x00	; 0
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	23 c0       	rjmp	.+70     	; 0x6e4 <processRequest+0x2a6>
		for(; i < parPumps; i++){
			UART_TString("OK");
			// Get label info
			pumps[i].label = UART_Receive();
			if(pumps[i].label < 65 || pumps[i].label > 70 )
				return NULL;
 69e:	80 e0       	ldi	r24, 0x00	; 0
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	20 c0       	rjmp	.+64     	; 0x6e4 <processRequest+0x2a6>
			UART_TString("OK");
			// Get amount info
			uint8_t ones = UART_Receive() - 48;
			if(ones < 0 || ones > 8 )
				return NULL;
 6a4:	80 e0       	ldi	r24, 0x00	; 0
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	1d c0       	rjmp	.+58     	; 0x6e4 <processRequest+0x2a6>
			if(UART_Receive() != '.')
				return NULL;			
 6aa:	80 e0       	ldi	r24, 0x00	; 0
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	1a c0       	rjmp	.+52     	; 0x6e4 <processRequest+0x2a6>
			uint8_t tens = UART_Receive() - 48;
			if(tens < 0 || tens > 9 )
				return NULL;			
 6b0:	80 e0       	ldi	r24, 0x00	; 0
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	17 c0       	rjmp	.+46     	; 0x6e4 <processRequest+0x2a6>
			pumps[i].amount = (float)ones + (float)(tens)*0.1;
			if(pumps[i].amount < 0 || pumps[i].amount > 8)
				return NULL;
 6b6:	80 e0       	ldi	r24, 0x00	; 0
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	14 c0       	rjmp	.+40     	; 0x6e4 <processRequest+0x2a6>
 6bc:	80 e0       	ldi	r24, 0x00	; 0
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	11 c0       	rjmp	.+34     	; 0x6e4 <processRequest+0x2a6>
		for(; i < j; i++){
			UART_TString("OK");
			// Get label info
			pumps[i].label = UART_Receive();
			if(pumps[i].label < 65 || pumps[i].label > 70)
				return NULL;
 6c2:	80 e0       	ldi	r24, 0x00	; 0
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	0e c0       	rjmp	.+28     	; 0x6e4 <processRequest+0x2a6>
			UART_TString("OK");
			// Get amount info
			uint8_t ones = UART_Receive() - 48;
			if(ones < 0 || ones > 8 )
				return NULL;
 6c8:	80 e0       	ldi	r24, 0x00	; 0
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	0b c0       	rjmp	.+22     	; 0x6e4 <processRequest+0x2a6>
			if(UART_Receive() != '.')
				return NULL;			
 6ce:	80 e0       	ldi	r24, 0x00	; 0
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	08 c0       	rjmp	.+16     	; 0x6e4 <processRequest+0x2a6>
			uint8_t tens = UART_Receive() - 48;
			if(tens < 0 || tens > 9 )
				return NULL;			
 6d4:	80 e0       	ldi	r24, 0x00	; 0
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	05 c0       	rjmp	.+10     	; 0x6e4 <processRequest+0x2a6>
			pumps[i].amount = (float)ones + (float)(tens)*0.1;
			if(pumps[i].amount < 0 || pumps[i].amount > 8)
				return NULL;
 6da:	80 e0       	ldi	r24, 0x00	; 0
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	02 c0       	rjmp	.+4      	; 0x6e4 <processRequest+0x2a6>
 6e0:	80 e0       	ldi	r24, 0x00	; 0
 6e2:	90 e0       	ldi	r25, 0x00	; 0
	request* req = (request*)malloc(sizeof(request));
	req->pumps = pumps;
	req->parPumps = parPumps;
	req->seqPumps = seqPumps;
	return req;
}
 6e4:	df 91       	pop	r29
 6e6:	cf 91       	pop	r28
 6e8:	1f 91       	pop	r17
 6ea:	0f 91       	pop	r16
 6ec:	ff 90       	pop	r15
 6ee:	ef 90       	pop	r14
 6f0:	df 90       	pop	r13
 6f2:	cf 90       	pop	r12
 6f4:	bf 90       	pop	r11
 6f6:	af 90       	pop	r10
 6f8:	9f 90       	pop	r9
 6fa:	8f 90       	pop	r8
 6fc:	7f 90       	pop	r7
 6fe:	6f 90       	pop	r6
 700:	08 95       	ret

00000702 <main>:
	* Change UART transmitted messages as necessary 
*/

/* Entry point */
int main(void){
	init();
 702:	0e 94 0b 02 	call	0x416	; 0x416 <init>
	request* req;
	/* Primary loop */
	while(1){	
		println("Ready.");
 706:	82 e6       	ldi	r24, 0x62	; 98
 708:	91 e0       	ldi	r25, 0x01	; 1
 70a:	0e 94 82 00 	call	0x104	; 0x104 <println>
		unsigned char temp = UART_Receive();
 70e:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
		if(temp == 'R'){
 712:	82 35       	cpi	r24, 0x52	; 82
 714:	89 f5       	brne	.+98     	; 0x778 <main+0x76>
			if((req = processRequest()) == NULL){
 716:	0e 94 1f 02 	call	0x43e	; 0x43e <processRequest>
 71a:	ec 01       	movw	r28, r24
 71c:	00 97       	sbiw	r24, 0x00	; 0
 71e:	39 f4       	brne	.+14     	; 0x72e <main+0x2c>
				CRLF();
 720:	0e 94 7b 00 	call	0xf6	; 0xf6 <CRLF>
				println("ERROR: Failed to process request!");
 724:	89 e6       	ldi	r24, 0x69	; 105
 726:	91 e0       	ldi	r25, 0x01	; 1
 728:	0e 94 82 00 	call	0x104	; 0x104 <println>
				continue;
 72c:	ec cf       	rjmp	.-40     	; 0x706 <main+0x4>
			}
			CRLF();
 72e:	0e 94 7b 00 	call	0xf6	; 0xf6 <CRLF>
			if(req->parPumps > 0){
 732:	8a 81       	ldd	r24, Y+2	; 0x02
 734:	88 23       	and	r24, r24
 736:	61 f0       	breq	.+24     	; 0x750 <main+0x4e>
				parallelDispense(req);
 738:	ce 01       	movw	r24, r28
 73a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <parallelDispense>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 73e:	2f ef       	ldi	r18, 0xFF	; 255
 740:	83 ed       	ldi	r24, 0xD3	; 211
 742:	90 e3       	ldi	r25, 0x30	; 48
 744:	21 50       	subi	r18, 0x01	; 1
 746:	80 40       	sbci	r24, 0x00	; 0
 748:	90 40       	sbci	r25, 0x00	; 0
 74a:	e1 f7       	brne	.-8      	; 0x744 <main+0x42>
 74c:	00 c0       	rjmp	.+0      	; 0x74e <main+0x4c>
 74e:	00 00       	nop
				_delay_ms(MODEDELAY); // Delay between modes, will tweak
			}
			if(req->seqPumps > 0){
 750:	8b 81       	ldd	r24, Y+3	; 0x03
 752:	88 23       	and	r24, r24
 754:	61 f0       	breq	.+24     	; 0x76e <main+0x6c>
				sequentialDispense(req);
 756:	ce 01       	movw	r24, r28
 758:	0e 94 b2 01 	call	0x364	; 0x364 <sequentialDispense>
 75c:	2f ef       	ldi	r18, 0xFF	; 255
 75e:	83 ed       	ldi	r24, 0xD3	; 211
 760:	90 e3       	ldi	r25, 0x30	; 48
 762:	21 50       	subi	r18, 0x01	; 1
 764:	80 40       	sbci	r24, 0x00	; 0
 766:	90 40       	sbci	r25, 0x00	; 0
 768:	e1 f7       	brne	.-8      	; 0x762 <main+0x60>
 76a:	00 c0       	rjmp	.+0      	; 0x76c <main+0x6a>
 76c:	00 00       	nop
				_delay_ms(MODEDELAY); // Delay between modes, will tweak
			}
			println("Request completed");			
 76e:	8b e8       	ldi	r24, 0x8B	; 139
 770:	91 e0       	ldi	r25, 0x01	; 1
 772:	0e 94 82 00 	call	0x104	; 0x104 <println>
 776:	c7 cf       	rjmp	.-114    	; 0x706 <main+0x4>
		}
		else
			println("Invalid request command");
 778:	8d e9       	ldi	r24, 0x9D	; 157
 77a:	91 e0       	ldi	r25, 0x01	; 1
 77c:	0e 94 82 00 	call	0x104	; 0x104 <println>
 780:	c2 cf       	rjmp	.-124    	; 0x706 <main+0x4>

00000782 <__subsf3>:
 782:	50 58       	subi	r21, 0x80	; 128

00000784 <__addsf3>:
 784:	bb 27       	eor	r27, r27
 786:	aa 27       	eor	r26, r26
 788:	0e d0       	rcall	.+28     	; 0x7a6 <__addsf3x>
 78a:	08 c1       	rjmp	.+528    	; 0x99c <__fp_round>
 78c:	f9 d0       	rcall	.+498    	; 0x980 <__fp_pscA>
 78e:	30 f0       	brcs	.+12     	; 0x79c <__addsf3+0x18>
 790:	fe d0       	rcall	.+508    	; 0x98e <__fp_pscB>
 792:	20 f0       	brcs	.+8      	; 0x79c <__addsf3+0x18>
 794:	31 f4       	brne	.+12     	; 0x7a2 <__addsf3+0x1e>
 796:	9f 3f       	cpi	r25, 0xFF	; 255
 798:	11 f4       	brne	.+4      	; 0x79e <__addsf3+0x1a>
 79a:	1e f4       	brtc	.+6      	; 0x7a2 <__addsf3+0x1e>
 79c:	ee c0       	rjmp	.+476    	; 0x97a <__fp_nan>
 79e:	0e f4       	brtc	.+2      	; 0x7a2 <__addsf3+0x1e>
 7a0:	e0 95       	com	r30
 7a2:	e7 fb       	bst	r30, 7
 7a4:	e4 c0       	rjmp	.+456    	; 0x96e <__fp_inf>

000007a6 <__addsf3x>:
 7a6:	e9 2f       	mov	r30, r25
 7a8:	0a d1       	rcall	.+532    	; 0x9be <__fp_split3>
 7aa:	80 f3       	brcs	.-32     	; 0x78c <__addsf3+0x8>
 7ac:	ba 17       	cp	r27, r26
 7ae:	62 07       	cpc	r22, r18
 7b0:	73 07       	cpc	r23, r19
 7b2:	84 07       	cpc	r24, r20
 7b4:	95 07       	cpc	r25, r21
 7b6:	18 f0       	brcs	.+6      	; 0x7be <__addsf3x+0x18>
 7b8:	71 f4       	brne	.+28     	; 0x7d6 <__addsf3x+0x30>
 7ba:	9e f5       	brtc	.+102    	; 0x822 <__addsf3x+0x7c>
 7bc:	22 c1       	rjmp	.+580    	; 0xa02 <__fp_zero>
 7be:	0e f4       	brtc	.+2      	; 0x7c2 <__addsf3x+0x1c>
 7c0:	e0 95       	com	r30
 7c2:	0b 2e       	mov	r0, r27
 7c4:	ba 2f       	mov	r27, r26
 7c6:	a0 2d       	mov	r26, r0
 7c8:	0b 01       	movw	r0, r22
 7ca:	b9 01       	movw	r22, r18
 7cc:	90 01       	movw	r18, r0
 7ce:	0c 01       	movw	r0, r24
 7d0:	ca 01       	movw	r24, r20
 7d2:	a0 01       	movw	r20, r0
 7d4:	11 24       	eor	r1, r1
 7d6:	ff 27       	eor	r31, r31
 7d8:	59 1b       	sub	r21, r25
 7da:	99 f0       	breq	.+38     	; 0x802 <__addsf3x+0x5c>
 7dc:	59 3f       	cpi	r21, 0xF9	; 249
 7de:	50 f4       	brcc	.+20     	; 0x7f4 <__addsf3x+0x4e>
 7e0:	50 3e       	cpi	r21, 0xE0	; 224
 7e2:	68 f1       	brcs	.+90     	; 0x83e <__addsf3x+0x98>
 7e4:	1a 16       	cp	r1, r26
 7e6:	f0 40       	sbci	r31, 0x00	; 0
 7e8:	a2 2f       	mov	r26, r18
 7ea:	23 2f       	mov	r18, r19
 7ec:	34 2f       	mov	r19, r20
 7ee:	44 27       	eor	r20, r20
 7f0:	58 5f       	subi	r21, 0xF8	; 248
 7f2:	f3 cf       	rjmp	.-26     	; 0x7da <__addsf3x+0x34>
 7f4:	46 95       	lsr	r20
 7f6:	37 95       	ror	r19
 7f8:	27 95       	ror	r18
 7fa:	a7 95       	ror	r26
 7fc:	f0 40       	sbci	r31, 0x00	; 0
 7fe:	53 95       	inc	r21
 800:	c9 f7       	brne	.-14     	; 0x7f4 <__addsf3x+0x4e>
 802:	7e f4       	brtc	.+30     	; 0x822 <__addsf3x+0x7c>
 804:	1f 16       	cp	r1, r31
 806:	ba 0b       	sbc	r27, r26
 808:	62 0b       	sbc	r22, r18
 80a:	73 0b       	sbc	r23, r19
 80c:	84 0b       	sbc	r24, r20
 80e:	ba f0       	brmi	.+46     	; 0x83e <__addsf3x+0x98>
 810:	91 50       	subi	r25, 0x01	; 1
 812:	a1 f0       	breq	.+40     	; 0x83c <__addsf3x+0x96>
 814:	ff 0f       	add	r31, r31
 816:	bb 1f       	adc	r27, r27
 818:	66 1f       	adc	r22, r22
 81a:	77 1f       	adc	r23, r23
 81c:	88 1f       	adc	r24, r24
 81e:	c2 f7       	brpl	.-16     	; 0x810 <__addsf3x+0x6a>
 820:	0e c0       	rjmp	.+28     	; 0x83e <__addsf3x+0x98>
 822:	ba 0f       	add	r27, r26
 824:	62 1f       	adc	r22, r18
 826:	73 1f       	adc	r23, r19
 828:	84 1f       	adc	r24, r20
 82a:	48 f4       	brcc	.+18     	; 0x83e <__addsf3x+0x98>
 82c:	87 95       	ror	r24
 82e:	77 95       	ror	r23
 830:	67 95       	ror	r22
 832:	b7 95       	ror	r27
 834:	f7 95       	ror	r31
 836:	9e 3f       	cpi	r25, 0xFE	; 254
 838:	08 f0       	brcs	.+2      	; 0x83c <__addsf3x+0x96>
 83a:	b3 cf       	rjmp	.-154    	; 0x7a2 <__addsf3+0x1e>
 83c:	93 95       	inc	r25
 83e:	88 0f       	add	r24, r24
 840:	08 f0       	brcs	.+2      	; 0x844 <__addsf3x+0x9e>
 842:	99 27       	eor	r25, r25
 844:	ee 0f       	add	r30, r30
 846:	97 95       	ror	r25
 848:	87 95       	ror	r24
 84a:	08 95       	ret

0000084c <__cmpsf2>:
 84c:	6c d0       	rcall	.+216    	; 0x926 <__fp_cmp>
 84e:	08 f4       	brcc	.+2      	; 0x852 <__cmpsf2+0x6>
 850:	81 e0       	ldi	r24, 0x01	; 1
 852:	08 95       	ret

00000854 <__fixunssfsi>:
 854:	bc d0       	rcall	.+376    	; 0x9ce <__fp_splitA>
 856:	88 f0       	brcs	.+34     	; 0x87a <__fixunssfsi+0x26>
 858:	9f 57       	subi	r25, 0x7F	; 127
 85a:	90 f0       	brcs	.+36     	; 0x880 <__fixunssfsi+0x2c>
 85c:	b9 2f       	mov	r27, r25
 85e:	99 27       	eor	r25, r25
 860:	b7 51       	subi	r27, 0x17	; 23
 862:	a0 f0       	brcs	.+40     	; 0x88c <__fixunssfsi+0x38>
 864:	d1 f0       	breq	.+52     	; 0x89a <__fixunssfsi+0x46>
 866:	66 0f       	add	r22, r22
 868:	77 1f       	adc	r23, r23
 86a:	88 1f       	adc	r24, r24
 86c:	99 1f       	adc	r25, r25
 86e:	1a f0       	brmi	.+6      	; 0x876 <__fixunssfsi+0x22>
 870:	ba 95       	dec	r27
 872:	c9 f7       	brne	.-14     	; 0x866 <__fixunssfsi+0x12>
 874:	12 c0       	rjmp	.+36     	; 0x89a <__fixunssfsi+0x46>
 876:	b1 30       	cpi	r27, 0x01	; 1
 878:	81 f0       	breq	.+32     	; 0x89a <__fixunssfsi+0x46>
 87a:	c3 d0       	rcall	.+390    	; 0xa02 <__fp_zero>
 87c:	b1 e0       	ldi	r27, 0x01	; 1
 87e:	08 95       	ret
 880:	c0 c0       	rjmp	.+384    	; 0xa02 <__fp_zero>
 882:	67 2f       	mov	r22, r23
 884:	78 2f       	mov	r23, r24
 886:	88 27       	eor	r24, r24
 888:	b8 5f       	subi	r27, 0xF8	; 248
 88a:	39 f0       	breq	.+14     	; 0x89a <__fixunssfsi+0x46>
 88c:	b9 3f       	cpi	r27, 0xF9	; 249
 88e:	cc f3       	brlt	.-14     	; 0x882 <__fixunssfsi+0x2e>
 890:	86 95       	lsr	r24
 892:	77 95       	ror	r23
 894:	67 95       	ror	r22
 896:	b3 95       	inc	r27
 898:	d9 f7       	brne	.-10     	; 0x890 <__fixunssfsi+0x3c>
 89a:	3e f4       	brtc	.+14     	; 0x8aa <__fixunssfsi+0x56>
 89c:	90 95       	com	r25
 89e:	80 95       	com	r24
 8a0:	70 95       	com	r23
 8a2:	61 95       	neg	r22
 8a4:	7f 4f       	sbci	r23, 0xFF	; 255
 8a6:	8f 4f       	sbci	r24, 0xFF	; 255
 8a8:	9f 4f       	sbci	r25, 0xFF	; 255
 8aa:	08 95       	ret

000008ac <__floatunsisf>:
 8ac:	e8 94       	clt
 8ae:	09 c0       	rjmp	.+18     	; 0x8c2 <__floatsisf+0x12>

000008b0 <__floatsisf>:
 8b0:	97 fb       	bst	r25, 7
 8b2:	3e f4       	brtc	.+14     	; 0x8c2 <__floatsisf+0x12>
 8b4:	90 95       	com	r25
 8b6:	80 95       	com	r24
 8b8:	70 95       	com	r23
 8ba:	61 95       	neg	r22
 8bc:	7f 4f       	sbci	r23, 0xFF	; 255
 8be:	8f 4f       	sbci	r24, 0xFF	; 255
 8c0:	9f 4f       	sbci	r25, 0xFF	; 255
 8c2:	99 23       	and	r25, r25
 8c4:	a9 f0       	breq	.+42     	; 0x8f0 <__floatsisf+0x40>
 8c6:	f9 2f       	mov	r31, r25
 8c8:	96 e9       	ldi	r25, 0x96	; 150
 8ca:	bb 27       	eor	r27, r27
 8cc:	93 95       	inc	r25
 8ce:	f6 95       	lsr	r31
 8d0:	87 95       	ror	r24
 8d2:	77 95       	ror	r23
 8d4:	67 95       	ror	r22
 8d6:	b7 95       	ror	r27
 8d8:	f1 11       	cpse	r31, r1
 8da:	f8 cf       	rjmp	.-16     	; 0x8cc <__floatsisf+0x1c>
 8dc:	fa f4       	brpl	.+62     	; 0x91c <__stack+0x1d>
 8de:	bb 0f       	add	r27, r27
 8e0:	11 f4       	brne	.+4      	; 0x8e6 <__floatsisf+0x36>
 8e2:	60 ff       	sbrs	r22, 0
 8e4:	1b c0       	rjmp	.+54     	; 0x91c <__stack+0x1d>
 8e6:	6f 5f       	subi	r22, 0xFF	; 255
 8e8:	7f 4f       	sbci	r23, 0xFF	; 255
 8ea:	8f 4f       	sbci	r24, 0xFF	; 255
 8ec:	9f 4f       	sbci	r25, 0xFF	; 255
 8ee:	16 c0       	rjmp	.+44     	; 0x91c <__stack+0x1d>
 8f0:	88 23       	and	r24, r24
 8f2:	11 f0       	breq	.+4      	; 0x8f8 <__floatsisf+0x48>
 8f4:	96 e9       	ldi	r25, 0x96	; 150
 8f6:	11 c0       	rjmp	.+34     	; 0x91a <__stack+0x1b>
 8f8:	77 23       	and	r23, r23
 8fa:	21 f0       	breq	.+8      	; 0x904 <__stack+0x5>
 8fc:	9e e8       	ldi	r25, 0x8E	; 142
 8fe:	87 2f       	mov	r24, r23
 900:	76 2f       	mov	r23, r22
 902:	05 c0       	rjmp	.+10     	; 0x90e <__stack+0xf>
 904:	66 23       	and	r22, r22
 906:	71 f0       	breq	.+28     	; 0x924 <__stack+0x25>
 908:	96 e8       	ldi	r25, 0x86	; 134
 90a:	86 2f       	mov	r24, r22
 90c:	70 e0       	ldi	r23, 0x00	; 0
 90e:	60 e0       	ldi	r22, 0x00	; 0
 910:	2a f0       	brmi	.+10     	; 0x91c <__stack+0x1d>
 912:	9a 95       	dec	r25
 914:	66 0f       	add	r22, r22
 916:	77 1f       	adc	r23, r23
 918:	88 1f       	adc	r24, r24
 91a:	da f7       	brpl	.-10     	; 0x912 <__stack+0x13>
 91c:	88 0f       	add	r24, r24
 91e:	96 95       	lsr	r25
 920:	87 95       	ror	r24
 922:	97 f9       	bld	r25, 7
 924:	08 95       	ret

00000926 <__fp_cmp>:
 926:	99 0f       	add	r25, r25
 928:	00 08       	sbc	r0, r0
 92a:	55 0f       	add	r21, r21
 92c:	aa 0b       	sbc	r26, r26
 92e:	e0 e8       	ldi	r30, 0x80	; 128
 930:	fe ef       	ldi	r31, 0xFE	; 254
 932:	16 16       	cp	r1, r22
 934:	17 06       	cpc	r1, r23
 936:	e8 07       	cpc	r30, r24
 938:	f9 07       	cpc	r31, r25
 93a:	c0 f0       	brcs	.+48     	; 0x96c <__fp_cmp+0x46>
 93c:	12 16       	cp	r1, r18
 93e:	13 06       	cpc	r1, r19
 940:	e4 07       	cpc	r30, r20
 942:	f5 07       	cpc	r31, r21
 944:	98 f0       	brcs	.+38     	; 0x96c <__fp_cmp+0x46>
 946:	62 1b       	sub	r22, r18
 948:	73 0b       	sbc	r23, r19
 94a:	84 0b       	sbc	r24, r20
 94c:	95 0b       	sbc	r25, r21
 94e:	39 f4       	brne	.+14     	; 0x95e <__fp_cmp+0x38>
 950:	0a 26       	eor	r0, r26
 952:	61 f0       	breq	.+24     	; 0x96c <__fp_cmp+0x46>
 954:	23 2b       	or	r18, r19
 956:	24 2b       	or	r18, r20
 958:	25 2b       	or	r18, r21
 95a:	21 f4       	brne	.+8      	; 0x964 <__fp_cmp+0x3e>
 95c:	08 95       	ret
 95e:	0a 26       	eor	r0, r26
 960:	09 f4       	brne	.+2      	; 0x964 <__fp_cmp+0x3e>
 962:	a1 40       	sbci	r26, 0x01	; 1
 964:	a6 95       	lsr	r26
 966:	8f ef       	ldi	r24, 0xFF	; 255
 968:	81 1d       	adc	r24, r1
 96a:	81 1d       	adc	r24, r1
 96c:	08 95       	ret

0000096e <__fp_inf>:
 96e:	97 f9       	bld	r25, 7
 970:	9f 67       	ori	r25, 0x7F	; 127
 972:	80 e8       	ldi	r24, 0x80	; 128
 974:	70 e0       	ldi	r23, 0x00	; 0
 976:	60 e0       	ldi	r22, 0x00	; 0
 978:	08 95       	ret

0000097a <__fp_nan>:
 97a:	9f ef       	ldi	r25, 0xFF	; 255
 97c:	80 ec       	ldi	r24, 0xC0	; 192
 97e:	08 95       	ret

00000980 <__fp_pscA>:
 980:	00 24       	eor	r0, r0
 982:	0a 94       	dec	r0
 984:	16 16       	cp	r1, r22
 986:	17 06       	cpc	r1, r23
 988:	18 06       	cpc	r1, r24
 98a:	09 06       	cpc	r0, r25
 98c:	08 95       	ret

0000098e <__fp_pscB>:
 98e:	00 24       	eor	r0, r0
 990:	0a 94       	dec	r0
 992:	12 16       	cp	r1, r18
 994:	13 06       	cpc	r1, r19
 996:	14 06       	cpc	r1, r20
 998:	05 06       	cpc	r0, r21
 99a:	08 95       	ret

0000099c <__fp_round>:
 99c:	09 2e       	mov	r0, r25
 99e:	03 94       	inc	r0
 9a0:	00 0c       	add	r0, r0
 9a2:	11 f4       	brne	.+4      	; 0x9a8 <__fp_round+0xc>
 9a4:	88 23       	and	r24, r24
 9a6:	52 f0       	brmi	.+20     	; 0x9bc <__fp_round+0x20>
 9a8:	bb 0f       	add	r27, r27
 9aa:	40 f4       	brcc	.+16     	; 0x9bc <__fp_round+0x20>
 9ac:	bf 2b       	or	r27, r31
 9ae:	11 f4       	brne	.+4      	; 0x9b4 <__fp_round+0x18>
 9b0:	60 ff       	sbrs	r22, 0
 9b2:	04 c0       	rjmp	.+8      	; 0x9bc <__fp_round+0x20>
 9b4:	6f 5f       	subi	r22, 0xFF	; 255
 9b6:	7f 4f       	sbci	r23, 0xFF	; 255
 9b8:	8f 4f       	sbci	r24, 0xFF	; 255
 9ba:	9f 4f       	sbci	r25, 0xFF	; 255
 9bc:	08 95       	ret

000009be <__fp_split3>:
 9be:	57 fd       	sbrc	r21, 7
 9c0:	90 58       	subi	r25, 0x80	; 128
 9c2:	44 0f       	add	r20, r20
 9c4:	55 1f       	adc	r21, r21
 9c6:	59 f0       	breq	.+22     	; 0x9de <__fp_splitA+0x10>
 9c8:	5f 3f       	cpi	r21, 0xFF	; 255
 9ca:	71 f0       	breq	.+28     	; 0x9e8 <__fp_splitA+0x1a>
 9cc:	47 95       	ror	r20

000009ce <__fp_splitA>:
 9ce:	88 0f       	add	r24, r24
 9d0:	97 fb       	bst	r25, 7
 9d2:	99 1f       	adc	r25, r25
 9d4:	61 f0       	breq	.+24     	; 0x9ee <__fp_splitA+0x20>
 9d6:	9f 3f       	cpi	r25, 0xFF	; 255
 9d8:	79 f0       	breq	.+30     	; 0x9f8 <__fp_splitA+0x2a>
 9da:	87 95       	ror	r24
 9dc:	08 95       	ret
 9de:	12 16       	cp	r1, r18
 9e0:	13 06       	cpc	r1, r19
 9e2:	14 06       	cpc	r1, r20
 9e4:	55 1f       	adc	r21, r21
 9e6:	f2 cf       	rjmp	.-28     	; 0x9cc <__fp_split3+0xe>
 9e8:	46 95       	lsr	r20
 9ea:	f1 df       	rcall	.-30     	; 0x9ce <__fp_splitA>
 9ec:	08 c0       	rjmp	.+16     	; 0x9fe <__fp_splitA+0x30>
 9ee:	16 16       	cp	r1, r22
 9f0:	17 06       	cpc	r1, r23
 9f2:	18 06       	cpc	r1, r24
 9f4:	99 1f       	adc	r25, r25
 9f6:	f1 cf       	rjmp	.-30     	; 0x9da <__fp_splitA+0xc>
 9f8:	86 95       	lsr	r24
 9fa:	71 05       	cpc	r23, r1
 9fc:	61 05       	cpc	r22, r1
 9fe:	08 94       	sec
 a00:	08 95       	ret

00000a02 <__fp_zero>:
 a02:	e8 94       	clt

00000a04 <__fp_szero>:
 a04:	bb 27       	eor	r27, r27
 a06:	66 27       	eor	r22, r22
 a08:	77 27       	eor	r23, r23
 a0a:	cb 01       	movw	r24, r22
 a0c:	97 f9       	bld	r25, 7
 a0e:	08 95       	ret

00000a10 <__gesf2>:
 a10:	8a df       	rcall	.-236    	; 0x926 <__fp_cmp>
 a12:	08 f4       	brcc	.+2      	; 0xa16 <__gesf2+0x6>
 a14:	8f ef       	ldi	r24, 0xFF	; 255
 a16:	08 95       	ret

00000a18 <__mulsf3>:
 a18:	0b d0       	rcall	.+22     	; 0xa30 <__mulsf3x>
 a1a:	c0 cf       	rjmp	.-128    	; 0x99c <__fp_round>
 a1c:	b1 df       	rcall	.-158    	; 0x980 <__fp_pscA>
 a1e:	28 f0       	brcs	.+10     	; 0xa2a <__mulsf3+0x12>
 a20:	b6 df       	rcall	.-148    	; 0x98e <__fp_pscB>
 a22:	18 f0       	brcs	.+6      	; 0xa2a <__mulsf3+0x12>
 a24:	95 23       	and	r25, r21
 a26:	09 f0       	breq	.+2      	; 0xa2a <__mulsf3+0x12>
 a28:	a2 cf       	rjmp	.-188    	; 0x96e <__fp_inf>
 a2a:	a7 cf       	rjmp	.-178    	; 0x97a <__fp_nan>
 a2c:	11 24       	eor	r1, r1
 a2e:	ea cf       	rjmp	.-44     	; 0xa04 <__fp_szero>

00000a30 <__mulsf3x>:
 a30:	c6 df       	rcall	.-116    	; 0x9be <__fp_split3>
 a32:	a0 f3       	brcs	.-24     	; 0xa1c <__mulsf3+0x4>

00000a34 <__mulsf3_pse>:
 a34:	95 9f       	mul	r25, r21
 a36:	d1 f3       	breq	.-12     	; 0xa2c <__mulsf3+0x14>
 a38:	95 0f       	add	r25, r21
 a3a:	50 e0       	ldi	r21, 0x00	; 0
 a3c:	55 1f       	adc	r21, r21
 a3e:	62 9f       	mul	r22, r18
 a40:	f0 01       	movw	r30, r0
 a42:	72 9f       	mul	r23, r18
 a44:	bb 27       	eor	r27, r27
 a46:	f0 0d       	add	r31, r0
 a48:	b1 1d       	adc	r27, r1
 a4a:	63 9f       	mul	r22, r19
 a4c:	aa 27       	eor	r26, r26
 a4e:	f0 0d       	add	r31, r0
 a50:	b1 1d       	adc	r27, r1
 a52:	aa 1f       	adc	r26, r26
 a54:	64 9f       	mul	r22, r20
 a56:	66 27       	eor	r22, r22
 a58:	b0 0d       	add	r27, r0
 a5a:	a1 1d       	adc	r26, r1
 a5c:	66 1f       	adc	r22, r22
 a5e:	82 9f       	mul	r24, r18
 a60:	22 27       	eor	r18, r18
 a62:	b0 0d       	add	r27, r0
 a64:	a1 1d       	adc	r26, r1
 a66:	62 1f       	adc	r22, r18
 a68:	73 9f       	mul	r23, r19
 a6a:	b0 0d       	add	r27, r0
 a6c:	a1 1d       	adc	r26, r1
 a6e:	62 1f       	adc	r22, r18
 a70:	83 9f       	mul	r24, r19
 a72:	a0 0d       	add	r26, r0
 a74:	61 1d       	adc	r22, r1
 a76:	22 1f       	adc	r18, r18
 a78:	74 9f       	mul	r23, r20
 a7a:	33 27       	eor	r19, r19
 a7c:	a0 0d       	add	r26, r0
 a7e:	61 1d       	adc	r22, r1
 a80:	23 1f       	adc	r18, r19
 a82:	84 9f       	mul	r24, r20
 a84:	60 0d       	add	r22, r0
 a86:	21 1d       	adc	r18, r1
 a88:	82 2f       	mov	r24, r18
 a8a:	76 2f       	mov	r23, r22
 a8c:	6a 2f       	mov	r22, r26
 a8e:	11 24       	eor	r1, r1
 a90:	9f 57       	subi	r25, 0x7F	; 127
 a92:	50 40       	sbci	r21, 0x00	; 0
 a94:	8a f0       	brmi	.+34     	; 0xab8 <__mulsf3_pse+0x84>
 a96:	e1 f0       	breq	.+56     	; 0xad0 <__mulsf3_pse+0x9c>
 a98:	88 23       	and	r24, r24
 a9a:	4a f0       	brmi	.+18     	; 0xaae <__mulsf3_pse+0x7a>
 a9c:	ee 0f       	add	r30, r30
 a9e:	ff 1f       	adc	r31, r31
 aa0:	bb 1f       	adc	r27, r27
 aa2:	66 1f       	adc	r22, r22
 aa4:	77 1f       	adc	r23, r23
 aa6:	88 1f       	adc	r24, r24
 aa8:	91 50       	subi	r25, 0x01	; 1
 aaa:	50 40       	sbci	r21, 0x00	; 0
 aac:	a9 f7       	brne	.-22     	; 0xa98 <__mulsf3_pse+0x64>
 aae:	9e 3f       	cpi	r25, 0xFE	; 254
 ab0:	51 05       	cpc	r21, r1
 ab2:	70 f0       	brcs	.+28     	; 0xad0 <__mulsf3_pse+0x9c>
 ab4:	5c cf       	rjmp	.-328    	; 0x96e <__fp_inf>
 ab6:	a6 cf       	rjmp	.-180    	; 0xa04 <__fp_szero>
 ab8:	5f 3f       	cpi	r21, 0xFF	; 255
 aba:	ec f3       	brlt	.-6      	; 0xab6 <__mulsf3_pse+0x82>
 abc:	98 3e       	cpi	r25, 0xE8	; 232
 abe:	dc f3       	brlt	.-10     	; 0xab6 <__mulsf3_pse+0x82>
 ac0:	86 95       	lsr	r24
 ac2:	77 95       	ror	r23
 ac4:	67 95       	ror	r22
 ac6:	b7 95       	ror	r27
 ac8:	f7 95       	ror	r31
 aca:	e7 95       	ror	r30
 acc:	9f 5f       	subi	r25, 0xFF	; 255
 ace:	c1 f7       	brne	.-16     	; 0xac0 <__mulsf3_pse+0x8c>
 ad0:	fe 2b       	or	r31, r30
 ad2:	88 0f       	add	r24, r24
 ad4:	91 1d       	adc	r25, r1
 ad6:	96 95       	lsr	r25
 ad8:	87 95       	ror	r24
 ada:	97 f9       	bld	r25, 7
 adc:	08 95       	ret

00000ade <malloc>:
 ade:	cf 93       	push	r28
 ae0:	df 93       	push	r29
 ae2:	82 30       	cpi	r24, 0x02	; 2
 ae4:	91 05       	cpc	r25, r1
 ae6:	10 f4       	brcc	.+4      	; 0xaec <malloc+0xe>
 ae8:	82 e0       	ldi	r24, 0x02	; 2
 aea:	90 e0       	ldi	r25, 0x00	; 0
 aec:	e0 91 ba 01 	lds	r30, 0x01BA
 af0:	f0 91 bb 01 	lds	r31, 0x01BB
 af4:	20 e0       	ldi	r18, 0x00	; 0
 af6:	30 e0       	ldi	r19, 0x00	; 0
 af8:	a0 e0       	ldi	r26, 0x00	; 0
 afa:	b0 e0       	ldi	r27, 0x00	; 0
 afc:	30 97       	sbiw	r30, 0x00	; 0
 afe:	39 f1       	breq	.+78     	; 0xb4e <malloc+0x70>
 b00:	40 81       	ld	r20, Z
 b02:	51 81       	ldd	r21, Z+1	; 0x01
 b04:	48 17       	cp	r20, r24
 b06:	59 07       	cpc	r21, r25
 b08:	b8 f0       	brcs	.+46     	; 0xb38 <malloc+0x5a>
 b0a:	48 17       	cp	r20, r24
 b0c:	59 07       	cpc	r21, r25
 b0e:	71 f4       	brne	.+28     	; 0xb2c <malloc+0x4e>
 b10:	82 81       	ldd	r24, Z+2	; 0x02
 b12:	93 81       	ldd	r25, Z+3	; 0x03
 b14:	10 97       	sbiw	r26, 0x00	; 0
 b16:	29 f0       	breq	.+10     	; 0xb22 <malloc+0x44>
 b18:	13 96       	adiw	r26, 0x03	; 3
 b1a:	9c 93       	st	X, r25
 b1c:	8e 93       	st	-X, r24
 b1e:	12 97       	sbiw	r26, 0x02	; 2
 b20:	2c c0       	rjmp	.+88     	; 0xb7a <malloc+0x9c>
 b22:	90 93 bb 01 	sts	0x01BB, r25
 b26:	80 93 ba 01 	sts	0x01BA, r24
 b2a:	27 c0       	rjmp	.+78     	; 0xb7a <malloc+0x9c>
 b2c:	21 15       	cp	r18, r1
 b2e:	31 05       	cpc	r19, r1
 b30:	31 f0       	breq	.+12     	; 0xb3e <malloc+0x60>
 b32:	42 17       	cp	r20, r18
 b34:	53 07       	cpc	r21, r19
 b36:	18 f0       	brcs	.+6      	; 0xb3e <malloc+0x60>
 b38:	a9 01       	movw	r20, r18
 b3a:	db 01       	movw	r26, r22
 b3c:	01 c0       	rjmp	.+2      	; 0xb40 <malloc+0x62>
 b3e:	ef 01       	movw	r28, r30
 b40:	9a 01       	movw	r18, r20
 b42:	bd 01       	movw	r22, r26
 b44:	df 01       	movw	r26, r30
 b46:	02 80       	ldd	r0, Z+2	; 0x02
 b48:	f3 81       	ldd	r31, Z+3	; 0x03
 b4a:	e0 2d       	mov	r30, r0
 b4c:	d7 cf       	rjmp	.-82     	; 0xafc <malloc+0x1e>
 b4e:	21 15       	cp	r18, r1
 b50:	31 05       	cpc	r19, r1
 b52:	f9 f0       	breq	.+62     	; 0xb92 <malloc+0xb4>
 b54:	28 1b       	sub	r18, r24
 b56:	39 0b       	sbc	r19, r25
 b58:	24 30       	cpi	r18, 0x04	; 4
 b5a:	31 05       	cpc	r19, r1
 b5c:	80 f4       	brcc	.+32     	; 0xb7e <malloc+0xa0>
 b5e:	8a 81       	ldd	r24, Y+2	; 0x02
 b60:	9b 81       	ldd	r25, Y+3	; 0x03
 b62:	61 15       	cp	r22, r1
 b64:	71 05       	cpc	r23, r1
 b66:	21 f0       	breq	.+8      	; 0xb70 <malloc+0x92>
 b68:	fb 01       	movw	r30, r22
 b6a:	93 83       	std	Z+3, r25	; 0x03
 b6c:	82 83       	std	Z+2, r24	; 0x02
 b6e:	04 c0       	rjmp	.+8      	; 0xb78 <malloc+0x9a>
 b70:	90 93 bb 01 	sts	0x01BB, r25
 b74:	80 93 ba 01 	sts	0x01BA, r24
 b78:	fe 01       	movw	r30, r28
 b7a:	32 96       	adiw	r30, 0x02	; 2
 b7c:	44 c0       	rjmp	.+136    	; 0xc06 <malloc+0x128>
 b7e:	fe 01       	movw	r30, r28
 b80:	e2 0f       	add	r30, r18
 b82:	f3 1f       	adc	r31, r19
 b84:	81 93       	st	Z+, r24
 b86:	91 93       	st	Z+, r25
 b88:	22 50       	subi	r18, 0x02	; 2
 b8a:	31 09       	sbc	r19, r1
 b8c:	39 83       	std	Y+1, r19	; 0x01
 b8e:	28 83       	st	Y, r18
 b90:	3a c0       	rjmp	.+116    	; 0xc06 <malloc+0x128>
 b92:	20 91 b8 01 	lds	r18, 0x01B8
 b96:	30 91 b9 01 	lds	r19, 0x01B9
 b9a:	23 2b       	or	r18, r19
 b9c:	41 f4       	brne	.+16     	; 0xbae <malloc+0xd0>
 b9e:	20 91 02 01 	lds	r18, 0x0102
 ba2:	30 91 03 01 	lds	r19, 0x0103
 ba6:	30 93 b9 01 	sts	0x01B9, r19
 baa:	20 93 b8 01 	sts	0x01B8, r18
 bae:	20 91 00 01 	lds	r18, 0x0100
 bb2:	30 91 01 01 	lds	r19, 0x0101
 bb6:	21 15       	cp	r18, r1
 bb8:	31 05       	cpc	r19, r1
 bba:	41 f4       	brne	.+16     	; 0xbcc <malloc+0xee>
 bbc:	2d b7       	in	r18, 0x3d	; 61
 bbe:	3e b7       	in	r19, 0x3e	; 62
 bc0:	40 91 04 01 	lds	r20, 0x0104
 bc4:	50 91 05 01 	lds	r21, 0x0105
 bc8:	24 1b       	sub	r18, r20
 bca:	35 0b       	sbc	r19, r21
 bcc:	e0 91 b8 01 	lds	r30, 0x01B8
 bd0:	f0 91 b9 01 	lds	r31, 0x01B9
 bd4:	e2 17       	cp	r30, r18
 bd6:	f3 07       	cpc	r31, r19
 bd8:	a0 f4       	brcc	.+40     	; 0xc02 <malloc+0x124>
 bda:	2e 1b       	sub	r18, r30
 bdc:	3f 0b       	sbc	r19, r31
 bde:	28 17       	cp	r18, r24
 be0:	39 07       	cpc	r19, r25
 be2:	78 f0       	brcs	.+30     	; 0xc02 <malloc+0x124>
 be4:	ac 01       	movw	r20, r24
 be6:	4e 5f       	subi	r20, 0xFE	; 254
 be8:	5f 4f       	sbci	r21, 0xFF	; 255
 bea:	24 17       	cp	r18, r20
 bec:	35 07       	cpc	r19, r21
 bee:	48 f0       	brcs	.+18     	; 0xc02 <malloc+0x124>
 bf0:	4e 0f       	add	r20, r30
 bf2:	5f 1f       	adc	r21, r31
 bf4:	50 93 b9 01 	sts	0x01B9, r21
 bf8:	40 93 b8 01 	sts	0x01B8, r20
 bfc:	81 93       	st	Z+, r24
 bfe:	91 93       	st	Z+, r25
 c00:	02 c0       	rjmp	.+4      	; 0xc06 <malloc+0x128>
 c02:	e0 e0       	ldi	r30, 0x00	; 0
 c04:	f0 e0       	ldi	r31, 0x00	; 0
 c06:	cf 01       	movw	r24, r30
 c08:	df 91       	pop	r29
 c0a:	cf 91       	pop	r28
 c0c:	08 95       	ret

00000c0e <free>:
 c0e:	cf 93       	push	r28
 c10:	df 93       	push	r29
 c12:	00 97       	sbiw	r24, 0x00	; 0
 c14:	09 f4       	brne	.+2      	; 0xc18 <free+0xa>
 c16:	87 c0       	rjmp	.+270    	; 0xd26 <free+0x118>
 c18:	fc 01       	movw	r30, r24
 c1a:	32 97       	sbiw	r30, 0x02	; 2
 c1c:	13 82       	std	Z+3, r1	; 0x03
 c1e:	12 82       	std	Z+2, r1	; 0x02
 c20:	c0 91 ba 01 	lds	r28, 0x01BA
 c24:	d0 91 bb 01 	lds	r29, 0x01BB
 c28:	20 97       	sbiw	r28, 0x00	; 0
 c2a:	81 f4       	brne	.+32     	; 0xc4c <free+0x3e>
 c2c:	20 81       	ld	r18, Z
 c2e:	31 81       	ldd	r19, Z+1	; 0x01
 c30:	28 0f       	add	r18, r24
 c32:	39 1f       	adc	r19, r25
 c34:	80 91 b8 01 	lds	r24, 0x01B8
 c38:	90 91 b9 01 	lds	r25, 0x01B9
 c3c:	82 17       	cp	r24, r18
 c3e:	93 07       	cpc	r25, r19
 c40:	79 f5       	brne	.+94     	; 0xca0 <free+0x92>
 c42:	f0 93 b9 01 	sts	0x01B9, r31
 c46:	e0 93 b8 01 	sts	0x01B8, r30
 c4a:	6d c0       	rjmp	.+218    	; 0xd26 <free+0x118>
 c4c:	de 01       	movw	r26, r28
 c4e:	20 e0       	ldi	r18, 0x00	; 0
 c50:	30 e0       	ldi	r19, 0x00	; 0
 c52:	ae 17       	cp	r26, r30
 c54:	bf 07       	cpc	r27, r31
 c56:	50 f4       	brcc	.+20     	; 0xc6c <free+0x5e>
 c58:	12 96       	adiw	r26, 0x02	; 2
 c5a:	4d 91       	ld	r20, X+
 c5c:	5c 91       	ld	r21, X
 c5e:	13 97       	sbiw	r26, 0x03	; 3
 c60:	9d 01       	movw	r18, r26
 c62:	41 15       	cp	r20, r1
 c64:	51 05       	cpc	r21, r1
 c66:	09 f1       	breq	.+66     	; 0xcaa <free+0x9c>
 c68:	da 01       	movw	r26, r20
 c6a:	f3 cf       	rjmp	.-26     	; 0xc52 <free+0x44>
 c6c:	b3 83       	std	Z+3, r27	; 0x03
 c6e:	a2 83       	std	Z+2, r26	; 0x02
 c70:	40 81       	ld	r20, Z
 c72:	51 81       	ldd	r21, Z+1	; 0x01
 c74:	84 0f       	add	r24, r20
 c76:	95 1f       	adc	r25, r21
 c78:	8a 17       	cp	r24, r26
 c7a:	9b 07       	cpc	r25, r27
 c7c:	71 f4       	brne	.+28     	; 0xc9a <free+0x8c>
 c7e:	8d 91       	ld	r24, X+
 c80:	9c 91       	ld	r25, X
 c82:	11 97       	sbiw	r26, 0x01	; 1
 c84:	84 0f       	add	r24, r20
 c86:	95 1f       	adc	r25, r21
 c88:	02 96       	adiw	r24, 0x02	; 2
 c8a:	91 83       	std	Z+1, r25	; 0x01
 c8c:	80 83       	st	Z, r24
 c8e:	12 96       	adiw	r26, 0x02	; 2
 c90:	8d 91       	ld	r24, X+
 c92:	9c 91       	ld	r25, X
 c94:	13 97       	sbiw	r26, 0x03	; 3
 c96:	93 83       	std	Z+3, r25	; 0x03
 c98:	82 83       	std	Z+2, r24	; 0x02
 c9a:	21 15       	cp	r18, r1
 c9c:	31 05       	cpc	r19, r1
 c9e:	29 f4       	brne	.+10     	; 0xcaa <free+0x9c>
 ca0:	f0 93 bb 01 	sts	0x01BB, r31
 ca4:	e0 93 ba 01 	sts	0x01BA, r30
 ca8:	3e c0       	rjmp	.+124    	; 0xd26 <free+0x118>
 caa:	d9 01       	movw	r26, r18
 cac:	13 96       	adiw	r26, 0x03	; 3
 cae:	fc 93       	st	X, r31
 cb0:	ee 93       	st	-X, r30
 cb2:	12 97       	sbiw	r26, 0x02	; 2
 cb4:	4d 91       	ld	r20, X+
 cb6:	5d 91       	ld	r21, X+
 cb8:	a4 0f       	add	r26, r20
 cba:	b5 1f       	adc	r27, r21
 cbc:	ea 17       	cp	r30, r26
 cbe:	fb 07       	cpc	r31, r27
 cc0:	79 f4       	brne	.+30     	; 0xce0 <free+0xd2>
 cc2:	80 81       	ld	r24, Z
 cc4:	91 81       	ldd	r25, Z+1	; 0x01
 cc6:	84 0f       	add	r24, r20
 cc8:	95 1f       	adc	r25, r21
 cca:	02 96       	adiw	r24, 0x02	; 2
 ccc:	d9 01       	movw	r26, r18
 cce:	11 96       	adiw	r26, 0x01	; 1
 cd0:	9c 93       	st	X, r25
 cd2:	8e 93       	st	-X, r24
 cd4:	82 81       	ldd	r24, Z+2	; 0x02
 cd6:	93 81       	ldd	r25, Z+3	; 0x03
 cd8:	13 96       	adiw	r26, 0x03	; 3
 cda:	9c 93       	st	X, r25
 cdc:	8e 93       	st	-X, r24
 cde:	12 97       	sbiw	r26, 0x02	; 2
 ce0:	e0 e0       	ldi	r30, 0x00	; 0
 ce2:	f0 e0       	ldi	r31, 0x00	; 0
 ce4:	8a 81       	ldd	r24, Y+2	; 0x02
 ce6:	9b 81       	ldd	r25, Y+3	; 0x03
 ce8:	00 97       	sbiw	r24, 0x00	; 0
 cea:	19 f0       	breq	.+6      	; 0xcf2 <free+0xe4>
 cec:	fe 01       	movw	r30, r28
 cee:	ec 01       	movw	r28, r24
 cf0:	f9 cf       	rjmp	.-14     	; 0xce4 <free+0xd6>
 cf2:	ce 01       	movw	r24, r28
 cf4:	02 96       	adiw	r24, 0x02	; 2
 cf6:	28 81       	ld	r18, Y
 cf8:	39 81       	ldd	r19, Y+1	; 0x01
 cfa:	82 0f       	add	r24, r18
 cfc:	93 1f       	adc	r25, r19
 cfe:	20 91 b8 01 	lds	r18, 0x01B8
 d02:	30 91 b9 01 	lds	r19, 0x01B9
 d06:	28 17       	cp	r18, r24
 d08:	39 07       	cpc	r19, r25
 d0a:	69 f4       	brne	.+26     	; 0xd26 <free+0x118>
 d0c:	30 97       	sbiw	r30, 0x00	; 0
 d0e:	29 f4       	brne	.+10     	; 0xd1a <free+0x10c>
 d10:	10 92 bb 01 	sts	0x01BB, r1
 d14:	10 92 ba 01 	sts	0x01BA, r1
 d18:	02 c0       	rjmp	.+4      	; 0xd1e <free+0x110>
 d1a:	13 82       	std	Z+3, r1	; 0x03
 d1c:	12 82       	std	Z+2, r1	; 0x02
 d1e:	d0 93 b9 01 	sts	0x01B9, r29
 d22:	c0 93 b8 01 	sts	0x01B8, r28
 d26:	df 91       	pop	r29
 d28:	cf 91       	pop	r28
 d2a:	08 95       	ret

00000d2c <_exit>:
 d2c:	f8 94       	cli

00000d2e <__stop_program>:
 d2e:	ff cf       	rjmp	.-2      	; 0xd2e <__stop_program>
