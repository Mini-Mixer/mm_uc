
mm_uc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b6  00800100  00000f16  00000faa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  008001b6  008001b6  00001060  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001060  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00001090  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000981  00000000  00000000  00001128  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000286  00000000  00000000  00001aa9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000405  00000000  00000000  00001d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000278  00000000  00000000  00002134  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002b8  00000000  00000000  000023ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009a2  00000000  00000000  00002664  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000118  00000000  00000000  00003006  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e1       	ldi	r30, 0x16	; 22
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 3b       	cpi	r26, 0xB6	; 182
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 eb       	ldi	r26, 0xB6	; 182
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 3b       	cpi	r26, 0xBE	; 190
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <main>
  9e:	0c 94 89 07 	jmp	0xf12	; 0xf12 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <UART_Init>:


void UART_Init( unsigned int ubrr)
{
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
  a6:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
  aa:	80 93 c4 00 	sts	0x00C4, r24
	
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  ae:	88 e1       	ldi	r24, 0x18	; 24
  b0:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
  b4:	8e e0       	ldi	r24, 0x0E	; 14
  b6:	80 93 c2 00 	sts	0x00C2, r24
  ba:	08 95       	ret

000000bc <UART_Transmit>:
}

void UART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
  bc:	e0 ec       	ldi	r30, 0xC0	; 192
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	90 81       	ld	r25, Z
  c2:	95 ff       	sbrs	r25, 5
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <UART_Transmit+0x4>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
  c6:	80 93 c6 00 	sts	0x00C6, r24
  ca:	08 95       	ret

000000cc <UART_TString>:
void UART_Transmit(unsigned char);
unsigned char UART_Receive(void);
void UART_Flush(void);

void UART_TString(char* string){
  cc:	1f 93       	push	r17
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	ec 01       	movw	r28, r24
	uint8_t index = 0;
	while(string[index]){
  d4:	88 81       	ld	r24, Y
  d6:	88 23       	and	r24, r24
  d8:	51 f0       	breq	.+20     	; 0xee <UART_TString+0x22>
void UART_Transmit(unsigned char);
unsigned char UART_Receive(void);
void UART_Flush(void);

void UART_TString(char* string){
	uint8_t index = 0;
  da:	10 e0       	ldi	r17, 0x00	; 0
	while(string[index]){
		UART_Transmit((unsigned char)string[index]);
  dc:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_Transmit>
		index++;
  e0:	1f 5f       	subi	r17, 0xFF	; 255
unsigned char UART_Receive(void);
void UART_Flush(void);

void UART_TString(char* string){
	uint8_t index = 0;
	while(string[index]){
  e2:	fe 01       	movw	r30, r28
  e4:	e1 0f       	add	r30, r17
  e6:	f1 1d       	adc	r31, r1
  e8:	80 81       	ld	r24, Z
  ea:	81 11       	cpse	r24, r1
  ec:	f7 cf       	rjmp	.-18     	; 0xdc <UART_TString+0x10>
		UART_Transmit((unsigned char)string[index]);
		index++;
	}
}
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	1f 91       	pop	r17
  f4:	08 95       	ret

000000f6 <CRLF>:

void CRLF(){
	UART_Transmit(0x0D);
  f6:	8d e0       	ldi	r24, 0x0D	; 13
  f8:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_Transmit>
	UART_Transmit(0x0A);
  fc:	8a e0       	ldi	r24, 0x0A	; 10
  fe:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_Transmit>
 102:	08 95       	ret

00000104 <println>:
}

void println(char* string){
	UART_TString(string);
 104:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
	CRLF();
 108:	0e 94 7b 00 	call	0xf6	; 0xf6 <CRLF>
 10c:	08 95       	ret

0000010e <UART_Receive>:
}

unsigned char UART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
 10e:	e0 ec       	ldi	r30, 0xC0	; 192
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	88 23       	and	r24, r24
 116:	ec f7       	brge	.-6      	; 0x112 <UART_Receive+0x4>
	;
	/* Get and return received data from buffer */
	return UDR0;
 118:	80 91 c6 00 	lds	r24, 0x00C6
}
 11c:	08 95       	ret

0000011e <__vector_14>:

/* Interrupt based timer
	Credit: https://sites.google.com/site/qeewiki/books/avr-guide/timers-on-the-atmega328
*/

ISR (TIMER0_COMPA_vect){
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	2f 93       	push	r18
 12a:	3f 93       	push	r19
 12c:	4f 93       	push	r20
 12e:	5f 93       	push	r21
 130:	6f 93       	push	r22
 132:	7f 93       	push	r23
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
 138:	af 93       	push	r26
 13a:	bf 93       	push	r27
 13c:	ef 93       	push	r30
 13e:	ff 93       	push	r31
	mstime+=1.6; 
 140:	60 91 b6 01 	lds	r22, 0x01B6
 144:	70 91 b7 01 	lds	r23, 0x01B7
 148:	80 91 b8 01 	lds	r24, 0x01B8
 14c:	90 91 b9 01 	lds	r25, 0x01B9
 150:	2d ec       	ldi	r18, 0xCD	; 205
 152:	3c ec       	ldi	r19, 0xCC	; 204
 154:	4c ec       	ldi	r20, 0xCC	; 204
 156:	5f e3       	ldi	r21, 0x3F	; 63
 158:	0e 94 9b 04 	call	0x936	; 0x936 <__addsf3>
 15c:	60 93 b6 01 	sts	0x01B6, r22
 160:	70 93 b7 01 	sts	0x01B7, r23
 164:	80 93 b8 01 	sts	0x01B8, r24
 168:	90 93 b9 01 	sts	0x01B9, r25
}
 16c:	ff 91       	pop	r31
 16e:	ef 91       	pop	r30
 170:	bf 91       	pop	r27
 172:	af 91       	pop	r26
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	7f 91       	pop	r23
 17a:	6f 91       	pop	r22
 17c:	5f 91       	pop	r21
 17e:	4f 91       	pop	r20
 180:	3f 91       	pop	r19
 182:	2f 91       	pop	r18
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <timer0_Init>:

void timer0_Init(void){
    TCCR0A |= (1 << WGM01);
 18e:	84 b5       	in	r24, 0x24	; 36
 190:	82 60       	ori	r24, 0x02	; 2
 192:	84 bd       	out	0x24, r24	; 36
    TIMSK0 |= (1 << OCIE0A);
 194:	ee e6       	ldi	r30, 0x6E	; 110
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	82 60       	ori	r24, 0x02	; 2
 19c:	80 83       	st	Z, r24
    sei();         
 19e:	78 94       	sei
    TCCR0B |= (1 << CS02);  
 1a0:	85 b5       	in	r24, 0x25	; 37
 1a2:	84 60       	ori	r24, 0x04	; 4
 1a4:	85 bd       	out	0x25, r24	; 37
 1a6:	08 95       	ret

000001a8 <pumpOn>:
#define DELTA 1000

void pumpOn(pump *pmp){
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	ec 01       	movw	r28, r24
	pmp->finished = 0;
 1ae:	19 86       	std	Y+9, r1	; 0x09
	UART_Transmit(pmp->label);
 1b0:	88 81       	ld	r24, Y
 1b2:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_Transmit>
	UART_TString(" is on!");
 1b6:	86 e0       	ldi	r24, 0x06	; 6
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
	switch(pmp->label){
 1be:	88 81       	ld	r24, Y
 1c0:	83 34       	cpi	r24, 0x43	; 67
 1c2:	81 f0       	breq	.+32     	; 0x1e4 <pumpOn+0x3c>
 1c4:	28 f4       	brcc	.+10     	; 0x1d0 <pumpOn+0x28>
 1c6:	81 34       	cpi	r24, 0x41	; 65
 1c8:	49 f0       	breq	.+18     	; 0x1dc <pumpOn+0x34>
 1ca:	82 34       	cpi	r24, 0x42	; 66
 1cc:	49 f0       	breq	.+18     	; 0x1e0 <pumpOn+0x38>
 1ce:	11 c0       	rjmp	.+34     	; 0x1f2 <pumpOn+0x4a>
 1d0:	85 34       	cpi	r24, 0x45	; 69
 1d2:	61 f0       	breq	.+24     	; 0x1ec <pumpOn+0x44>
 1d4:	48 f0       	brcs	.+18     	; 0x1e8 <pumpOn+0x40>
 1d6:	86 34       	cpi	r24, 0x46	; 70
 1d8:	59 f0       	breq	.+22     	; 0x1f0 <pumpOn+0x48>
 1da:	0b c0       	rjmp	.+22     	; 0x1f2 <pumpOn+0x4a>
		case 'A':
			DDRD |= 1<<PD3;
 1dc:	53 9a       	sbi	0x0a, 3	; 10
			break;
 1de:	09 c0       	rjmp	.+18     	; 0x1f2 <pumpOn+0x4a>
		case 'B':
			DDRD |= 1<<PD5;
 1e0:	55 9a       	sbi	0x0a, 5	; 10
			break;
 1e2:	07 c0       	rjmp	.+14     	; 0x1f2 <pumpOn+0x4a>
		case 'C':
			DDRD |= 1<<PD6;
 1e4:	56 9a       	sbi	0x0a, 6	; 10
			break;
 1e6:	05 c0       	rjmp	.+10     	; 0x1f2 <pumpOn+0x4a>
		case 'D':
			DDRB |= 1<<PB1;
 1e8:	21 9a       	sbi	0x04, 1	; 4
			break;
 1ea:	03 c0       	rjmp	.+6      	; 0x1f2 <pumpOn+0x4a>
		case 'E':
			DDRB |= 1<<PB2;
 1ec:	22 9a       	sbi	0x04, 2	; 4
			break;
 1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <pumpOn+0x4a>
		case 'F':
			DDRB |= 1<<PB3;
 1f0:	23 9a       	sbi	0x04, 3	; 4
			break;
		default:
			break;
	}
	CRLF();
 1f2:	0e 94 7b 00 	call	0xf6	; 0xf6 <CRLF>
}
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <pumpOff>:

void pumpOff(pump *pmp){
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	ec 01       	movw	r28, r24
	pmp->finished = 1;
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	89 87       	std	Y+9, r24	; 0x09
	UART_Transmit(pmp->label);
 206:	88 81       	ld	r24, Y
 208:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_Transmit>
	UART_TString(" is off!");
 20c:	8e e0       	ldi	r24, 0x0E	; 14
 20e:	91 e0       	ldi	r25, 0x01	; 1
 210:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
	switch(pmp->label){
 214:	88 81       	ld	r24, Y
 216:	83 34       	cpi	r24, 0x43	; 67
 218:	81 f0       	breq	.+32     	; 0x23a <pumpOff+0x3e>
 21a:	28 f4       	brcc	.+10     	; 0x226 <pumpOff+0x2a>
 21c:	81 34       	cpi	r24, 0x41	; 65
 21e:	49 f0       	breq	.+18     	; 0x232 <pumpOff+0x36>
 220:	82 34       	cpi	r24, 0x42	; 66
 222:	49 f0       	breq	.+18     	; 0x236 <pumpOff+0x3a>
 224:	11 c0       	rjmp	.+34     	; 0x248 <pumpOff+0x4c>
 226:	85 34       	cpi	r24, 0x45	; 69
 228:	61 f0       	breq	.+24     	; 0x242 <pumpOff+0x46>
 22a:	48 f0       	brcs	.+18     	; 0x23e <pumpOff+0x42>
 22c:	86 34       	cpi	r24, 0x46	; 70
 22e:	59 f0       	breq	.+22     	; 0x246 <pumpOff+0x4a>
 230:	0b c0       	rjmp	.+22     	; 0x248 <pumpOff+0x4c>
		case 'A':
			DDRD &= ~(1<<PD3);
 232:	53 98       	cbi	0x0a, 3	; 10
			break;
 234:	09 c0       	rjmp	.+18     	; 0x248 <pumpOff+0x4c>
		case 'B':
			DDRD &= ~(1<<PD5);
 236:	55 98       	cbi	0x0a, 5	; 10
			break;
 238:	07 c0       	rjmp	.+14     	; 0x248 <pumpOff+0x4c>
		case 'C':
			DDRD &= ~(1<<PD6); 
 23a:	56 98       	cbi	0x0a, 6	; 10
			break;
 23c:	05 c0       	rjmp	.+10     	; 0x248 <pumpOff+0x4c>
		case 'D':
			DDRB &= ~(1<<PB1);
 23e:	21 98       	cbi	0x04, 1	; 4
			break;
 240:	03 c0       	rjmp	.+6      	; 0x248 <pumpOff+0x4c>
		case 'E':
			DDRB &= ~(1<<PB2);
 242:	22 98       	cbi	0x04, 2	; 4
			break;
 244:	01 c0       	rjmp	.+2      	; 0x248 <pumpOff+0x4c>
		case 'F':
			DDRB &= ~(1<<PB3);
 246:	23 98       	cbi	0x04, 3	; 4
			break;
		default:
			break;
	}
	CRLF();
 248:	0e 94 7b 00 	call	0xf6	; 0xf6 <CRLF>
}
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	08 95       	ret

00000252 <parallelDispense>:

void parallelDispense(request* req){
 252:	2f 92       	push	r2
 254:	3f 92       	push	r3
 256:	4f 92       	push	r4
 258:	5f 92       	push	r5
 25a:	6f 92       	push	r6
 25c:	7f 92       	push	r7
 25e:	8f 92       	push	r8
 260:	9f 92       	push	r9
 262:	af 92       	push	r10
 264:	bf 92       	push	r11
 266:	cf 92       	push	r12
 268:	df 92       	push	r13
 26a:	ef 92       	push	r14
 26c:	ff 92       	push	r15
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	8c 01       	movw	r16, r24
	
	println("Dispensing parallel pumps");
 278:	87 e1       	ldi	r24, 0x17	; 23
 27a:	91 e0       	ldi	r25, 0x01	; 1
 27c:	0e 94 82 00 	call	0x104	; 0x104 <println>
	
	/* Get the duration of the pump that will run the longest */
	float maxTime = 0;
	for(uint8_t i = 0; i < req->parPumps; i++){
 280:	f8 01       	movw	r30, r16
 282:	62 80       	ldd	r6, Z+2	; 0x02
 284:	66 20       	and	r6, r6
 286:	09 f4       	brne	.+2      	; 0x28a <parallelDispense+0x38>
 288:	cb c0       	rjmp	.+406    	; 0x420 <parallelDispense+0x1ce>
 28a:	c0 81       	ld	r28, Z
 28c:	d1 81       	ldd	r29, Z+1	; 0x01
 28e:	f1 2c       	mov	r15, r1
void parallelDispense(request* req){
	
	println("Dispensing parallel pumps");
	
	/* Get the duration of the pump that will run the longest */
	float maxTime = 0;
 290:	71 2c       	mov	r7, r1
 292:	81 2c       	mov	r8, r1
 294:	91 2c       	mov	r9, r1
 296:	a1 2c       	mov	r10, r1
	for(uint8_t i = 0; i < req->parPumps; i++){
		if(req->pumps[i].duration > maxTime)
 298:	6d 81       	ldd	r22, Y+5	; 0x05
 29a:	7e 81       	ldd	r23, Y+6	; 0x06
 29c:	8f 81       	ldd	r24, Y+7	; 0x07
 29e:	98 85       	ldd	r25, Y+8	; 0x08
 2a0:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__floatunsisf>
 2a4:	b6 2e       	mov	r11, r22
 2a6:	c7 2e       	mov	r12, r23
 2a8:	d8 2e       	mov	r13, r24
 2aa:	e9 2e       	mov	r14, r25
 2ac:	27 2d       	mov	r18, r7
 2ae:	38 2d       	mov	r19, r8
 2b0:	49 2d       	mov	r20, r9
 2b2:	5a 2d       	mov	r21, r10
 2b4:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__gesf2>
 2b8:	18 16       	cp	r1, r24
 2ba:	24 f4       	brge	.+8      	; 0x2c4 <parallelDispense+0x72>
			maxTime = req->pumps[i].duration;
 2bc:	7b 2c       	mov	r7, r11
 2be:	8c 2c       	mov	r8, r12
 2c0:	9d 2c       	mov	r9, r13
 2c2:	ae 2c       	mov	r10, r14
	
	println("Dispensing parallel pumps");
	
	/* Get the duration of the pump that will run the longest */
	float maxTime = 0;
	for(uint8_t i = 0; i < req->parPumps; i++){
 2c4:	f3 94       	inc	r15
 2c6:	2a 96       	adiw	r28, 0x0a	; 10
 2c8:	f6 10       	cpse	r15, r6
 2ca:	e6 cf       	rjmp	.-52     	; 0x298 <parallelDispense+0x46>
 2cc:	81 c0       	rjmp	.+258    	; 0x3d0 <parallelDispense+0x17e>
	/* Set total pump time duration and initial time */ 
	float totalDuration = mstime + (unsigned int)(maxTime);
	float initialTime = mstime;

	for(uint8_t i = 0; i < req->parPumps; i++)
		pumpOn(&(req->pumps[i])); // Turn the pumps on
 2ce:	2c 2f       	mov	r18, r28
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	c9 01       	movw	r24, r18
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	22 0f       	add	r18, r18
 2da:	33 1f       	adc	r19, r19
 2dc:	22 0f       	add	r18, r18
 2de:	33 1f       	adc	r19, r19
 2e0:	22 0f       	add	r18, r18
 2e2:	33 1f       	adc	r19, r19
 2e4:	28 0f       	add	r18, r24
 2e6:	39 1f       	adc	r19, r25
 2e8:	f8 01       	movw	r30, r16
 2ea:	80 81       	ld	r24, Z
 2ec:	91 81       	ldd	r25, Z+1	; 0x01
 2ee:	82 0f       	add	r24, r18
 2f0:	93 1f       	adc	r25, r19
 2f2:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <pumpOn>
	maxTime *= 1000;
	/* Set total pump time duration and initial time */ 
	float totalDuration = mstime + (unsigned int)(maxTime);
	float initialTime = mstime;

	for(uint8_t i = 0; i < req->parPumps; i++)
 2f6:	cf 5f       	subi	r28, 0xFF	; 255
 2f8:	f8 01       	movw	r30, r16
 2fa:	82 81       	ldd	r24, Z+2	; 0x02
 2fc:	c8 17       	cp	r28, r24
 2fe:	38 f3       	brcs	.-50     	; 0x2ce <parallelDispense+0x7c>
 300:	49 c0       	rjmp	.+146    	; 0x394 <parallelDispense+0x142>
		pumpOn(&(req->pumps[i])); // Turn the pumps on
	
	while(mstime < (totalDuration + DELTA)){
		for(uint8_t i = 0; i < req->parPumps; i++){
			//println("in this loop");
			if((mstime - initialTime) >= (float)((req->pumps[i].duration)*1000) ){
 302:	60 91 b6 01 	lds	r22, 0x01B6
 306:	70 91 b7 01 	lds	r23, 0x01B7
 30a:	80 91 b8 01 	lds	r24, 0x01B8
 30e:	90 91 b9 01 	lds	r25, 0x01B9
 312:	c3 2d       	mov	r28, r3
 314:	d0 e0       	ldi	r29, 0x00	; 0
 316:	9e 01       	movw	r18, r28
 318:	22 0f       	add	r18, r18
 31a:	33 1f       	adc	r19, r19
 31c:	cc 0f       	add	r28, r28
 31e:	dd 1f       	adc	r29, r29
 320:	cc 0f       	add	r28, r28
 322:	dd 1f       	adc	r29, r29
 324:	cc 0f       	add	r28, r28
 326:	dd 1f       	adc	r29, r29
 328:	c2 0f       	add	r28, r18
 32a:	d3 1f       	adc	r29, r19
 32c:	f8 01       	movw	r30, r16
 32e:	20 81       	ld	r18, Z
 330:	31 81       	ldd	r19, Z+1	; 0x01
 332:	c2 0f       	add	r28, r18
 334:	d3 1f       	adc	r29, r19
 336:	a3 01       	movw	r20, r6
 338:	92 01       	movw	r18, r4
 33a:	0e 94 9a 04 	call	0x934	; 0x934 <__subsf3>
 33e:	6b 01       	movw	r12, r22
 340:	7c 01       	movw	r14, r24
 342:	2d 81       	ldd	r18, Y+5	; 0x05
 344:	3e 81       	ldd	r19, Y+6	; 0x06
 346:	4f 81       	ldd	r20, Y+7	; 0x07
 348:	58 85       	ldd	r21, Y+8	; 0x08
 34a:	a8 ee       	ldi	r26, 0xE8	; 232
 34c:	b3 e0       	ldi	r27, 0x03	; 3
 34e:	0e 94 48 06 	call	0xc90	; 0xc90 <__muluhisi3>
 352:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__floatunsisf>
 356:	9b 01       	movw	r18, r22
 358:	ac 01       	movw	r20, r24
 35a:	c7 01       	movw	r24, r14
 35c:	b6 01       	movw	r22, r12
 35e:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__gesf2>
 362:	88 23       	and	r24, r24
 364:	3c f0       	brlt	.+14     	; 0x374 <parallelDispense+0x122>
				if(req->pumps[i].finished == 0){
 366:	89 85       	ldd	r24, Y+9	; 0x09
 368:	81 11       	cpse	r24, r1
 36a:	0d c0       	rjmp	.+26     	; 0x386 <parallelDispense+0x134>
					pumpOff(&(req->pumps[i]));
 36c:	ce 01       	movw	r24, r28
 36e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <pumpOff>
 372:	09 c0       	rjmp	.+18     	; 0x386 <parallelDispense+0x134>
				}
			}
			else{
				UART_Transmit(req->pumps[i].label);
 374:	88 81       	ld	r24, Y
 376:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_Transmit>
				UART_TString(" is still running");
 37a:	81 e3       	ldi	r24, 0x31	; 49
 37c:	91 e0       	ldi	r25, 0x01	; 1
 37e:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
				CRLF();
 382:	0e 94 7b 00 	call	0xf6	; 0xf6 <CRLF>

	for(uint8_t i = 0; i < req->parPumps; i++)
		pumpOn(&(req->pumps[i])); // Turn the pumps on
	
	while(mstime < (totalDuration + DELTA)){
		for(uint8_t i = 0; i < req->parPumps; i++){
 386:	33 94       	inc	r3
 388:	f8 01       	movw	r30, r16
 38a:	82 81       	ldd	r24, Z+2	; 0x02
 38c:	38 16       	cp	r3, r24
 38e:	08 f4       	brcc	.+2      	; 0x392 <parallelDispense+0x140>
 390:	b8 cf       	rjmp	.-144    	; 0x302 <parallelDispense+0xb0>
 392:	01 c0       	rjmp	.+2      	; 0x396 <parallelDispense+0x144>
 394:	21 2c       	mov	r2, r1
	float initialTime = mstime;

	for(uint8_t i = 0; i < req->parPumps; i++)
		pumpOn(&(req->pumps[i])); // Turn the pumps on
	
	while(mstime < (totalDuration + DELTA)){
 396:	c0 90 b6 01 	lds	r12, 0x01B6
 39a:	d0 90 b7 01 	lds	r13, 0x01B7
 39e:	e0 90 b8 01 	lds	r14, 0x01B8
 3a2:	f0 90 b9 01 	lds	r15, 0x01B9
 3a6:	20 e0       	ldi	r18, 0x00	; 0
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	4a e7       	ldi	r20, 0x7A	; 122
 3ac:	54 e4       	ldi	r21, 0x44	; 68
 3ae:	c5 01       	movw	r24, r10
 3b0:	b4 01       	movw	r22, r8
 3b2:	0e 94 9b 04 	call	0x936	; 0x936 <__addsf3>
 3b6:	a7 01       	movw	r20, r14
 3b8:	96 01       	movw	r18, r12
 3ba:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__gesf2>
 3be:	18 16       	cp	r1, r24
 3c0:	0c f0       	brlt	.+2      	; 0x3c4 <parallelDispense+0x172>
 3c2:	46 c0       	rjmp	.+140    	; 0x450 <parallelDispense+0x1fe>
		for(uint8_t i = 0; i < req->parPumps; i++){
 3c4:	f8 01       	movw	r30, r16
 3c6:	82 81       	ldd	r24, Z+2	; 0x02
 3c8:	88 23       	and	r24, r24
 3ca:	29 f3       	breq	.-54     	; 0x396 <parallelDispense+0x144>
 3cc:	32 2c       	mov	r3, r2
 3ce:	99 cf       	rjmp	.-206    	; 0x302 <parallelDispense+0xb0>
		if(req->pumps[i].duration > maxTime)
			maxTime = req->pumps[i].duration;
	}
	maxTime *= 1000;
	/* Set total pump time duration and initial time */ 
	float totalDuration = mstime + (unsigned int)(maxTime);
 3d0:	c0 90 b6 01 	lds	r12, 0x01B6
 3d4:	d0 90 b7 01 	lds	r13, 0x01B7
 3d8:	e0 90 b8 01 	lds	r14, 0x01B8
 3dc:	f0 90 b9 01 	lds	r15, 0x01B9
	float maxTime = 0;
	for(uint8_t i = 0; i < req->parPumps; i++){
		if(req->pumps[i].duration > maxTime)
			maxTime = req->pumps[i].duration;
	}
	maxTime *= 1000;
 3e0:	20 e0       	ldi	r18, 0x00	; 0
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	4a e7       	ldi	r20, 0x7A	; 122
 3e6:	54 e4       	ldi	r21, 0x44	; 68
 3e8:	67 2d       	mov	r22, r7
 3ea:	78 2d       	mov	r23, r8
 3ec:	89 2d       	mov	r24, r9
 3ee:	9a 2d       	mov	r25, r10
 3f0:	0e 94 e5 05 	call	0xbca	; 0xbca <__mulsf3>
	/* Set total pump time duration and initial time */ 
	float totalDuration = mstime + (unsigned int)(maxTime);
 3f4:	0e 94 03 05 	call	0xa06	; 0xa06 <__fixunssfsi>
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__floatunsisf>
 400:	a7 01       	movw	r20, r14
 402:	96 01       	movw	r18, r12
 404:	0e 94 9b 04 	call	0x936	; 0x936 <__addsf3>
 408:	4b 01       	movw	r8, r22
 40a:	5c 01       	movw	r10, r24
	float initialTime = mstime;
 40c:	40 90 b6 01 	lds	r4, 0x01B6
 410:	50 90 b7 01 	lds	r5, 0x01B7
 414:	60 90 b8 01 	lds	r6, 0x01B8
 418:	70 90 b9 01 	lds	r7, 0x01B9

	for(uint8_t i = 0; i < req->parPumps; i++)
 41c:	c0 e0       	ldi	r28, 0x00	; 0
 41e:	57 cf       	rjmp	.-338    	; 0x2ce <parallelDispense+0x7c>
		if(req->pumps[i].duration > maxTime)
			maxTime = req->pumps[i].duration;
	}
	maxTime *= 1000;
	/* Set total pump time duration and initial time */ 
	float totalDuration = mstime + (unsigned int)(maxTime);
 420:	60 91 b6 01 	lds	r22, 0x01B6
 424:	70 91 b7 01 	lds	r23, 0x01B7
 428:	80 91 b8 01 	lds	r24, 0x01B8
 42c:	90 91 b9 01 	lds	r25, 0x01B9
 430:	20 e0       	ldi	r18, 0x00	; 0
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	a9 01       	movw	r20, r18
 436:	0e 94 9b 04 	call	0x936	; 0x936 <__addsf3>
 43a:	4b 01       	movw	r8, r22
 43c:	5c 01       	movw	r10, r24
	float initialTime = mstime;
 43e:	40 90 b6 01 	lds	r4, 0x01B6
 442:	50 90 b7 01 	lds	r5, 0x01B7
 446:	60 90 b8 01 	lds	r6, 0x01B8
 44a:	70 90 b9 01 	lds	r7, 0x01B9
 44e:	a2 cf       	rjmp	.-188    	; 0x394 <parallelDispense+0x142>
			}
		}
	}
	

}
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	1f 91       	pop	r17
 456:	0f 91       	pop	r16
 458:	ff 90       	pop	r15
 45a:	ef 90       	pop	r14
 45c:	df 90       	pop	r13
 45e:	cf 90       	pop	r12
 460:	bf 90       	pop	r11
 462:	af 90       	pop	r10
 464:	9f 90       	pop	r9
 466:	8f 90       	pop	r8
 468:	7f 90       	pop	r7
 46a:	6f 90       	pop	r6
 46c:	5f 90       	pop	r5
 46e:	4f 90       	pop	r4
 470:	3f 90       	pop	r3
 472:	2f 90       	pop	r2
 474:	08 95       	ret

00000476 <sequentialDispense>:

void sequentialDispense(request* req){
 476:	4f 92       	push	r4
 478:	5f 92       	push	r5
 47a:	6f 92       	push	r6
 47c:	7f 92       	push	r7
 47e:	8f 92       	push	r8
 480:	9f 92       	push	r9
 482:	af 92       	push	r10
 484:	bf 92       	push	r11
 486:	cf 92       	push	r12
 488:	df 92       	push	r13
 48a:	ef 92       	push	r14
 48c:	ff 92       	push	r15
 48e:	0f 93       	push	r16
 490:	1f 93       	push	r17
 492:	cf 93       	push	r28
 494:	df 93       	push	r29
 496:	8c 01       	movw	r16, r24
	
	println("Dispensing sequential pumps");
 498:	83 e4       	ldi	r24, 0x43	; 67
 49a:	91 e0       	ldi	r25, 0x01	; 1
 49c:	0e 94 82 00 	call	0x104	; 0x104 <println>
	
	uint8_t totalPumps = req->parPumps + req->seqPumps;
 4a0:	f8 01       	movw	r30, r16
 4a2:	92 80       	ldd	r9, Z+2	; 0x02
 4a4:	83 80       	ldd	r8, Z+3	; 0x03
 4a6:	89 0c       	add	r8, r9
	for(uint8_t i = req->parPumps; i < totalPumps; i++){
 4a8:	98 14       	cp	r9, r8
 4aa:	08 f0       	brcs	.+2      	; 0x4ae <sequentialDispense+0x38>
 4ac:	57 c0       	rjmp	.+174    	; 0x55c <sequentialDispense+0xe6>
		unsigned int totalDuration = mstime + (unsigned int)((req->pumps[i].duration)*1000);
 4ae:	0f 2e       	mov	r0, r31
 4b0:	f8 ee       	ldi	r31, 0xE8	; 232
 4b2:	af 2e       	mov	r10, r31
 4b4:	f3 e0       	ldi	r31, 0x03	; 3
 4b6:	bf 2e       	mov	r11, r31
 4b8:	f0 2d       	mov	r31, r0
 4ba:	89 2d       	mov	r24, r9
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	ec 01       	movw	r28, r24
 4c0:	cc 0f       	add	r28, r28
 4c2:	dd 1f       	adc	r29, r29
 4c4:	88 0f       	add	r24, r24
 4c6:	99 1f       	adc	r25, r25
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	88 0f       	add	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	c8 0f       	add	r28, r24
 4d2:	d9 1f       	adc	r29, r25
 4d4:	f8 01       	movw	r30, r16
 4d6:	e0 80       	ld	r14, Z
 4d8:	f1 80       	ldd	r15, Z+1	; 0x01
 4da:	ec 0e       	add	r14, r28
 4dc:	fd 1e       	adc	r15, r29
 4de:	40 90 b6 01 	lds	r4, 0x01B6
 4e2:	50 90 b7 01 	lds	r5, 0x01B7
 4e6:	60 90 b8 01 	lds	r6, 0x01B8
 4ea:	70 90 b9 01 	lds	r7, 0x01B9
 4ee:	f7 01       	movw	r30, r14
 4f0:	85 81       	ldd	r24, Z+5	; 0x05
 4f2:	96 81       	ldd	r25, Z+6	; 0x06
 4f4:	8a 9d       	mul	r24, r10
 4f6:	b0 01       	movw	r22, r0
 4f8:	8b 9d       	mul	r24, r11
 4fa:	70 0d       	add	r23, r0
 4fc:	9a 9d       	mul	r25, r10
 4fe:	70 0d       	add	r23, r0
 500:	11 24       	eor	r1, r1
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__floatunsisf>
 50a:	a3 01       	movw	r20, r6
 50c:	92 01       	movw	r18, r4
 50e:	0e 94 9b 04 	call	0x936	; 0x936 <__addsf3>
 512:	0e 94 03 05 	call	0xa06	; 0xa06 <__fixunssfsi>
 516:	2b 01       	movw	r4, r22
		pumpOn(&(req->pumps[i]));
 518:	c7 01       	movw	r24, r14
 51a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <pumpOn>
		while(mstime < totalDuration){ }
 51e:	61 2c       	mov	r6, r1
 520:	71 2c       	mov	r7, r1
 522:	c0 90 b6 01 	lds	r12, 0x01B6
 526:	d0 90 b7 01 	lds	r13, 0x01B7
 52a:	e0 90 b8 01 	lds	r14, 0x01B8
 52e:	f0 90 b9 01 	lds	r15, 0x01B9
 532:	c3 01       	movw	r24, r6
 534:	b2 01       	movw	r22, r4
 536:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__floatunsisf>
 53a:	a7 01       	movw	r20, r14
 53c:	96 01       	movw	r18, r12
 53e:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__gesf2>
 542:	18 16       	cp	r1, r24
 544:	74 f3       	brlt	.-36     	; 0x522 <sequentialDispense+0xac>
		pumpOff(&(req->pumps[i]));
 546:	f8 01       	movw	r30, r16
 548:	80 81       	ld	r24, Z
 54a:	91 81       	ldd	r25, Z+1	; 0x01
 54c:	8c 0f       	add	r24, r28
 54e:	9d 1f       	adc	r25, r29
 550:	0e 94 fe 00 	call	0x1fc	; 0x1fc <pumpOff>
void sequentialDispense(request* req){
	
	println("Dispensing sequential pumps");
	
	uint8_t totalPumps = req->parPumps + req->seqPumps;
	for(uint8_t i = req->parPumps; i < totalPumps; i++){
 554:	93 94       	inc	r9
 556:	98 14       	cp	r9, r8
 558:	08 f4       	brcc	.+2      	; 0x55c <sequentialDispense+0xe6>
 55a:	af cf       	rjmp	.-162    	; 0x4ba <sequentialDispense+0x44>
		unsigned int totalDuration = mstime + (unsigned int)((req->pumps[i].duration)*1000);
		pumpOn(&(req->pumps[i]));
		while(mstime < totalDuration){ }
		pumpOff(&(req->pumps[i]));
	}	
}
 55c:	df 91       	pop	r29
 55e:	cf 91       	pop	r28
 560:	1f 91       	pop	r17
 562:	0f 91       	pop	r16
 564:	ff 90       	pop	r15
 566:	ef 90       	pop	r14
 568:	df 90       	pop	r13
 56a:	cf 90       	pop	r12
 56c:	bf 90       	pop	r11
 56e:	af 90       	pop	r10
 570:	9f 90       	pop	r9
 572:	8f 90       	pop	r8
 574:	7f 90       	pop	r7
 576:	6f 90       	pop	r6
 578:	5f 90       	pop	r5
 57a:	4f 90       	pop	r4
 57c:	08 95       	ret

0000057e <init>:
#include "timer.h"
#include "pump.h"
#include "utils.c"

void init(void){
	UART_Init(MYUBRR);
 57e:	88 e6       	ldi	r24, 0x68	; 104
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_Init>
	timer0_Init();
 586:	0e 94 c7 00 	call	0x18e	; 0x18e <timer0_Init>
	
	// All PWM generators are set to not output on initial setup
	DDRD &= ~(1<<PD3); // A
 58a:	53 98       	cbi	0x0a, 3	; 10
	DDRD &= ~(1<<PD5); // B
 58c:	55 98       	cbi	0x0a, 5	; 10
	DDRD &= ~(1<<PD6); // C
 58e:	56 98       	cbi	0x0a, 6	; 10
	DDRB &= ~(1<<PB1); // D
 590:	21 98       	cbi	0x04, 1	; 4
	DDRB &= ~(1<<PB2); // E
 592:	22 98       	cbi	0x04, 2	; 4
	DDRB &= ~(1<<PB3); // F
 594:	23 98       	cbi	0x04, 3	; 4
	
	TCCR0A |= _BV(COM0A0);
 596:	84 b5       	in	r24, 0x24	; 36
 598:	80 64       	ori	r24, 0x40	; 64
 59a:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << WGM02);
 59c:	85 b5       	in	r24, 0x25	; 37
 59e:	88 60       	ori	r24, 0x08	; 8
 5a0:	85 bd       	out	0x25, r24	; 37
	TCCR2A = _BV(COM2A1) | _BV(COM2B1) |  _BV(WGM21) | _BV(WGM20);
 5a2:	83 ea       	ldi	r24, 0xA3	; 163
 5a4:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = _BV(CS22);
 5a8:	84 e0       	ldi	r24, 0x04	; 4
 5aa:	80 93 b1 00 	sts	0x00B1, r24
	
	
	OCR0A = 100;
 5ae:	24 e6       	ldi	r18, 0x64	; 100
 5b0:	27 bd       	out	0x27, r18	; 39
	OCR0B = 100;	
 5b2:	28 bd       	out	0x28, r18	; 40
	OCR1A = 100;
 5b4:	84 e6       	ldi	r24, 0x64	; 100
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	90 93 89 00 	sts	0x0089, r25
 5bc:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 100;
 5c0:	90 93 8b 00 	sts	0x008B, r25
 5c4:	80 93 8a 00 	sts	0x008A, r24
	OCR2A = 100; 
 5c8:	20 93 b3 00 	sts	0x00B3, r18
	OCR2B = 100; 
 5cc:	20 93 b4 00 	sts	0x00B4, r18
 5d0:	08 95       	ret

000005d2 <processRequest>:

}

request* processRequest(){
 5d2:	6f 92       	push	r6
 5d4:	7f 92       	push	r7
 5d6:	8f 92       	push	r8
 5d8:	9f 92       	push	r9
 5da:	af 92       	push	r10
 5dc:	bf 92       	push	r11
 5de:	cf 92       	push	r12
 5e0:	df 92       	push	r13
 5e2:	ef 92       	push	r14
 5e4:	ff 92       	push	r15
 5e6:	0f 93       	push	r16
 5e8:	1f 93       	push	r17
 5ea:	cf 93       	push	r28
 5ec:	df 93       	push	r29
	pump* pumps = (pump*)malloc(sizeof(pump)*6);
 5ee:	8c e3       	ldi	r24, 0x3C	; 60
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	0e 94 62 06 	call	0xcc4	; 0xcc4 <malloc>
 5f6:	5c 01       	movw	r10, r24
	UART_TString("OK");
 5f8:	8f e5       	ldi	r24, 0x5F	; 95
 5fa:	91 e0       	ldi	r25, 0x01	; 1
 5fc:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
	unsigned char parPumps = UART_Receive();
 600:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 604:	c8 2f       	mov	r28, r24
	UART_TString("OK");
 606:	8f e5       	ldi	r24, 0x5F	; 95
 608:	91 e0       	ldi	r25, 0x01	; 1
 60a:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
	unsigned char seqPumps = UART_Receive();
 60e:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
	parPumps -= 48; seqPumps -= 48;
 612:	0f 2e       	mov	r0, r31
 614:	f0 ed       	ldi	r31, 0xD0	; 208
 616:	8f 2e       	mov	r8, r31
 618:	f0 2d       	mov	r31, r0
 61a:	8c 0e       	add	r8, r28
 61c:	0f 2e       	mov	r0, r31
 61e:	f0 ed       	ldi	r31, 0xD0	; 208
 620:	7f 2e       	mov	r7, r31
 622:	f0 2d       	mov	r31, r0
 624:	78 0e       	add	r7, r24
	
	// Error checking
	if(parPumps + seqPumps > MAXPUMPS)
 626:	87 2d       	mov	r24, r7
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	88 0d       	add	r24, r8
 62c:	91 1d       	adc	r25, r1
 62e:	07 97       	sbiw	r24, 0x07	; 7
 630:	0c f0       	brlt	.+2      	; 0x634 <processRequest+0x62>
 632:	05 c1       	rjmp	.+522    	; 0x83e <processRequest+0x26c>
		return NULL;
					
	if(parPumps > MAXPUMPS || parPumps < 0)
 634:	86 e0       	ldi	r24, 0x06	; 6
 636:	88 15       	cp	r24, r8
 638:	08 f4       	brcc	.+2      	; 0x63c <processRequest+0x6a>
 63a:	04 c1       	rjmp	.+520    	; 0x844 <processRequest+0x272>
		return NULL;
		
	if(seqPumps > MAXPUMPS || seqPumps < 0)
 63c:	87 15       	cp	r24, r7
 63e:	08 f4       	brcc	.+2      	; 0x642 <processRequest+0x70>
 640:	04 c1       	rjmp	.+520    	; 0x84a <processRequest+0x278>
	
	/* Handle request */
	
	// Process parallel pump information
	uint8_t i = 0;
	if(parPumps > 0){
 642:	88 20       	and	r8, r8
 644:	09 f4       	brne	.+2      	; 0x648 <processRequest+0x76>
 646:	65 c0       	rjmp	.+202    	; 0x712 <processRequest+0x140>
 648:	e5 01       	movw	r28, r10
 64a:	91 2c       	mov	r9, r1
		for(; i < parPumps; i++){
			UART_TString("OK");
 64c:	8f e5       	ldi	r24, 0x5F	; 95
 64e:	91 e0       	ldi	r25, 0x01	; 1
 650:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
			// Get label info
			pumps[i].label = UART_Receive();
 654:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 658:	88 83       	st	Y, r24
			if(pumps[i].label < 65 || pumps[i].label > 70 )
 65a:	81 54       	subi	r24, 0x41	; 65
 65c:	86 30       	cpi	r24, 0x06	; 6
 65e:	08 f0       	brcs	.+2      	; 0x662 <processRequest+0x90>
 660:	f7 c0       	rjmp	.+494    	; 0x850 <processRequest+0x27e>
				return NULL;
			UART_TString("OK");
 662:	8f e5       	ldi	r24, 0x5F	; 95
 664:	91 e0       	ldi	r25, 0x01	; 1
 666:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
			// Get amount info
			uint8_t ones = UART_Receive() - 48;
 66a:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 66e:	0f 2e       	mov	r0, r31
 670:	f0 ed       	ldi	r31, 0xD0	; 208
 672:	ff 2e       	mov	r15, r31
 674:	f0 2d       	mov	r31, r0
 676:	f8 0e       	add	r15, r24
			if(ones < 0 || ones > 8 )
 678:	e8 e0       	ldi	r30, 0x08	; 8
 67a:	ef 15       	cp	r30, r15
 67c:	08 f4       	brcc	.+2      	; 0x680 <processRequest+0xae>
 67e:	eb c0       	rjmp	.+470    	; 0x856 <processRequest+0x284>
				return NULL;
			if(UART_Receive() != '.')
 680:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 684:	8e 32       	cpi	r24, 0x2E	; 46
 686:	09 f0       	breq	.+2      	; 0x68a <processRequest+0xb8>
 688:	e9 c0       	rjmp	.+466    	; 0x85c <processRequest+0x28a>
				return NULL;			
			uint8_t tens = UART_Receive() - 48;
 68a:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 68e:	0f 2e       	mov	r0, r31
 690:	f0 ed       	ldi	r31, 0xD0	; 208
 692:	6f 2e       	mov	r6, r31
 694:	f0 2d       	mov	r31, r0
 696:	68 0e       	add	r6, r24
			if(tens < 0 || tens > 9 )
 698:	f9 e0       	ldi	r31, 0x09	; 9
 69a:	f6 15       	cp	r31, r6
 69c:	08 f4       	brcc	.+2      	; 0x6a0 <processRequest+0xce>
 69e:	e1 c0       	rjmp	.+450    	; 0x862 <processRequest+0x290>
				return NULL;			
			pumps[i].amount = (float)ones + (float)(tens)*0.1;
 6a0:	6f 2d       	mov	r22, r15
 6a2:	70 e0       	ldi	r23, 0x00	; 0
 6a4:	80 e0       	ldi	r24, 0x00	; 0
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__floatunsisf>
 6ac:	6b 01       	movw	r12, r22
 6ae:	7c 01       	movw	r14, r24
 6b0:	66 2d       	mov	r22, r6
 6b2:	70 e0       	ldi	r23, 0x00	; 0
 6b4:	80 e0       	ldi	r24, 0x00	; 0
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__floatunsisf>
 6bc:	2d ec       	ldi	r18, 0xCD	; 205
 6be:	3c ec       	ldi	r19, 0xCC	; 204
 6c0:	4c ec       	ldi	r20, 0xCC	; 204
 6c2:	5d e3       	ldi	r21, 0x3D	; 61
 6c4:	0e 94 e5 05 	call	0xbca	; 0xbca <__mulsf3>
 6c8:	9b 01       	movw	r18, r22
 6ca:	ac 01       	movw	r20, r24
 6cc:	c7 01       	movw	r24, r14
 6ce:	b6 01       	movw	r22, r12
 6d0:	0e 94 9b 04 	call	0x936	; 0x936 <__addsf3>
 6d4:	6b 01       	movw	r12, r22
 6d6:	7c 01       	movw	r14, r24
 6d8:	fe 01       	movw	r30, r28
 6da:	61 83       	std	Z+1, r22	; 0x01
 6dc:	72 83       	std	Z+2, r23	; 0x02
 6de:	83 83       	std	Z+3, r24	; 0x03
 6e0:	94 83       	std	Z+4, r25	; 0x04
			if(pumps[i].amount < 0 || pumps[i].amount > 8)
 6e2:	20 e0       	ldi	r18, 0x00	; 0
 6e4:	30 e0       	ldi	r19, 0x00	; 0
 6e6:	a9 01       	movw	r20, r18
 6e8:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__cmpsf2>
 6ec:	88 23       	and	r24, r24
 6ee:	0c f4       	brge	.+2      	; 0x6f2 <processRequest+0x120>
 6f0:	bb c0       	rjmp	.+374    	; 0x868 <processRequest+0x296>
 6f2:	20 e0       	ldi	r18, 0x00	; 0
 6f4:	30 e0       	ldi	r19, 0x00	; 0
 6f6:	40 e0       	ldi	r20, 0x00	; 0
 6f8:	51 e4       	ldi	r21, 0x41	; 65
 6fa:	c7 01       	movw	r24, r14
 6fc:	b6 01       	movw	r22, r12
 6fe:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__gesf2>
 702:	18 16       	cp	r1, r24
 704:	0c f4       	brge	.+2      	; 0x708 <processRequest+0x136>
 706:	b3 c0       	rjmp	.+358    	; 0x86e <processRequest+0x29c>
	/* Handle request */
	
	// Process parallel pump information
	uint8_t i = 0;
	if(parPumps > 0){
		for(; i < parPumps; i++){
 708:	93 94       	inc	r9
 70a:	2a 96       	adiw	r28, 0x0a	; 10
 70c:	89 10       	cpse	r8, r9
 70e:	9e cf       	rjmp	.-196    	; 0x64c <processRequest+0x7a>
 710:	01 c0       	rjmp	.+2      	; 0x714 <processRequest+0x142>
	
	
	/* Handle request */
	
	// Process parallel pump information
	uint8_t i = 0;
 712:	91 2c       	mov	r9, r1
			if(pumps[i].amount < 0 || pumps[i].amount > 8)
				return NULL;
		}
	}
	// Process sequential pump information 
	uint8_t j = i + seqPumps;
 714:	19 2d       	mov	r17, r9
 716:	17 0d       	add	r17, r7
	if(seqPumps > 0){
 718:	77 20       	and	r7, r7
 71a:	11 f0       	breq	.+4      	; 0x720 <processRequest+0x14e>
		for(; i < j; i++){
 71c:	91 16       	cp	r9, r17
 71e:	18 f0       	brcs	.+6      	; 0x726 <processRequest+0x154>
			if(pumps[i].amount < 0 || pumps[i].amount > 8)
				return NULL;
		}
	}
	
	for(uint8_t index = 0; index < j; index++){
 720:	11 11       	cpse	r17, r1
 722:	6e c0       	rjmp	.+220    	; 0x800 <processRequest+0x22e>
 724:	7d c0       	rjmp	.+250    	; 0x820 <processRequest+0x24e>
	}
	// Process sequential pump information 
	uint8_t j = i + seqPumps;
	if(seqPumps > 0){
		for(; i < j; i++){
			UART_TString("OK");
 726:	8f e5       	ldi	r24, 0x5F	; 95
 728:	91 e0       	ldi	r25, 0x01	; 1
 72a:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
			// Get label info
			pumps[i].label = UART_Receive();
 72e:	89 2d       	mov	r24, r9
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	ec 01       	movw	r28, r24
 734:	cc 0f       	add	r28, r28
 736:	dd 1f       	adc	r29, r29
 738:	88 0f       	add	r24, r24
 73a:	99 1f       	adc	r25, r25
 73c:	88 0f       	add	r24, r24
 73e:	99 1f       	adc	r25, r25
 740:	88 0f       	add	r24, r24
 742:	99 1f       	adc	r25, r25
 744:	c8 0f       	add	r28, r24
 746:	d9 1f       	adc	r29, r25
 748:	ca 0d       	add	r28, r10
 74a:	db 1d       	adc	r29, r11
 74c:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 750:	88 83       	st	Y, r24
			if(pumps[i].label < 65 || pumps[i].label > 70)
 752:	81 54       	subi	r24, 0x41	; 65
 754:	86 30       	cpi	r24, 0x06	; 6
 756:	08 f0       	brcs	.+2      	; 0x75a <processRequest+0x188>
 758:	8d c0       	rjmp	.+282    	; 0x874 <processRequest+0x2a2>
				return NULL;
			UART_TString("OK");
 75a:	8f e5       	ldi	r24, 0x5F	; 95
 75c:	91 e0       	ldi	r25, 0x01	; 1
 75e:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
			// Get amount info
			uint8_t ones = UART_Receive() - 48;
 762:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 766:	00 ed       	ldi	r16, 0xD0	; 208
 768:	08 0f       	add	r16, r24
			if(ones < 0 || ones > 8 )
 76a:	09 30       	cpi	r16, 0x09	; 9
 76c:	08 f0       	brcs	.+2      	; 0x770 <processRequest+0x19e>
 76e:	85 c0       	rjmp	.+266    	; 0x87a <processRequest+0x2a8>
				return NULL;
			if(UART_Receive() != '.')
 770:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 774:	8e 32       	cpi	r24, 0x2E	; 46
 776:	09 f0       	breq	.+2      	; 0x77a <processRequest+0x1a8>
 778:	83 c0       	rjmp	.+262    	; 0x880 <processRequest+0x2ae>
				return NULL;			
			uint8_t tens = UART_Receive() - 48;
 77a:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 77e:	0f 2e       	mov	r0, r31
 780:	f0 ed       	ldi	r31, 0xD0	; 208
 782:	6f 2e       	mov	r6, r31
 784:	f0 2d       	mov	r31, r0
 786:	68 0e       	add	r6, r24
			if(tens < 0 || tens > 9 )
 788:	f9 e0       	ldi	r31, 0x09	; 9
 78a:	f6 15       	cp	r31, r6
 78c:	08 f4       	brcc	.+2      	; 0x790 <processRequest+0x1be>
 78e:	7b c0       	rjmp	.+246    	; 0x886 <processRequest+0x2b4>
				return NULL;			
			pumps[i].amount = (float)ones + (float)(tens)*0.1;
 790:	60 2f       	mov	r22, r16
 792:	70 e0       	ldi	r23, 0x00	; 0
 794:	80 e0       	ldi	r24, 0x00	; 0
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__floatunsisf>
 79c:	6b 01       	movw	r12, r22
 79e:	7c 01       	movw	r14, r24
 7a0:	66 2d       	mov	r22, r6
 7a2:	70 e0       	ldi	r23, 0x00	; 0
 7a4:	80 e0       	ldi	r24, 0x00	; 0
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__floatunsisf>
 7ac:	2d ec       	ldi	r18, 0xCD	; 205
 7ae:	3c ec       	ldi	r19, 0xCC	; 204
 7b0:	4c ec       	ldi	r20, 0xCC	; 204
 7b2:	5d e3       	ldi	r21, 0x3D	; 61
 7b4:	0e 94 e5 05 	call	0xbca	; 0xbca <__mulsf3>
 7b8:	9b 01       	movw	r18, r22
 7ba:	ac 01       	movw	r20, r24
 7bc:	c7 01       	movw	r24, r14
 7be:	b6 01       	movw	r22, r12
 7c0:	0e 94 9b 04 	call	0x936	; 0x936 <__addsf3>
 7c4:	6b 01       	movw	r12, r22
 7c6:	7c 01       	movw	r14, r24
 7c8:	69 83       	std	Y+1, r22	; 0x01
 7ca:	7a 83       	std	Y+2, r23	; 0x02
 7cc:	8b 83       	std	Y+3, r24	; 0x03
 7ce:	9c 83       	std	Y+4, r25	; 0x04
			if(pumps[i].amount < 0 || pumps[i].amount > 8)
 7d0:	20 e0       	ldi	r18, 0x00	; 0
 7d2:	30 e0       	ldi	r19, 0x00	; 0
 7d4:	a9 01       	movw	r20, r18
 7d6:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__cmpsf2>
 7da:	88 23       	and	r24, r24
 7dc:	0c f4       	brge	.+2      	; 0x7e0 <processRequest+0x20e>
 7de:	56 c0       	rjmp	.+172    	; 0x88c <processRequest+0x2ba>
 7e0:	20 e0       	ldi	r18, 0x00	; 0
 7e2:	30 e0       	ldi	r19, 0x00	; 0
 7e4:	40 e0       	ldi	r20, 0x00	; 0
 7e6:	51 e4       	ldi	r21, 0x41	; 65
 7e8:	c7 01       	movw	r24, r14
 7ea:	b6 01       	movw	r22, r12
 7ec:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__gesf2>
 7f0:	18 16       	cp	r1, r24
 7f2:	0c f4       	brge	.+2      	; 0x7f6 <processRequest+0x224>
 7f4:	4e c0       	rjmp	.+156    	; 0x892 <processRequest+0x2c0>
		}
	}
	// Process sequential pump information 
	uint8_t j = i + seqPumps;
	if(seqPumps > 0){
		for(; i < j; i++){
 7f6:	93 94       	inc	r9
 7f8:	91 16       	cp	r9, r17
 7fa:	08 f4       	brcc	.+2      	; 0x7fe <processRequest+0x22c>
 7fc:	94 cf       	rjmp	.-216    	; 0x726 <processRequest+0x154>
 7fe:	90 cf       	rjmp	.-224    	; 0x720 <processRequest+0x14e>
 800:	e5 01       	movw	r28, r10
			if(pumps[i].amount < 0 || pumps[i].amount > 8)
				return NULL;
		}
	}
	
	for(uint8_t index = 0; index < j; index++){
 802:	00 e0       	ldi	r16, 0x00	; 0
		pumps[index].duration = pumps[index].amount * A2DRATIO;
 804:	69 81       	ldd	r22, Y+1	; 0x01
 806:	7a 81       	ldd	r23, Y+2	; 0x02
 808:	8b 81       	ldd	r24, Y+3	; 0x03
 80a:	9c 81       	ldd	r25, Y+4	; 0x04
 80c:	0e 94 03 05 	call	0xa06	; 0xa06 <__fixunssfsi>
 810:	6d 83       	std	Y+5, r22	; 0x05
 812:	7e 83       	std	Y+6, r23	; 0x06
 814:	8f 83       	std	Y+7, r24	; 0x07
 816:	98 87       	std	Y+8, r25	; 0x08
			if(pumps[i].amount < 0 || pumps[i].amount > 8)
				return NULL;
		}
	}
	
	for(uint8_t index = 0; index < j; index++){
 818:	0f 5f       	subi	r16, 0xFF	; 255
 81a:	2a 96       	adiw	r28, 0x0a	; 10
 81c:	01 13       	cpse	r16, r17
 81e:	f2 cf       	rjmp	.-28     	; 0x804 <processRequest+0x232>
		pumps[index].duration = pumps[index].amount * A2DRATIO;
	}
	
	UART_TString("OK");
 820:	8f e5       	ldi	r24, 0x5F	; 95
 822:	91 e0       	ldi	r25, 0x01	; 1
 824:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
	
	/* Create and return the request */
	
	request* req = (request*)malloc(sizeof(request));
 828:	84 e0       	ldi	r24, 0x04	; 4
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <malloc>
 830:	fc 01       	movw	r30, r24
	req->pumps = pumps;
 832:	b1 82       	std	Z+1, r11	; 0x01
 834:	a0 82       	st	Z, r10
	req->parPumps = parPumps;
 836:	82 82       	std	Z+2, r8	; 0x02
	req->seqPumps = seqPumps;
 838:	73 82       	std	Z+3, r7	; 0x03
	return req;
 83a:	9f 2f       	mov	r25, r31
 83c:	2c c0       	rjmp	.+88     	; 0x896 <processRequest+0x2c4>
	unsigned char seqPumps = UART_Receive();
	parPumps -= 48; seqPumps -= 48;
	
	// Error checking
	if(parPumps + seqPumps > MAXPUMPS)
		return NULL;
 83e:	80 e0       	ldi	r24, 0x00	; 0
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	29 c0       	rjmp	.+82     	; 0x896 <processRequest+0x2c4>
					
	if(parPumps > MAXPUMPS || parPumps < 0)
		return NULL;
 844:	80 e0       	ldi	r24, 0x00	; 0
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	26 c0       	rjmp	.+76     	; 0x896 <processRequest+0x2c4>
		
	if(seqPumps > MAXPUMPS || seqPumps < 0)
		return NULL;
 84a:	80 e0       	ldi	r24, 0x00	; 0
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	23 c0       	rjmp	.+70     	; 0x896 <processRequest+0x2c4>
		for(; i < parPumps; i++){
			UART_TString("OK");
			// Get label info
			pumps[i].label = UART_Receive();
			if(pumps[i].label < 65 || pumps[i].label > 70 )
				return NULL;
 850:	80 e0       	ldi	r24, 0x00	; 0
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	20 c0       	rjmp	.+64     	; 0x896 <processRequest+0x2c4>
			UART_TString("OK");
			// Get amount info
			uint8_t ones = UART_Receive() - 48;
			if(ones < 0 || ones > 8 )
				return NULL;
 856:	80 e0       	ldi	r24, 0x00	; 0
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	1d c0       	rjmp	.+58     	; 0x896 <processRequest+0x2c4>
			if(UART_Receive() != '.')
				return NULL;			
 85c:	80 e0       	ldi	r24, 0x00	; 0
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	1a c0       	rjmp	.+52     	; 0x896 <processRequest+0x2c4>
			uint8_t tens = UART_Receive() - 48;
			if(tens < 0 || tens > 9 )
				return NULL;			
 862:	80 e0       	ldi	r24, 0x00	; 0
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	17 c0       	rjmp	.+46     	; 0x896 <processRequest+0x2c4>
			pumps[i].amount = (float)ones + (float)(tens)*0.1;
			if(pumps[i].amount < 0 || pumps[i].amount > 8)
				return NULL;
 868:	80 e0       	ldi	r24, 0x00	; 0
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	14 c0       	rjmp	.+40     	; 0x896 <processRequest+0x2c4>
 86e:	80 e0       	ldi	r24, 0x00	; 0
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	11 c0       	rjmp	.+34     	; 0x896 <processRequest+0x2c4>
		for(; i < j; i++){
			UART_TString("OK");
			// Get label info
			pumps[i].label = UART_Receive();
			if(pumps[i].label < 65 || pumps[i].label > 70)
				return NULL;
 874:	80 e0       	ldi	r24, 0x00	; 0
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	0e c0       	rjmp	.+28     	; 0x896 <processRequest+0x2c4>
			UART_TString("OK");
			// Get amount info
			uint8_t ones = UART_Receive() - 48;
			if(ones < 0 || ones > 8 )
				return NULL;
 87a:	80 e0       	ldi	r24, 0x00	; 0
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	0b c0       	rjmp	.+22     	; 0x896 <processRequest+0x2c4>
			if(UART_Receive() != '.')
				return NULL;			
 880:	80 e0       	ldi	r24, 0x00	; 0
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	08 c0       	rjmp	.+16     	; 0x896 <processRequest+0x2c4>
			uint8_t tens = UART_Receive() - 48;
			if(tens < 0 || tens > 9 )
				return NULL;			
 886:	80 e0       	ldi	r24, 0x00	; 0
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	05 c0       	rjmp	.+10     	; 0x896 <processRequest+0x2c4>
			pumps[i].amount = (float)ones + (float)(tens)*0.1;
			if(pumps[i].amount < 0 || pumps[i].amount > 8)
				return NULL;
 88c:	80 e0       	ldi	r24, 0x00	; 0
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	02 c0       	rjmp	.+4      	; 0x896 <processRequest+0x2c4>
 892:	80 e0       	ldi	r24, 0x00	; 0
 894:	90 e0       	ldi	r25, 0x00	; 0
	request* req = (request*)malloc(sizeof(request));
	req->pumps = pumps;
	req->parPumps = parPumps;
	req->seqPumps = seqPumps;
	return req;
}
 896:	df 91       	pop	r29
 898:	cf 91       	pop	r28
 89a:	1f 91       	pop	r17
 89c:	0f 91       	pop	r16
 89e:	ff 90       	pop	r15
 8a0:	ef 90       	pop	r14
 8a2:	df 90       	pop	r13
 8a4:	cf 90       	pop	r12
 8a6:	bf 90       	pop	r11
 8a8:	af 90       	pop	r10
 8aa:	9f 90       	pop	r9
 8ac:	8f 90       	pop	r8
 8ae:	7f 90       	pop	r7
 8b0:	6f 90       	pop	r6
 8b2:	08 95       	ret

000008b4 <main>:
	* Change UART transmitted messages as necessary 
*/

/* Entry point */
int main(void){
	init();
 8b4:	0e 94 bf 02 	call	0x57e	; 0x57e <init>
	request* req;
	/* Primary loop */
	while(1){	
		req = NULL;
		println("Ready.");
 8b8:	82 e6       	ldi	r24, 0x62	; 98
 8ba:	91 e0       	ldi	r25, 0x01	; 1
 8bc:	0e 94 82 00 	call	0x104	; 0x104 <println>
		unsigned char temp = UART_Receive();
 8c0:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
		if(temp == 'R'){
 8c4:	82 35       	cpi	r24, 0x52	; 82
 8c6:	89 f5       	brne	.+98     	; 0x92a <__stack+0x2b>
			if((req = processRequest()) == NULL){
 8c8:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <processRequest>
 8cc:	ec 01       	movw	r28, r24
 8ce:	00 97       	sbiw	r24, 0x00	; 0
 8d0:	39 f4       	brne	.+14     	; 0x8e0 <main+0x2c>
				CRLF();
 8d2:	0e 94 7b 00 	call	0xf6	; 0xf6 <CRLF>
				println("ERROR: Failed to process request!");
 8d6:	89 e6       	ldi	r24, 0x69	; 105
 8d8:	91 e0       	ldi	r25, 0x01	; 1
 8da:	0e 94 82 00 	call	0x104	; 0x104 <println>
				continue;
 8de:	ec cf       	rjmp	.-40     	; 0x8b8 <main+0x4>
			}
			CRLF();
 8e0:	0e 94 7b 00 	call	0xf6	; 0xf6 <CRLF>
			if(req->parPumps > 0){
 8e4:	8a 81       	ldd	r24, Y+2	; 0x02
 8e6:	88 23       	and	r24, r24
 8e8:	61 f0       	breq	.+24     	; 0x902 <__stack+0x3>
				parallelDispense(req);
 8ea:	ce 01       	movw	r24, r28
 8ec:	0e 94 29 01 	call	0x252	; 0x252 <parallelDispense>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8f0:	2f ef       	ldi	r18, 0xFF	; 255
 8f2:	83 ed       	ldi	r24, 0xD3	; 211
 8f4:	90 e3       	ldi	r25, 0x30	; 48
 8f6:	21 50       	subi	r18, 0x01	; 1
 8f8:	80 40       	sbci	r24, 0x00	; 0
 8fa:	90 40       	sbci	r25, 0x00	; 0
 8fc:	e1 f7       	brne	.-8      	; 0x8f6 <main+0x42>
 8fe:	00 c0       	rjmp	.+0      	; 0x900 <__stack+0x1>
 900:	00 00       	nop
				_delay_ms(MODEDELAY); // Delay between modes, will tweak
			}
			if(req->seqPumps > 0){
 902:	8b 81       	ldd	r24, Y+3	; 0x03
 904:	88 23       	and	r24, r24
 906:	61 f0       	breq	.+24     	; 0x920 <__stack+0x21>
				sequentialDispense(req);
 908:	ce 01       	movw	r24, r28
 90a:	0e 94 3b 02 	call	0x476	; 0x476 <sequentialDispense>
 90e:	2f ef       	ldi	r18, 0xFF	; 255
 910:	83 ed       	ldi	r24, 0xD3	; 211
 912:	90 e3       	ldi	r25, 0x30	; 48
 914:	21 50       	subi	r18, 0x01	; 1
 916:	80 40       	sbci	r24, 0x00	; 0
 918:	90 40       	sbci	r25, 0x00	; 0
 91a:	e1 f7       	brne	.-8      	; 0x914 <__stack+0x15>
 91c:	00 c0       	rjmp	.+0      	; 0x91e <__stack+0x1f>
 91e:	00 00       	nop
				_delay_ms(MODEDELAY); // Delay between modes, will tweak
			}
			println("Request completed");			
 920:	8b e8       	ldi	r24, 0x8B	; 139
 922:	91 e0       	ldi	r25, 0x01	; 1
 924:	0e 94 82 00 	call	0x104	; 0x104 <println>
 928:	c7 cf       	rjmp	.-114    	; 0x8b8 <main+0x4>
		}
		else
			println("Invalid request command");
 92a:	8d e9       	ldi	r24, 0x9D	; 157
 92c:	91 e0       	ldi	r25, 0x01	; 1
 92e:	0e 94 82 00 	call	0x104	; 0x104 <println>
 932:	c2 cf       	rjmp	.-124    	; 0x8b8 <main+0x4>

00000934 <__subsf3>:
 934:	50 58       	subi	r21, 0x80	; 128

00000936 <__addsf3>:
 936:	bb 27       	eor	r27, r27
 938:	aa 27       	eor	r26, r26
 93a:	0e d0       	rcall	.+28     	; 0x958 <__addsf3x>
 93c:	08 c1       	rjmp	.+528    	; 0xb4e <__fp_round>
 93e:	f9 d0       	rcall	.+498    	; 0xb32 <__fp_pscA>
 940:	30 f0       	brcs	.+12     	; 0x94e <__addsf3+0x18>
 942:	fe d0       	rcall	.+508    	; 0xb40 <__fp_pscB>
 944:	20 f0       	brcs	.+8      	; 0x94e <__addsf3+0x18>
 946:	31 f4       	brne	.+12     	; 0x954 <__addsf3+0x1e>
 948:	9f 3f       	cpi	r25, 0xFF	; 255
 94a:	11 f4       	brne	.+4      	; 0x950 <__addsf3+0x1a>
 94c:	1e f4       	brtc	.+6      	; 0x954 <__addsf3+0x1e>
 94e:	ee c0       	rjmp	.+476    	; 0xb2c <__fp_nan>
 950:	0e f4       	brtc	.+2      	; 0x954 <__addsf3+0x1e>
 952:	e0 95       	com	r30
 954:	e7 fb       	bst	r30, 7
 956:	e4 c0       	rjmp	.+456    	; 0xb20 <__fp_inf>

00000958 <__addsf3x>:
 958:	e9 2f       	mov	r30, r25
 95a:	0a d1       	rcall	.+532    	; 0xb70 <__fp_split3>
 95c:	80 f3       	brcs	.-32     	; 0x93e <__addsf3+0x8>
 95e:	ba 17       	cp	r27, r26
 960:	62 07       	cpc	r22, r18
 962:	73 07       	cpc	r23, r19
 964:	84 07       	cpc	r24, r20
 966:	95 07       	cpc	r25, r21
 968:	18 f0       	brcs	.+6      	; 0x970 <__addsf3x+0x18>
 96a:	71 f4       	brne	.+28     	; 0x988 <__addsf3x+0x30>
 96c:	9e f5       	brtc	.+102    	; 0x9d4 <__addsf3x+0x7c>
 96e:	22 c1       	rjmp	.+580    	; 0xbb4 <__fp_zero>
 970:	0e f4       	brtc	.+2      	; 0x974 <__addsf3x+0x1c>
 972:	e0 95       	com	r30
 974:	0b 2e       	mov	r0, r27
 976:	ba 2f       	mov	r27, r26
 978:	a0 2d       	mov	r26, r0
 97a:	0b 01       	movw	r0, r22
 97c:	b9 01       	movw	r22, r18
 97e:	90 01       	movw	r18, r0
 980:	0c 01       	movw	r0, r24
 982:	ca 01       	movw	r24, r20
 984:	a0 01       	movw	r20, r0
 986:	11 24       	eor	r1, r1
 988:	ff 27       	eor	r31, r31
 98a:	59 1b       	sub	r21, r25
 98c:	99 f0       	breq	.+38     	; 0x9b4 <__addsf3x+0x5c>
 98e:	59 3f       	cpi	r21, 0xF9	; 249
 990:	50 f4       	brcc	.+20     	; 0x9a6 <__addsf3x+0x4e>
 992:	50 3e       	cpi	r21, 0xE0	; 224
 994:	68 f1       	brcs	.+90     	; 0x9f0 <__addsf3x+0x98>
 996:	1a 16       	cp	r1, r26
 998:	f0 40       	sbci	r31, 0x00	; 0
 99a:	a2 2f       	mov	r26, r18
 99c:	23 2f       	mov	r18, r19
 99e:	34 2f       	mov	r19, r20
 9a0:	44 27       	eor	r20, r20
 9a2:	58 5f       	subi	r21, 0xF8	; 248
 9a4:	f3 cf       	rjmp	.-26     	; 0x98c <__addsf3x+0x34>
 9a6:	46 95       	lsr	r20
 9a8:	37 95       	ror	r19
 9aa:	27 95       	ror	r18
 9ac:	a7 95       	ror	r26
 9ae:	f0 40       	sbci	r31, 0x00	; 0
 9b0:	53 95       	inc	r21
 9b2:	c9 f7       	brne	.-14     	; 0x9a6 <__addsf3x+0x4e>
 9b4:	7e f4       	brtc	.+30     	; 0x9d4 <__addsf3x+0x7c>
 9b6:	1f 16       	cp	r1, r31
 9b8:	ba 0b       	sbc	r27, r26
 9ba:	62 0b       	sbc	r22, r18
 9bc:	73 0b       	sbc	r23, r19
 9be:	84 0b       	sbc	r24, r20
 9c0:	ba f0       	brmi	.+46     	; 0x9f0 <__addsf3x+0x98>
 9c2:	91 50       	subi	r25, 0x01	; 1
 9c4:	a1 f0       	breq	.+40     	; 0x9ee <__addsf3x+0x96>
 9c6:	ff 0f       	add	r31, r31
 9c8:	bb 1f       	adc	r27, r27
 9ca:	66 1f       	adc	r22, r22
 9cc:	77 1f       	adc	r23, r23
 9ce:	88 1f       	adc	r24, r24
 9d0:	c2 f7       	brpl	.-16     	; 0x9c2 <__addsf3x+0x6a>
 9d2:	0e c0       	rjmp	.+28     	; 0x9f0 <__addsf3x+0x98>
 9d4:	ba 0f       	add	r27, r26
 9d6:	62 1f       	adc	r22, r18
 9d8:	73 1f       	adc	r23, r19
 9da:	84 1f       	adc	r24, r20
 9dc:	48 f4       	brcc	.+18     	; 0x9f0 <__addsf3x+0x98>
 9de:	87 95       	ror	r24
 9e0:	77 95       	ror	r23
 9e2:	67 95       	ror	r22
 9e4:	b7 95       	ror	r27
 9e6:	f7 95       	ror	r31
 9e8:	9e 3f       	cpi	r25, 0xFE	; 254
 9ea:	08 f0       	brcs	.+2      	; 0x9ee <__addsf3x+0x96>
 9ec:	b3 cf       	rjmp	.-154    	; 0x954 <__addsf3+0x1e>
 9ee:	93 95       	inc	r25
 9f0:	88 0f       	add	r24, r24
 9f2:	08 f0       	brcs	.+2      	; 0x9f6 <__addsf3x+0x9e>
 9f4:	99 27       	eor	r25, r25
 9f6:	ee 0f       	add	r30, r30
 9f8:	97 95       	ror	r25
 9fa:	87 95       	ror	r24
 9fc:	08 95       	ret

000009fe <__cmpsf2>:
 9fe:	6c d0       	rcall	.+216    	; 0xad8 <__fp_cmp>
 a00:	08 f4       	brcc	.+2      	; 0xa04 <__cmpsf2+0x6>
 a02:	81 e0       	ldi	r24, 0x01	; 1
 a04:	08 95       	ret

00000a06 <__fixunssfsi>:
 a06:	bc d0       	rcall	.+376    	; 0xb80 <__fp_splitA>
 a08:	88 f0       	brcs	.+34     	; 0xa2c <__fixunssfsi+0x26>
 a0a:	9f 57       	subi	r25, 0x7F	; 127
 a0c:	90 f0       	brcs	.+36     	; 0xa32 <__fixunssfsi+0x2c>
 a0e:	b9 2f       	mov	r27, r25
 a10:	99 27       	eor	r25, r25
 a12:	b7 51       	subi	r27, 0x17	; 23
 a14:	a0 f0       	brcs	.+40     	; 0xa3e <__fixunssfsi+0x38>
 a16:	d1 f0       	breq	.+52     	; 0xa4c <__fixunssfsi+0x46>
 a18:	66 0f       	add	r22, r22
 a1a:	77 1f       	adc	r23, r23
 a1c:	88 1f       	adc	r24, r24
 a1e:	99 1f       	adc	r25, r25
 a20:	1a f0       	brmi	.+6      	; 0xa28 <__fixunssfsi+0x22>
 a22:	ba 95       	dec	r27
 a24:	c9 f7       	brne	.-14     	; 0xa18 <__fixunssfsi+0x12>
 a26:	12 c0       	rjmp	.+36     	; 0xa4c <__fixunssfsi+0x46>
 a28:	b1 30       	cpi	r27, 0x01	; 1
 a2a:	81 f0       	breq	.+32     	; 0xa4c <__fixunssfsi+0x46>
 a2c:	c3 d0       	rcall	.+390    	; 0xbb4 <__fp_zero>
 a2e:	b1 e0       	ldi	r27, 0x01	; 1
 a30:	08 95       	ret
 a32:	c0 c0       	rjmp	.+384    	; 0xbb4 <__fp_zero>
 a34:	67 2f       	mov	r22, r23
 a36:	78 2f       	mov	r23, r24
 a38:	88 27       	eor	r24, r24
 a3a:	b8 5f       	subi	r27, 0xF8	; 248
 a3c:	39 f0       	breq	.+14     	; 0xa4c <__fixunssfsi+0x46>
 a3e:	b9 3f       	cpi	r27, 0xF9	; 249
 a40:	cc f3       	brlt	.-14     	; 0xa34 <__fixunssfsi+0x2e>
 a42:	86 95       	lsr	r24
 a44:	77 95       	ror	r23
 a46:	67 95       	ror	r22
 a48:	b3 95       	inc	r27
 a4a:	d9 f7       	brne	.-10     	; 0xa42 <__fixunssfsi+0x3c>
 a4c:	3e f4       	brtc	.+14     	; 0xa5c <__fixunssfsi+0x56>
 a4e:	90 95       	com	r25
 a50:	80 95       	com	r24
 a52:	70 95       	com	r23
 a54:	61 95       	neg	r22
 a56:	7f 4f       	sbci	r23, 0xFF	; 255
 a58:	8f 4f       	sbci	r24, 0xFF	; 255
 a5a:	9f 4f       	sbci	r25, 0xFF	; 255
 a5c:	08 95       	ret

00000a5e <__floatunsisf>:
 a5e:	e8 94       	clt
 a60:	09 c0       	rjmp	.+18     	; 0xa74 <__floatsisf+0x12>

00000a62 <__floatsisf>:
 a62:	97 fb       	bst	r25, 7
 a64:	3e f4       	brtc	.+14     	; 0xa74 <__floatsisf+0x12>
 a66:	90 95       	com	r25
 a68:	80 95       	com	r24
 a6a:	70 95       	com	r23
 a6c:	61 95       	neg	r22
 a6e:	7f 4f       	sbci	r23, 0xFF	; 255
 a70:	8f 4f       	sbci	r24, 0xFF	; 255
 a72:	9f 4f       	sbci	r25, 0xFF	; 255
 a74:	99 23       	and	r25, r25
 a76:	a9 f0       	breq	.+42     	; 0xaa2 <__floatsisf+0x40>
 a78:	f9 2f       	mov	r31, r25
 a7a:	96 e9       	ldi	r25, 0x96	; 150
 a7c:	bb 27       	eor	r27, r27
 a7e:	93 95       	inc	r25
 a80:	f6 95       	lsr	r31
 a82:	87 95       	ror	r24
 a84:	77 95       	ror	r23
 a86:	67 95       	ror	r22
 a88:	b7 95       	ror	r27
 a8a:	f1 11       	cpse	r31, r1
 a8c:	f8 cf       	rjmp	.-16     	; 0xa7e <__floatsisf+0x1c>
 a8e:	fa f4       	brpl	.+62     	; 0xace <__floatsisf+0x6c>
 a90:	bb 0f       	add	r27, r27
 a92:	11 f4       	brne	.+4      	; 0xa98 <__floatsisf+0x36>
 a94:	60 ff       	sbrs	r22, 0
 a96:	1b c0       	rjmp	.+54     	; 0xace <__floatsisf+0x6c>
 a98:	6f 5f       	subi	r22, 0xFF	; 255
 a9a:	7f 4f       	sbci	r23, 0xFF	; 255
 a9c:	8f 4f       	sbci	r24, 0xFF	; 255
 a9e:	9f 4f       	sbci	r25, 0xFF	; 255
 aa0:	16 c0       	rjmp	.+44     	; 0xace <__floatsisf+0x6c>
 aa2:	88 23       	and	r24, r24
 aa4:	11 f0       	breq	.+4      	; 0xaaa <__floatsisf+0x48>
 aa6:	96 e9       	ldi	r25, 0x96	; 150
 aa8:	11 c0       	rjmp	.+34     	; 0xacc <__floatsisf+0x6a>
 aaa:	77 23       	and	r23, r23
 aac:	21 f0       	breq	.+8      	; 0xab6 <__floatsisf+0x54>
 aae:	9e e8       	ldi	r25, 0x8E	; 142
 ab0:	87 2f       	mov	r24, r23
 ab2:	76 2f       	mov	r23, r22
 ab4:	05 c0       	rjmp	.+10     	; 0xac0 <__floatsisf+0x5e>
 ab6:	66 23       	and	r22, r22
 ab8:	71 f0       	breq	.+28     	; 0xad6 <__floatsisf+0x74>
 aba:	96 e8       	ldi	r25, 0x86	; 134
 abc:	86 2f       	mov	r24, r22
 abe:	70 e0       	ldi	r23, 0x00	; 0
 ac0:	60 e0       	ldi	r22, 0x00	; 0
 ac2:	2a f0       	brmi	.+10     	; 0xace <__floatsisf+0x6c>
 ac4:	9a 95       	dec	r25
 ac6:	66 0f       	add	r22, r22
 ac8:	77 1f       	adc	r23, r23
 aca:	88 1f       	adc	r24, r24
 acc:	da f7       	brpl	.-10     	; 0xac4 <__floatsisf+0x62>
 ace:	88 0f       	add	r24, r24
 ad0:	96 95       	lsr	r25
 ad2:	87 95       	ror	r24
 ad4:	97 f9       	bld	r25, 7
 ad6:	08 95       	ret

00000ad8 <__fp_cmp>:
 ad8:	99 0f       	add	r25, r25
 ada:	00 08       	sbc	r0, r0
 adc:	55 0f       	add	r21, r21
 ade:	aa 0b       	sbc	r26, r26
 ae0:	e0 e8       	ldi	r30, 0x80	; 128
 ae2:	fe ef       	ldi	r31, 0xFE	; 254
 ae4:	16 16       	cp	r1, r22
 ae6:	17 06       	cpc	r1, r23
 ae8:	e8 07       	cpc	r30, r24
 aea:	f9 07       	cpc	r31, r25
 aec:	c0 f0       	brcs	.+48     	; 0xb1e <__fp_cmp+0x46>
 aee:	12 16       	cp	r1, r18
 af0:	13 06       	cpc	r1, r19
 af2:	e4 07       	cpc	r30, r20
 af4:	f5 07       	cpc	r31, r21
 af6:	98 f0       	brcs	.+38     	; 0xb1e <__fp_cmp+0x46>
 af8:	62 1b       	sub	r22, r18
 afa:	73 0b       	sbc	r23, r19
 afc:	84 0b       	sbc	r24, r20
 afe:	95 0b       	sbc	r25, r21
 b00:	39 f4       	brne	.+14     	; 0xb10 <__fp_cmp+0x38>
 b02:	0a 26       	eor	r0, r26
 b04:	61 f0       	breq	.+24     	; 0xb1e <__fp_cmp+0x46>
 b06:	23 2b       	or	r18, r19
 b08:	24 2b       	or	r18, r20
 b0a:	25 2b       	or	r18, r21
 b0c:	21 f4       	brne	.+8      	; 0xb16 <__fp_cmp+0x3e>
 b0e:	08 95       	ret
 b10:	0a 26       	eor	r0, r26
 b12:	09 f4       	brne	.+2      	; 0xb16 <__fp_cmp+0x3e>
 b14:	a1 40       	sbci	r26, 0x01	; 1
 b16:	a6 95       	lsr	r26
 b18:	8f ef       	ldi	r24, 0xFF	; 255
 b1a:	81 1d       	adc	r24, r1
 b1c:	81 1d       	adc	r24, r1
 b1e:	08 95       	ret

00000b20 <__fp_inf>:
 b20:	97 f9       	bld	r25, 7
 b22:	9f 67       	ori	r25, 0x7F	; 127
 b24:	80 e8       	ldi	r24, 0x80	; 128
 b26:	70 e0       	ldi	r23, 0x00	; 0
 b28:	60 e0       	ldi	r22, 0x00	; 0
 b2a:	08 95       	ret

00000b2c <__fp_nan>:
 b2c:	9f ef       	ldi	r25, 0xFF	; 255
 b2e:	80 ec       	ldi	r24, 0xC0	; 192
 b30:	08 95       	ret

00000b32 <__fp_pscA>:
 b32:	00 24       	eor	r0, r0
 b34:	0a 94       	dec	r0
 b36:	16 16       	cp	r1, r22
 b38:	17 06       	cpc	r1, r23
 b3a:	18 06       	cpc	r1, r24
 b3c:	09 06       	cpc	r0, r25
 b3e:	08 95       	ret

00000b40 <__fp_pscB>:
 b40:	00 24       	eor	r0, r0
 b42:	0a 94       	dec	r0
 b44:	12 16       	cp	r1, r18
 b46:	13 06       	cpc	r1, r19
 b48:	14 06       	cpc	r1, r20
 b4a:	05 06       	cpc	r0, r21
 b4c:	08 95       	ret

00000b4e <__fp_round>:
 b4e:	09 2e       	mov	r0, r25
 b50:	03 94       	inc	r0
 b52:	00 0c       	add	r0, r0
 b54:	11 f4       	brne	.+4      	; 0xb5a <__fp_round+0xc>
 b56:	88 23       	and	r24, r24
 b58:	52 f0       	brmi	.+20     	; 0xb6e <__fp_round+0x20>
 b5a:	bb 0f       	add	r27, r27
 b5c:	40 f4       	brcc	.+16     	; 0xb6e <__fp_round+0x20>
 b5e:	bf 2b       	or	r27, r31
 b60:	11 f4       	brne	.+4      	; 0xb66 <__fp_round+0x18>
 b62:	60 ff       	sbrs	r22, 0
 b64:	04 c0       	rjmp	.+8      	; 0xb6e <__fp_round+0x20>
 b66:	6f 5f       	subi	r22, 0xFF	; 255
 b68:	7f 4f       	sbci	r23, 0xFF	; 255
 b6a:	8f 4f       	sbci	r24, 0xFF	; 255
 b6c:	9f 4f       	sbci	r25, 0xFF	; 255
 b6e:	08 95       	ret

00000b70 <__fp_split3>:
 b70:	57 fd       	sbrc	r21, 7
 b72:	90 58       	subi	r25, 0x80	; 128
 b74:	44 0f       	add	r20, r20
 b76:	55 1f       	adc	r21, r21
 b78:	59 f0       	breq	.+22     	; 0xb90 <__fp_splitA+0x10>
 b7a:	5f 3f       	cpi	r21, 0xFF	; 255
 b7c:	71 f0       	breq	.+28     	; 0xb9a <__fp_splitA+0x1a>
 b7e:	47 95       	ror	r20

00000b80 <__fp_splitA>:
 b80:	88 0f       	add	r24, r24
 b82:	97 fb       	bst	r25, 7
 b84:	99 1f       	adc	r25, r25
 b86:	61 f0       	breq	.+24     	; 0xba0 <__fp_splitA+0x20>
 b88:	9f 3f       	cpi	r25, 0xFF	; 255
 b8a:	79 f0       	breq	.+30     	; 0xbaa <__fp_splitA+0x2a>
 b8c:	87 95       	ror	r24
 b8e:	08 95       	ret
 b90:	12 16       	cp	r1, r18
 b92:	13 06       	cpc	r1, r19
 b94:	14 06       	cpc	r1, r20
 b96:	55 1f       	adc	r21, r21
 b98:	f2 cf       	rjmp	.-28     	; 0xb7e <__fp_split3+0xe>
 b9a:	46 95       	lsr	r20
 b9c:	f1 df       	rcall	.-30     	; 0xb80 <__fp_splitA>
 b9e:	08 c0       	rjmp	.+16     	; 0xbb0 <__fp_splitA+0x30>
 ba0:	16 16       	cp	r1, r22
 ba2:	17 06       	cpc	r1, r23
 ba4:	18 06       	cpc	r1, r24
 ba6:	99 1f       	adc	r25, r25
 ba8:	f1 cf       	rjmp	.-30     	; 0xb8c <__fp_splitA+0xc>
 baa:	86 95       	lsr	r24
 bac:	71 05       	cpc	r23, r1
 bae:	61 05       	cpc	r22, r1
 bb0:	08 94       	sec
 bb2:	08 95       	ret

00000bb4 <__fp_zero>:
 bb4:	e8 94       	clt

00000bb6 <__fp_szero>:
 bb6:	bb 27       	eor	r27, r27
 bb8:	66 27       	eor	r22, r22
 bba:	77 27       	eor	r23, r23
 bbc:	cb 01       	movw	r24, r22
 bbe:	97 f9       	bld	r25, 7
 bc0:	08 95       	ret

00000bc2 <__gesf2>:
 bc2:	8a df       	rcall	.-236    	; 0xad8 <__fp_cmp>
 bc4:	08 f4       	brcc	.+2      	; 0xbc8 <__gesf2+0x6>
 bc6:	8f ef       	ldi	r24, 0xFF	; 255
 bc8:	08 95       	ret

00000bca <__mulsf3>:
 bca:	0b d0       	rcall	.+22     	; 0xbe2 <__mulsf3x>
 bcc:	c0 cf       	rjmp	.-128    	; 0xb4e <__fp_round>
 bce:	b1 df       	rcall	.-158    	; 0xb32 <__fp_pscA>
 bd0:	28 f0       	brcs	.+10     	; 0xbdc <__mulsf3+0x12>
 bd2:	b6 df       	rcall	.-148    	; 0xb40 <__fp_pscB>
 bd4:	18 f0       	brcs	.+6      	; 0xbdc <__mulsf3+0x12>
 bd6:	95 23       	and	r25, r21
 bd8:	09 f0       	breq	.+2      	; 0xbdc <__mulsf3+0x12>
 bda:	a2 cf       	rjmp	.-188    	; 0xb20 <__fp_inf>
 bdc:	a7 cf       	rjmp	.-178    	; 0xb2c <__fp_nan>
 bde:	11 24       	eor	r1, r1
 be0:	ea cf       	rjmp	.-44     	; 0xbb6 <__fp_szero>

00000be2 <__mulsf3x>:
 be2:	c6 df       	rcall	.-116    	; 0xb70 <__fp_split3>
 be4:	a0 f3       	brcs	.-24     	; 0xbce <__mulsf3+0x4>

00000be6 <__mulsf3_pse>:
 be6:	95 9f       	mul	r25, r21
 be8:	d1 f3       	breq	.-12     	; 0xbde <__mulsf3+0x14>
 bea:	95 0f       	add	r25, r21
 bec:	50 e0       	ldi	r21, 0x00	; 0
 bee:	55 1f       	adc	r21, r21
 bf0:	62 9f       	mul	r22, r18
 bf2:	f0 01       	movw	r30, r0
 bf4:	72 9f       	mul	r23, r18
 bf6:	bb 27       	eor	r27, r27
 bf8:	f0 0d       	add	r31, r0
 bfa:	b1 1d       	adc	r27, r1
 bfc:	63 9f       	mul	r22, r19
 bfe:	aa 27       	eor	r26, r26
 c00:	f0 0d       	add	r31, r0
 c02:	b1 1d       	adc	r27, r1
 c04:	aa 1f       	adc	r26, r26
 c06:	64 9f       	mul	r22, r20
 c08:	66 27       	eor	r22, r22
 c0a:	b0 0d       	add	r27, r0
 c0c:	a1 1d       	adc	r26, r1
 c0e:	66 1f       	adc	r22, r22
 c10:	82 9f       	mul	r24, r18
 c12:	22 27       	eor	r18, r18
 c14:	b0 0d       	add	r27, r0
 c16:	a1 1d       	adc	r26, r1
 c18:	62 1f       	adc	r22, r18
 c1a:	73 9f       	mul	r23, r19
 c1c:	b0 0d       	add	r27, r0
 c1e:	a1 1d       	adc	r26, r1
 c20:	62 1f       	adc	r22, r18
 c22:	83 9f       	mul	r24, r19
 c24:	a0 0d       	add	r26, r0
 c26:	61 1d       	adc	r22, r1
 c28:	22 1f       	adc	r18, r18
 c2a:	74 9f       	mul	r23, r20
 c2c:	33 27       	eor	r19, r19
 c2e:	a0 0d       	add	r26, r0
 c30:	61 1d       	adc	r22, r1
 c32:	23 1f       	adc	r18, r19
 c34:	84 9f       	mul	r24, r20
 c36:	60 0d       	add	r22, r0
 c38:	21 1d       	adc	r18, r1
 c3a:	82 2f       	mov	r24, r18
 c3c:	76 2f       	mov	r23, r22
 c3e:	6a 2f       	mov	r22, r26
 c40:	11 24       	eor	r1, r1
 c42:	9f 57       	subi	r25, 0x7F	; 127
 c44:	50 40       	sbci	r21, 0x00	; 0
 c46:	8a f0       	brmi	.+34     	; 0xc6a <__mulsf3_pse+0x84>
 c48:	e1 f0       	breq	.+56     	; 0xc82 <__mulsf3_pse+0x9c>
 c4a:	88 23       	and	r24, r24
 c4c:	4a f0       	brmi	.+18     	; 0xc60 <__mulsf3_pse+0x7a>
 c4e:	ee 0f       	add	r30, r30
 c50:	ff 1f       	adc	r31, r31
 c52:	bb 1f       	adc	r27, r27
 c54:	66 1f       	adc	r22, r22
 c56:	77 1f       	adc	r23, r23
 c58:	88 1f       	adc	r24, r24
 c5a:	91 50       	subi	r25, 0x01	; 1
 c5c:	50 40       	sbci	r21, 0x00	; 0
 c5e:	a9 f7       	brne	.-22     	; 0xc4a <__mulsf3_pse+0x64>
 c60:	9e 3f       	cpi	r25, 0xFE	; 254
 c62:	51 05       	cpc	r21, r1
 c64:	70 f0       	brcs	.+28     	; 0xc82 <__mulsf3_pse+0x9c>
 c66:	5c cf       	rjmp	.-328    	; 0xb20 <__fp_inf>
 c68:	a6 cf       	rjmp	.-180    	; 0xbb6 <__fp_szero>
 c6a:	5f 3f       	cpi	r21, 0xFF	; 255
 c6c:	ec f3       	brlt	.-6      	; 0xc68 <__mulsf3_pse+0x82>
 c6e:	98 3e       	cpi	r25, 0xE8	; 232
 c70:	dc f3       	brlt	.-10     	; 0xc68 <__mulsf3_pse+0x82>
 c72:	86 95       	lsr	r24
 c74:	77 95       	ror	r23
 c76:	67 95       	ror	r22
 c78:	b7 95       	ror	r27
 c7a:	f7 95       	ror	r31
 c7c:	e7 95       	ror	r30
 c7e:	9f 5f       	subi	r25, 0xFF	; 255
 c80:	c1 f7       	brne	.-16     	; 0xc72 <__mulsf3_pse+0x8c>
 c82:	fe 2b       	or	r31, r30
 c84:	88 0f       	add	r24, r24
 c86:	91 1d       	adc	r25, r1
 c88:	96 95       	lsr	r25
 c8a:	87 95       	ror	r24
 c8c:	97 f9       	bld	r25, 7
 c8e:	08 95       	ret

00000c90 <__muluhisi3>:
 c90:	0e 94 53 06 	call	0xca6	; 0xca6 <__umulhisi3>
 c94:	a5 9f       	mul	r26, r21
 c96:	90 0d       	add	r25, r0
 c98:	b4 9f       	mul	r27, r20
 c9a:	90 0d       	add	r25, r0
 c9c:	a4 9f       	mul	r26, r20
 c9e:	80 0d       	add	r24, r0
 ca0:	91 1d       	adc	r25, r1
 ca2:	11 24       	eor	r1, r1
 ca4:	08 95       	ret

00000ca6 <__umulhisi3>:
 ca6:	a2 9f       	mul	r26, r18
 ca8:	b0 01       	movw	r22, r0
 caa:	b3 9f       	mul	r27, r19
 cac:	c0 01       	movw	r24, r0
 cae:	a3 9f       	mul	r26, r19
 cb0:	70 0d       	add	r23, r0
 cb2:	81 1d       	adc	r24, r1
 cb4:	11 24       	eor	r1, r1
 cb6:	91 1d       	adc	r25, r1
 cb8:	b2 9f       	mul	r27, r18
 cba:	70 0d       	add	r23, r0
 cbc:	81 1d       	adc	r24, r1
 cbe:	11 24       	eor	r1, r1
 cc0:	91 1d       	adc	r25, r1
 cc2:	08 95       	ret

00000cc4 <malloc>:
 cc4:	cf 93       	push	r28
 cc6:	df 93       	push	r29
 cc8:	82 30       	cpi	r24, 0x02	; 2
 cca:	91 05       	cpc	r25, r1
 ccc:	10 f4       	brcc	.+4      	; 0xcd2 <malloc+0xe>
 cce:	82 e0       	ldi	r24, 0x02	; 2
 cd0:	90 e0       	ldi	r25, 0x00	; 0
 cd2:	e0 91 bc 01 	lds	r30, 0x01BC
 cd6:	f0 91 bd 01 	lds	r31, 0x01BD
 cda:	20 e0       	ldi	r18, 0x00	; 0
 cdc:	30 e0       	ldi	r19, 0x00	; 0
 cde:	a0 e0       	ldi	r26, 0x00	; 0
 ce0:	b0 e0       	ldi	r27, 0x00	; 0
 ce2:	30 97       	sbiw	r30, 0x00	; 0
 ce4:	39 f1       	breq	.+78     	; 0xd34 <malloc+0x70>
 ce6:	40 81       	ld	r20, Z
 ce8:	51 81       	ldd	r21, Z+1	; 0x01
 cea:	48 17       	cp	r20, r24
 cec:	59 07       	cpc	r21, r25
 cee:	b8 f0       	brcs	.+46     	; 0xd1e <malloc+0x5a>
 cf0:	48 17       	cp	r20, r24
 cf2:	59 07       	cpc	r21, r25
 cf4:	71 f4       	brne	.+28     	; 0xd12 <malloc+0x4e>
 cf6:	82 81       	ldd	r24, Z+2	; 0x02
 cf8:	93 81       	ldd	r25, Z+3	; 0x03
 cfa:	10 97       	sbiw	r26, 0x00	; 0
 cfc:	29 f0       	breq	.+10     	; 0xd08 <malloc+0x44>
 cfe:	13 96       	adiw	r26, 0x03	; 3
 d00:	9c 93       	st	X, r25
 d02:	8e 93       	st	-X, r24
 d04:	12 97       	sbiw	r26, 0x02	; 2
 d06:	2c c0       	rjmp	.+88     	; 0xd60 <malloc+0x9c>
 d08:	90 93 bd 01 	sts	0x01BD, r25
 d0c:	80 93 bc 01 	sts	0x01BC, r24
 d10:	27 c0       	rjmp	.+78     	; 0xd60 <malloc+0x9c>
 d12:	21 15       	cp	r18, r1
 d14:	31 05       	cpc	r19, r1
 d16:	31 f0       	breq	.+12     	; 0xd24 <malloc+0x60>
 d18:	42 17       	cp	r20, r18
 d1a:	53 07       	cpc	r21, r19
 d1c:	18 f0       	brcs	.+6      	; 0xd24 <malloc+0x60>
 d1e:	a9 01       	movw	r20, r18
 d20:	db 01       	movw	r26, r22
 d22:	01 c0       	rjmp	.+2      	; 0xd26 <malloc+0x62>
 d24:	ef 01       	movw	r28, r30
 d26:	9a 01       	movw	r18, r20
 d28:	bd 01       	movw	r22, r26
 d2a:	df 01       	movw	r26, r30
 d2c:	02 80       	ldd	r0, Z+2	; 0x02
 d2e:	f3 81       	ldd	r31, Z+3	; 0x03
 d30:	e0 2d       	mov	r30, r0
 d32:	d7 cf       	rjmp	.-82     	; 0xce2 <malloc+0x1e>
 d34:	21 15       	cp	r18, r1
 d36:	31 05       	cpc	r19, r1
 d38:	f9 f0       	breq	.+62     	; 0xd78 <malloc+0xb4>
 d3a:	28 1b       	sub	r18, r24
 d3c:	39 0b       	sbc	r19, r25
 d3e:	24 30       	cpi	r18, 0x04	; 4
 d40:	31 05       	cpc	r19, r1
 d42:	80 f4       	brcc	.+32     	; 0xd64 <malloc+0xa0>
 d44:	8a 81       	ldd	r24, Y+2	; 0x02
 d46:	9b 81       	ldd	r25, Y+3	; 0x03
 d48:	61 15       	cp	r22, r1
 d4a:	71 05       	cpc	r23, r1
 d4c:	21 f0       	breq	.+8      	; 0xd56 <malloc+0x92>
 d4e:	fb 01       	movw	r30, r22
 d50:	93 83       	std	Z+3, r25	; 0x03
 d52:	82 83       	std	Z+2, r24	; 0x02
 d54:	04 c0       	rjmp	.+8      	; 0xd5e <malloc+0x9a>
 d56:	90 93 bd 01 	sts	0x01BD, r25
 d5a:	80 93 bc 01 	sts	0x01BC, r24
 d5e:	fe 01       	movw	r30, r28
 d60:	32 96       	adiw	r30, 0x02	; 2
 d62:	44 c0       	rjmp	.+136    	; 0xdec <malloc+0x128>
 d64:	fe 01       	movw	r30, r28
 d66:	e2 0f       	add	r30, r18
 d68:	f3 1f       	adc	r31, r19
 d6a:	81 93       	st	Z+, r24
 d6c:	91 93       	st	Z+, r25
 d6e:	22 50       	subi	r18, 0x02	; 2
 d70:	31 09       	sbc	r19, r1
 d72:	39 83       	std	Y+1, r19	; 0x01
 d74:	28 83       	st	Y, r18
 d76:	3a c0       	rjmp	.+116    	; 0xdec <malloc+0x128>
 d78:	20 91 ba 01 	lds	r18, 0x01BA
 d7c:	30 91 bb 01 	lds	r19, 0x01BB
 d80:	23 2b       	or	r18, r19
 d82:	41 f4       	brne	.+16     	; 0xd94 <malloc+0xd0>
 d84:	20 91 02 01 	lds	r18, 0x0102
 d88:	30 91 03 01 	lds	r19, 0x0103
 d8c:	30 93 bb 01 	sts	0x01BB, r19
 d90:	20 93 ba 01 	sts	0x01BA, r18
 d94:	20 91 00 01 	lds	r18, 0x0100
 d98:	30 91 01 01 	lds	r19, 0x0101
 d9c:	21 15       	cp	r18, r1
 d9e:	31 05       	cpc	r19, r1
 da0:	41 f4       	brne	.+16     	; 0xdb2 <malloc+0xee>
 da2:	2d b7       	in	r18, 0x3d	; 61
 da4:	3e b7       	in	r19, 0x3e	; 62
 da6:	40 91 04 01 	lds	r20, 0x0104
 daa:	50 91 05 01 	lds	r21, 0x0105
 dae:	24 1b       	sub	r18, r20
 db0:	35 0b       	sbc	r19, r21
 db2:	e0 91 ba 01 	lds	r30, 0x01BA
 db6:	f0 91 bb 01 	lds	r31, 0x01BB
 dba:	e2 17       	cp	r30, r18
 dbc:	f3 07       	cpc	r31, r19
 dbe:	a0 f4       	brcc	.+40     	; 0xde8 <malloc+0x124>
 dc0:	2e 1b       	sub	r18, r30
 dc2:	3f 0b       	sbc	r19, r31
 dc4:	28 17       	cp	r18, r24
 dc6:	39 07       	cpc	r19, r25
 dc8:	78 f0       	brcs	.+30     	; 0xde8 <malloc+0x124>
 dca:	ac 01       	movw	r20, r24
 dcc:	4e 5f       	subi	r20, 0xFE	; 254
 dce:	5f 4f       	sbci	r21, 0xFF	; 255
 dd0:	24 17       	cp	r18, r20
 dd2:	35 07       	cpc	r19, r21
 dd4:	48 f0       	brcs	.+18     	; 0xde8 <malloc+0x124>
 dd6:	4e 0f       	add	r20, r30
 dd8:	5f 1f       	adc	r21, r31
 dda:	50 93 bb 01 	sts	0x01BB, r21
 dde:	40 93 ba 01 	sts	0x01BA, r20
 de2:	81 93       	st	Z+, r24
 de4:	91 93       	st	Z+, r25
 de6:	02 c0       	rjmp	.+4      	; 0xdec <malloc+0x128>
 de8:	e0 e0       	ldi	r30, 0x00	; 0
 dea:	f0 e0       	ldi	r31, 0x00	; 0
 dec:	cf 01       	movw	r24, r30
 dee:	df 91       	pop	r29
 df0:	cf 91       	pop	r28
 df2:	08 95       	ret

00000df4 <free>:
 df4:	cf 93       	push	r28
 df6:	df 93       	push	r29
 df8:	00 97       	sbiw	r24, 0x00	; 0
 dfa:	09 f4       	brne	.+2      	; 0xdfe <free+0xa>
 dfc:	87 c0       	rjmp	.+270    	; 0xf0c <free+0x118>
 dfe:	fc 01       	movw	r30, r24
 e00:	32 97       	sbiw	r30, 0x02	; 2
 e02:	13 82       	std	Z+3, r1	; 0x03
 e04:	12 82       	std	Z+2, r1	; 0x02
 e06:	c0 91 bc 01 	lds	r28, 0x01BC
 e0a:	d0 91 bd 01 	lds	r29, 0x01BD
 e0e:	20 97       	sbiw	r28, 0x00	; 0
 e10:	81 f4       	brne	.+32     	; 0xe32 <free+0x3e>
 e12:	20 81       	ld	r18, Z
 e14:	31 81       	ldd	r19, Z+1	; 0x01
 e16:	28 0f       	add	r18, r24
 e18:	39 1f       	adc	r19, r25
 e1a:	80 91 ba 01 	lds	r24, 0x01BA
 e1e:	90 91 bb 01 	lds	r25, 0x01BB
 e22:	82 17       	cp	r24, r18
 e24:	93 07       	cpc	r25, r19
 e26:	79 f5       	brne	.+94     	; 0xe86 <free+0x92>
 e28:	f0 93 bb 01 	sts	0x01BB, r31
 e2c:	e0 93 ba 01 	sts	0x01BA, r30
 e30:	6d c0       	rjmp	.+218    	; 0xf0c <free+0x118>
 e32:	de 01       	movw	r26, r28
 e34:	20 e0       	ldi	r18, 0x00	; 0
 e36:	30 e0       	ldi	r19, 0x00	; 0
 e38:	ae 17       	cp	r26, r30
 e3a:	bf 07       	cpc	r27, r31
 e3c:	50 f4       	brcc	.+20     	; 0xe52 <free+0x5e>
 e3e:	12 96       	adiw	r26, 0x02	; 2
 e40:	4d 91       	ld	r20, X+
 e42:	5c 91       	ld	r21, X
 e44:	13 97       	sbiw	r26, 0x03	; 3
 e46:	9d 01       	movw	r18, r26
 e48:	41 15       	cp	r20, r1
 e4a:	51 05       	cpc	r21, r1
 e4c:	09 f1       	breq	.+66     	; 0xe90 <free+0x9c>
 e4e:	da 01       	movw	r26, r20
 e50:	f3 cf       	rjmp	.-26     	; 0xe38 <free+0x44>
 e52:	b3 83       	std	Z+3, r27	; 0x03
 e54:	a2 83       	std	Z+2, r26	; 0x02
 e56:	40 81       	ld	r20, Z
 e58:	51 81       	ldd	r21, Z+1	; 0x01
 e5a:	84 0f       	add	r24, r20
 e5c:	95 1f       	adc	r25, r21
 e5e:	8a 17       	cp	r24, r26
 e60:	9b 07       	cpc	r25, r27
 e62:	71 f4       	brne	.+28     	; 0xe80 <free+0x8c>
 e64:	8d 91       	ld	r24, X+
 e66:	9c 91       	ld	r25, X
 e68:	11 97       	sbiw	r26, 0x01	; 1
 e6a:	84 0f       	add	r24, r20
 e6c:	95 1f       	adc	r25, r21
 e6e:	02 96       	adiw	r24, 0x02	; 2
 e70:	91 83       	std	Z+1, r25	; 0x01
 e72:	80 83       	st	Z, r24
 e74:	12 96       	adiw	r26, 0x02	; 2
 e76:	8d 91       	ld	r24, X+
 e78:	9c 91       	ld	r25, X
 e7a:	13 97       	sbiw	r26, 0x03	; 3
 e7c:	93 83       	std	Z+3, r25	; 0x03
 e7e:	82 83       	std	Z+2, r24	; 0x02
 e80:	21 15       	cp	r18, r1
 e82:	31 05       	cpc	r19, r1
 e84:	29 f4       	brne	.+10     	; 0xe90 <free+0x9c>
 e86:	f0 93 bd 01 	sts	0x01BD, r31
 e8a:	e0 93 bc 01 	sts	0x01BC, r30
 e8e:	3e c0       	rjmp	.+124    	; 0xf0c <free+0x118>
 e90:	d9 01       	movw	r26, r18
 e92:	13 96       	adiw	r26, 0x03	; 3
 e94:	fc 93       	st	X, r31
 e96:	ee 93       	st	-X, r30
 e98:	12 97       	sbiw	r26, 0x02	; 2
 e9a:	4d 91       	ld	r20, X+
 e9c:	5d 91       	ld	r21, X+
 e9e:	a4 0f       	add	r26, r20
 ea0:	b5 1f       	adc	r27, r21
 ea2:	ea 17       	cp	r30, r26
 ea4:	fb 07       	cpc	r31, r27
 ea6:	79 f4       	brne	.+30     	; 0xec6 <free+0xd2>
 ea8:	80 81       	ld	r24, Z
 eaa:	91 81       	ldd	r25, Z+1	; 0x01
 eac:	84 0f       	add	r24, r20
 eae:	95 1f       	adc	r25, r21
 eb0:	02 96       	adiw	r24, 0x02	; 2
 eb2:	d9 01       	movw	r26, r18
 eb4:	11 96       	adiw	r26, 0x01	; 1
 eb6:	9c 93       	st	X, r25
 eb8:	8e 93       	st	-X, r24
 eba:	82 81       	ldd	r24, Z+2	; 0x02
 ebc:	93 81       	ldd	r25, Z+3	; 0x03
 ebe:	13 96       	adiw	r26, 0x03	; 3
 ec0:	9c 93       	st	X, r25
 ec2:	8e 93       	st	-X, r24
 ec4:	12 97       	sbiw	r26, 0x02	; 2
 ec6:	e0 e0       	ldi	r30, 0x00	; 0
 ec8:	f0 e0       	ldi	r31, 0x00	; 0
 eca:	8a 81       	ldd	r24, Y+2	; 0x02
 ecc:	9b 81       	ldd	r25, Y+3	; 0x03
 ece:	00 97       	sbiw	r24, 0x00	; 0
 ed0:	19 f0       	breq	.+6      	; 0xed8 <free+0xe4>
 ed2:	fe 01       	movw	r30, r28
 ed4:	ec 01       	movw	r28, r24
 ed6:	f9 cf       	rjmp	.-14     	; 0xeca <free+0xd6>
 ed8:	ce 01       	movw	r24, r28
 eda:	02 96       	adiw	r24, 0x02	; 2
 edc:	28 81       	ld	r18, Y
 ede:	39 81       	ldd	r19, Y+1	; 0x01
 ee0:	82 0f       	add	r24, r18
 ee2:	93 1f       	adc	r25, r19
 ee4:	20 91 ba 01 	lds	r18, 0x01BA
 ee8:	30 91 bb 01 	lds	r19, 0x01BB
 eec:	28 17       	cp	r18, r24
 eee:	39 07       	cpc	r19, r25
 ef0:	69 f4       	brne	.+26     	; 0xf0c <free+0x118>
 ef2:	30 97       	sbiw	r30, 0x00	; 0
 ef4:	29 f4       	brne	.+10     	; 0xf00 <free+0x10c>
 ef6:	10 92 bd 01 	sts	0x01BD, r1
 efa:	10 92 bc 01 	sts	0x01BC, r1
 efe:	02 c0       	rjmp	.+4      	; 0xf04 <free+0x110>
 f00:	13 82       	std	Z+3, r1	; 0x03
 f02:	12 82       	std	Z+2, r1	; 0x02
 f04:	d0 93 bb 01 	sts	0x01BB, r29
 f08:	c0 93 ba 01 	sts	0x01BA, r28
 f0c:	df 91       	pop	r29
 f0e:	cf 91       	pop	r28
 f10:	08 95       	ret

00000f12 <_exit>:
 f12:	f8 94       	cli

00000f14 <__stop_program>:
 f14:	ff cf       	rjmp	.-2      	; 0xf14 <__stop_program>
