
mm_uc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b6  00800100  00000f46  00000fda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  008001b6  008001b6  00001090  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001090  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009dc  00000000  00000000  00001160  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000297  00000000  00000000  00001b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000439  00000000  00000000  00001dd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000274  00000000  00000000  0000220c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002c3  00000000  00000000  00002480  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000099c  00000000  00000000  00002743  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  000030df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e4       	ldi	r30, 0x46	; 70
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 3b       	cpi	r26, 0xB6	; 182
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 eb       	ldi	r26, 0xB6	; 182
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 3b       	cpi	r26, 0xBE	; 190
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 81 04 	call	0x902	; 0x902 <main>
  9e:	0c 94 a1 07 	jmp	0xf42	; 0xf42 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <UART_Init>:


void UART_Init( unsigned int ubrr)
{
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
  a6:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
  aa:	80 93 c4 00 	sts	0x00C4, r24
	
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  ae:	88 e1       	ldi	r24, 0x18	; 24
  b0:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
  b4:	8e e0       	ldi	r24, 0x0E	; 14
  b6:	80 93 c2 00 	sts	0x00C2, r24
  ba:	08 95       	ret

000000bc <UART_Transmit>:
}

void UART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
  bc:	e0 ec       	ldi	r30, 0xC0	; 192
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	90 81       	ld	r25, Z
  c2:	95 ff       	sbrs	r25, 5
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <UART_Transmit+0x4>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
  c6:	80 93 c6 00 	sts	0x00C6, r24
  ca:	08 95       	ret

000000cc <UART_TString>:

/* 
	UART_TString(char*)
	Transmits a string via UART
*/
void UART_TString(char* string){
  cc:	1f 93       	push	r17
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	ec 01       	movw	r28, r24
	uint8_t index = 0;
	while(string[index]){
  d4:	88 81       	ld	r24, Y
  d6:	88 23       	and	r24, r24
  d8:	51 f0       	breq	.+20     	; 0xee <UART_TString+0x22>
/* 
	UART_TString(char*)
	Transmits a string via UART
*/
void UART_TString(char* string){
	uint8_t index = 0;
  da:	10 e0       	ldi	r17, 0x00	; 0
	while(string[index]){
		UART_Transmit((unsigned char)string[index]);
  dc:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_Transmit>
		index++;
  e0:	1f 5f       	subi	r17, 0xFF	; 255
	UART_TString(char*)
	Transmits a string via UART
*/
void UART_TString(char* string){
	uint8_t index = 0;
	while(string[index]){
  e2:	fe 01       	movw	r30, r28
  e4:	e1 0f       	add	r30, r17
  e6:	f1 1d       	adc	r31, r1
  e8:	80 81       	ld	r24, Z
  ea:	81 11       	cpse	r24, r1
  ec:	f7 cf       	rjmp	.-18     	; 0xdc <UART_TString+0x10>
		UART_Transmit((unsigned char)string[index]);
		index++;
	}
}
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	1f 91       	pop	r17
  f4:	08 95       	ret

000000f6 <CRLF>:
/* 
	CRLF(void)
	Used for newlines (Carriage Return/Line Feed, reduces code)
*/
void CRLF(){
	UART_Transmit(0x0D);
  f6:	8d e0       	ldi	r24, 0x0D	; 13
  f8:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_Transmit>
	UART_Transmit(0x0A);
  fc:	8a e0       	ldi	r24, 0x0A	; 10
  fe:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_Transmit>
 102:	08 95       	ret

00000104 <println>:
	println(char*)
	Utilizes both CRLF and UART_TString to transmit a string with a newline
	automatically following after
*/
void println(char* string){
	UART_TString(string);
 104:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
	CRLF();
 108:	0e 94 7b 00 	call	0xf6	; 0xf6 <CRLF>
 10c:	08 95       	ret

0000010e <UART_Receive>:
}

unsigned char UART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
 10e:	e0 ec       	ldi	r30, 0xC0	; 192
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	88 23       	and	r24, r24
 116:	ec f7       	brge	.-6      	; 0x112 <UART_Receive+0x4>
	;
	/* Get and return received data from buffer */
	return UDR0;
 118:	80 91 c6 00 	lds	r24, 0x00C6
}
 11c:	08 95       	ret

0000011e <__vector_14>:

/* Interrupt based timer
	Credit: https://sites.google.com/site/qeewiki/books/avr-guide/timers-on-the-atmega328
*/

ISR (TIMER0_COMPA_vect){
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	2f 93       	push	r18
 12a:	3f 93       	push	r19
 12c:	4f 93       	push	r20
 12e:	5f 93       	push	r21
 130:	6f 93       	push	r22
 132:	7f 93       	push	r23
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
 138:	af 93       	push	r26
 13a:	bf 93       	push	r27
 13c:	ef 93       	push	r30
 13e:	ff 93       	push	r31
	mstime+=3.8; 
 140:	60 91 b6 01 	lds	r22, 0x01B6
 144:	70 91 b7 01 	lds	r23, 0x01B7
 148:	80 91 b8 01 	lds	r24, 0x01B8
 14c:	90 91 b9 01 	lds	r25, 0x01B9
 150:	23 e3       	ldi	r18, 0x33	; 51
 152:	33 e3       	ldi	r19, 0x33	; 51
 154:	43 e7       	ldi	r20, 0x73	; 115
 156:	50 e4       	ldi	r21, 0x40	; 64
 158:	0e 94 cd 04 	call	0x99a	; 0x99a <__addsf3>
 15c:	60 93 b6 01 	sts	0x01B6, r22
 160:	70 93 b7 01 	sts	0x01B7, r23
 164:	80 93 b8 01 	sts	0x01B8, r24
 168:	90 93 b9 01 	sts	0x01B9, r25
}
 16c:	ff 91       	pop	r31
 16e:	ef 91       	pop	r30
 170:	bf 91       	pop	r27
 172:	af 91       	pop	r26
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	7f 91       	pop	r23
 17a:	6f 91       	pop	r22
 17c:	5f 91       	pop	r21
 17e:	4f 91       	pop	r20
 180:	3f 91       	pop	r19
 182:	2f 91       	pop	r18
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <timer0_Init>:


void timer0_Init(void){
    TCCR0A |= (1 << WGM01);
 18e:	84 b5       	in	r24, 0x24	; 36
 190:	82 60       	ori	r24, 0x02	; 2
 192:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << WGM00);
 194:	84 b5       	in	r24, 0x24	; 36
 196:	81 60       	ori	r24, 0x01	; 1
 198:	84 bd       	out	0x24, r24	; 36
    TIMSK0 |= (1 << OCIE0A);
 19a:	ee e6       	ldi	r30, 0x6E	; 110
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	82 60       	ori	r24, 0x02	; 2
 1a2:	80 83       	st	Z, r24
    sei();         
 1a4:	78 94       	sei
    TCCR0B |= (1 << CS02);  
 1a6:	85 b5       	in	r24, 0x25	; 37
 1a8:	84 60       	ori	r24, 0x04	; 4
 1aa:	85 bd       	out	0x25, r24	; 37
 1ac:	08 95       	ret

000001ae <timer_init>:
}


void timer_init(void){
	timer0_Init();
 1ae:	0e 94 c7 00 	call	0x18e	; 0x18e <timer0_Init>
	
	// All PWM generators are set to not output on initial setup
	DDRD &= ~(1<<PD3); // A
 1b2:	53 98       	cbi	0x0a, 3	; 10
	DDRD &= ~(1<<PD5); // B
 1b4:	55 98       	cbi	0x0a, 5	; 10
	DDRD &= ~(1<<PD6); // C
 1b6:	56 98       	cbi	0x0a, 6	; 10
	DDRB &= ~(1<<PB1); // D
 1b8:	21 98       	cbi	0x04, 1	; 4
	DDRB &= ~(1<<PB2); // E
 1ba:	22 98       	cbi	0x04, 2	; 4
	DDRB &= ~(1<<PB3); // F
 1bc:	23 98       	cbi	0x04, 3	; 4
	
	// Configure timer registers
	// Timer 0
	TCCR0A |= (1 << COM0A0);
 1be:	84 b5       	in	r24, 0x24	; 36
 1c0:	80 64       	ori	r24, 0x40	; 64
 1c2:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0A1);
 1c4:	84 b5       	in	r24, 0x24	; 36
 1c6:	80 68       	ori	r24, 0x80	; 128
 1c8:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0B0);
 1ca:	84 b5       	in	r24, 0x24	; 36
 1cc:	80 61       	ori	r24, 0x10	; 16
 1ce:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0B1);
 1d0:	84 b5       	in	r24, 0x24	; 36
 1d2:	80 62       	ori	r24, 0x20	; 32
 1d4:	84 bd       	out	0x24, r24	; 36
	//TCCR0B |= (1 << WGM02);
	
	// Timer 1
	
	// Set OC1x behavior for inverting mode
	TCCR1A |= (1<<COM1A0);
 1d6:	e0 e8       	ldi	r30, 0x80	; 128
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	80 64       	ori	r24, 0x40	; 64
 1de:	80 83       	st	Z, r24
	TCCR1A |= (1<<COM1A1);
 1e0:	80 81       	ld	r24, Z
 1e2:	80 68       	ori	r24, 0x80	; 128
 1e4:	80 83       	st	Z, r24
	TCCR1A |= (1<<COM1B0);
 1e6:	80 81       	ld	r24, Z
 1e8:	80 61       	ori	r24, 0x10	; 16
 1ea:	80 83       	st	Z, r24
	TCCR1A |= (1<<COM1B1);
 1ec:	80 81       	ld	r24, Z
 1ee:	80 62       	ori	r24, 0x20	; 32
 1f0:	80 83       	st	Z, r24
	
	// Configure the 16 bit timer to operate in the 8 bit Fast-PWM	mode
	TCCR1A |= (1<<WGM10);
 1f2:	80 81       	ld	r24, Z
 1f4:	81 60       	ori	r24, 0x01	; 1
 1f6:	80 83       	st	Z, r24
	//TCCR1A &= ~(1<<WGM11);
	TCCR1B |= (1<<WGM12);
 1f8:	e1 e8       	ldi	r30, 0x81	; 129
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	88 60       	ori	r24, 0x08	; 8
 200:	80 83       	st	Z, r24
	//TCCR1B &= ~(1<<WGM13);

	// Set the clock source to the internal clock with a prescale divisor of 64
	TCCR1B |= (1<<CS10);
 202:	80 81       	ld	r24, Z
 204:	81 60       	ori	r24, 0x01	; 1
 206:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS11);
 208:	80 81       	ld	r24, Z
 20a:	82 60       	ori	r24, 0x02	; 2
 20c:	80 83       	st	Z, r24
	//TCCR1B &= ~(1<<CS12);
	
	
	//Timer 2
	TCCR2A |= (1<<COM2A1);
 20e:	e0 eb       	ldi	r30, 0xB0	; 176
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	80 81       	ld	r24, Z
 214:	80 68       	ori	r24, 0x80	; 128
 216:	80 83       	st	Z, r24
	TCCR2A |= (1<<COM2A0);
 218:	80 81       	ld	r24, Z
 21a:	80 64       	ori	r24, 0x40	; 64
 21c:	80 83       	st	Z, r24
	TCCR2A |= (1<<COM2B1);
 21e:	80 81       	ld	r24, Z
 220:	80 62       	ori	r24, 0x20	; 32
 222:	80 83       	st	Z, r24
	TCCR2A |= (1<<COM2B0);
 224:	80 81       	ld	r24, Z
 226:	80 61       	ori	r24, 0x10	; 16
 228:	80 83       	st	Z, r24
	
	TCCR2A |= (1<<WGM21);
 22a:	80 81       	ld	r24, Z
 22c:	82 60       	ori	r24, 0x02	; 2
 22e:	80 83       	st	Z, r24
	TCCR2A |= (1<<WGM20);
 230:	80 81       	ld	r24, Z
 232:	81 60       	ori	r24, 0x01	; 1
 234:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS22);
 236:	e1 eb       	ldi	r30, 0xB1	; 177
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	84 60       	ori	r24, 0x04	; 4
 23e:	80 83       	st	Z, r24
 240:	08 95       	ret

00000242 <pumpOn>:
#define DELTA 1000

void pumpOn(pump *pmp){
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	ec 01       	movw	r28, r24
	pmp->finished = 0;
 248:	19 86       	std	Y+9, r1	; 0x09
	UART_Transmit(pmp->label);
 24a:	88 81       	ld	r24, Y
 24c:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_Transmit>
	UART_TString(" is on!");
 250:	86 e0       	ldi	r24, 0x06	; 6
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
	switch(pmp->label){
 258:	88 81       	ld	r24, Y
 25a:	83 34       	cpi	r24, 0x43	; 67
 25c:	81 f0       	breq	.+32     	; 0x27e <pumpOn+0x3c>
 25e:	28 f4       	brcc	.+10     	; 0x26a <pumpOn+0x28>
 260:	81 34       	cpi	r24, 0x41	; 65
 262:	49 f0       	breq	.+18     	; 0x276 <pumpOn+0x34>
 264:	82 34       	cpi	r24, 0x42	; 66
 266:	49 f0       	breq	.+18     	; 0x27a <pumpOn+0x38>
 268:	11 c0       	rjmp	.+34     	; 0x28c <pumpOn+0x4a>
 26a:	85 34       	cpi	r24, 0x45	; 69
 26c:	61 f0       	breq	.+24     	; 0x286 <pumpOn+0x44>
 26e:	48 f0       	brcs	.+18     	; 0x282 <pumpOn+0x40>
 270:	86 34       	cpi	r24, 0x46	; 70
 272:	59 f0       	breq	.+22     	; 0x28a <pumpOn+0x48>
 274:	0b c0       	rjmp	.+22     	; 0x28c <pumpOn+0x4a>
		case 'A':
			DDRD |= 1<<PD3;
 276:	53 9a       	sbi	0x0a, 3	; 10
			break;
 278:	09 c0       	rjmp	.+18     	; 0x28c <pumpOn+0x4a>
		case 'B':
			DDRD |= 1<<PD5;
 27a:	55 9a       	sbi	0x0a, 5	; 10
			break;
 27c:	07 c0       	rjmp	.+14     	; 0x28c <pumpOn+0x4a>
		case 'C':
			DDRD |= 1<<PD6;
 27e:	56 9a       	sbi	0x0a, 6	; 10
			break;
 280:	05 c0       	rjmp	.+10     	; 0x28c <pumpOn+0x4a>
		case 'D':
			DDRB |= 1<<PB1;
 282:	21 9a       	sbi	0x04, 1	; 4
			break;
 284:	03 c0       	rjmp	.+6      	; 0x28c <pumpOn+0x4a>
		case 'E':
			DDRB |= 1<<PB2;
 286:	22 9a       	sbi	0x04, 2	; 4
			break;
 288:	01 c0       	rjmp	.+2      	; 0x28c <pumpOn+0x4a>
		case 'F':
			DDRB |= 1<<PB3;
 28a:	23 9a       	sbi	0x04, 3	; 4
			break;
		default:
			break;
	}
	CRLF();
 28c:	0e 94 7b 00 	call	0xf6	; 0xf6 <CRLF>
}
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	08 95       	ret

00000296 <pumpOff>:

void pumpOff(pump *pmp){
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	ec 01       	movw	r28, r24
	pmp->finished = 1;
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	89 87       	std	Y+9, r24	; 0x09
	UART_Transmit(pmp->label);
 2a0:	88 81       	ld	r24, Y
 2a2:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_Transmit>
	UART_TString(" is off!");
 2a6:	8e e0       	ldi	r24, 0x0E	; 14
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
	switch(pmp->label){
 2ae:	88 81       	ld	r24, Y
 2b0:	83 34       	cpi	r24, 0x43	; 67
 2b2:	81 f0       	breq	.+32     	; 0x2d4 <pumpOff+0x3e>
 2b4:	28 f4       	brcc	.+10     	; 0x2c0 <pumpOff+0x2a>
 2b6:	81 34       	cpi	r24, 0x41	; 65
 2b8:	49 f0       	breq	.+18     	; 0x2cc <pumpOff+0x36>
 2ba:	82 34       	cpi	r24, 0x42	; 66
 2bc:	49 f0       	breq	.+18     	; 0x2d0 <pumpOff+0x3a>
 2be:	11 c0       	rjmp	.+34     	; 0x2e2 <pumpOff+0x4c>
 2c0:	85 34       	cpi	r24, 0x45	; 69
 2c2:	61 f0       	breq	.+24     	; 0x2dc <pumpOff+0x46>
 2c4:	48 f0       	brcs	.+18     	; 0x2d8 <pumpOff+0x42>
 2c6:	86 34       	cpi	r24, 0x46	; 70
 2c8:	59 f0       	breq	.+22     	; 0x2e0 <pumpOff+0x4a>
 2ca:	0b c0       	rjmp	.+22     	; 0x2e2 <pumpOff+0x4c>
		case 'A':
			DDRD &= ~(1<<PD3);
 2cc:	53 98       	cbi	0x0a, 3	; 10
			break;
 2ce:	09 c0       	rjmp	.+18     	; 0x2e2 <pumpOff+0x4c>
		case 'B':
			DDRD &= ~(1<<PD5);
 2d0:	55 98       	cbi	0x0a, 5	; 10
			break;
 2d2:	07 c0       	rjmp	.+14     	; 0x2e2 <pumpOff+0x4c>
		case 'C':
			DDRD &= ~(1<<PD6); 
 2d4:	56 98       	cbi	0x0a, 6	; 10
			break;
 2d6:	05 c0       	rjmp	.+10     	; 0x2e2 <pumpOff+0x4c>
		case 'D':
			DDRB &= ~(1<<PB1);
 2d8:	21 98       	cbi	0x04, 1	; 4
			break;
 2da:	03 c0       	rjmp	.+6      	; 0x2e2 <pumpOff+0x4c>
		case 'E':
			DDRB &= ~(1<<PB2);
 2dc:	22 98       	cbi	0x04, 2	; 4
			break;
 2de:	01 c0       	rjmp	.+2      	; 0x2e2 <pumpOff+0x4c>
		case 'F':
			DDRB &= ~(1<<PB3);
 2e0:	23 98       	cbi	0x04, 3	; 4
			break;
		default:
			break;
	}
	CRLF();
 2e2:	0e 94 7b 00 	call	0xf6	; 0xf6 <CRLF>
}
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	08 95       	ret

000002ec <parallelDispense>:

void parallelDispense(request* req){
 2ec:	2f 92       	push	r2
 2ee:	3f 92       	push	r3
 2f0:	4f 92       	push	r4
 2f2:	5f 92       	push	r5
 2f4:	6f 92       	push	r6
 2f6:	7f 92       	push	r7
 2f8:	8f 92       	push	r8
 2fa:	9f 92       	push	r9
 2fc:	af 92       	push	r10
 2fe:	bf 92       	push	r11
 300:	cf 92       	push	r12
 302:	df 92       	push	r13
 304:	ef 92       	push	r14
 306:	ff 92       	push	r15
 308:	0f 93       	push	r16
 30a:	1f 93       	push	r17
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	8c 01       	movw	r16, r24
	
	println("Dispensing parallel pumps");
 312:	87 e1       	ldi	r24, 0x17	; 23
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	0e 94 82 00 	call	0x104	; 0x104 <println>
	
	/* Get the duration of the pump that will run the longest */
	float maxTime = 0;
	for(uint8_t i = 0; i < req->parPumps; i++){
 31a:	f8 01       	movw	r30, r16
 31c:	62 80       	ldd	r6, Z+2	; 0x02
 31e:	66 20       	and	r6, r6
 320:	09 f4       	brne	.+2      	; 0x324 <parallelDispense+0x38>
 322:	c9 c0       	rjmp	.+402    	; 0x4b6 <parallelDispense+0x1ca>
 324:	c0 81       	ld	r28, Z
 326:	d1 81       	ldd	r29, Z+1	; 0x01
 328:	f1 2c       	mov	r15, r1
void parallelDispense(request* req){
	
	println("Dispensing parallel pumps");
	
	/* Get the duration of the pump that will run the longest */
	float maxTime = 0;
 32a:	71 2c       	mov	r7, r1
 32c:	81 2c       	mov	r8, r1
 32e:	91 2c       	mov	r9, r1
 330:	a1 2c       	mov	r10, r1
	for(uint8_t i = 0; i < req->parPumps; i++){
		if(req->pumps[i].duration > maxTime)
 332:	bd 80       	ldd	r11, Y+5	; 0x05
 334:	ce 80       	ldd	r12, Y+6	; 0x06
 336:	df 80       	ldd	r13, Y+7	; 0x07
 338:	e8 84       	ldd	r14, Y+8	; 0x08
 33a:	27 2d       	mov	r18, r7
 33c:	38 2d       	mov	r19, r8
 33e:	49 2d       	mov	r20, r9
 340:	5a 2d       	mov	r21, r10
 342:	6b 2d       	mov	r22, r11
 344:	7c 2d       	mov	r23, r12
 346:	8d 2d       	mov	r24, r13
 348:	9e 2d       	mov	r25, r14
 34a:	0e 94 13 06 	call	0xc26	; 0xc26 <__gesf2>
 34e:	18 16       	cp	r1, r24
 350:	24 f4       	brge	.+8      	; 0x35a <parallelDispense+0x6e>
			maxTime = req->pumps[i].duration;
 352:	7b 2c       	mov	r7, r11
 354:	8c 2c       	mov	r8, r12
 356:	9d 2c       	mov	r9, r13
 358:	ae 2c       	mov	r10, r14
	
	println("Dispensing parallel pumps");
	
	/* Get the duration of the pump that will run the longest */
	float maxTime = 0;
	for(uint8_t i = 0; i < req->parPumps; i++){
 35a:	f3 94       	inc	r15
 35c:	2a 96       	adiw	r28, 0x0a	; 10
 35e:	f6 10       	cpse	r15, r6
 360:	e8 cf       	rjmp	.-48     	; 0x332 <parallelDispense+0x46>
 362:	81 c0       	rjmp	.+258    	; 0x466 <parallelDispense+0x17a>
	/* Set total pump time duration and initial time */ 
	float totalDuration = mstime + (unsigned int)(maxTime);
	float initialTime = mstime;

	for(uint8_t i = 0; i < req->parPumps; i++)
		pumpOn(&(req->pumps[i])); // Turn the pumps on
 364:	2c 2f       	mov	r18, r28
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	c9 01       	movw	r24, r18
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	22 0f       	add	r18, r18
 370:	33 1f       	adc	r19, r19
 372:	22 0f       	add	r18, r18
 374:	33 1f       	adc	r19, r19
 376:	22 0f       	add	r18, r18
 378:	33 1f       	adc	r19, r19
 37a:	28 0f       	add	r18, r24
 37c:	39 1f       	adc	r19, r25
 37e:	f8 01       	movw	r30, r16
 380:	80 81       	ld	r24, Z
 382:	91 81       	ldd	r25, Z+1	; 0x01
 384:	82 0f       	add	r24, r18
 386:	93 1f       	adc	r25, r19
 388:	0e 94 21 01 	call	0x242	; 0x242 <pumpOn>
	maxTime *= 1000;
	/* Set total pump time duration and initial time */ 
	float totalDuration = mstime + (unsigned int)(maxTime);
	float initialTime = mstime;

	for(uint8_t i = 0; i < req->parPumps; i++)
 38c:	cf 5f       	subi	r28, 0xFF	; 255
 38e:	f8 01       	movw	r30, r16
 390:	82 81       	ldd	r24, Z+2	; 0x02
 392:	c8 17       	cp	r28, r24
 394:	38 f3       	brcs	.-50     	; 0x364 <parallelDispense+0x78>
 396:	49 c0       	rjmp	.+146    	; 0x42a <parallelDispense+0x13e>
		pumpOn(&(req->pumps[i])); // Turn the pumps on
	
	while(mstime < (totalDuration + DELTA)){
		for(uint8_t i = 0; i < req->parPumps; i++){
			if((mstime - initialTime) >= (float)((req->pumps[i].duration)*1000) ){
 398:	60 91 b6 01 	lds	r22, 0x01B6
 39c:	70 91 b7 01 	lds	r23, 0x01B7
 3a0:	80 91 b8 01 	lds	r24, 0x01B8
 3a4:	90 91 b9 01 	lds	r25, 0x01B9
 3a8:	c3 2d       	mov	r28, r3
 3aa:	d0 e0       	ldi	r29, 0x00	; 0
 3ac:	9e 01       	movw	r18, r28
 3ae:	22 0f       	add	r18, r18
 3b0:	33 1f       	adc	r19, r19
 3b2:	cc 0f       	add	r28, r28
 3b4:	dd 1f       	adc	r29, r29
 3b6:	cc 0f       	add	r28, r28
 3b8:	dd 1f       	adc	r29, r29
 3ba:	cc 0f       	add	r28, r28
 3bc:	dd 1f       	adc	r29, r29
 3be:	c2 0f       	add	r28, r18
 3c0:	d3 1f       	adc	r29, r19
 3c2:	f8 01       	movw	r30, r16
 3c4:	20 81       	ld	r18, Z
 3c6:	31 81       	ldd	r19, Z+1	; 0x01
 3c8:	c2 0f       	add	r28, r18
 3ca:	d3 1f       	adc	r29, r19
 3cc:	a3 01       	movw	r20, r6
 3ce:	92 01       	movw	r18, r4
 3d0:	0e 94 cc 04 	call	0x998	; 0x998 <__subsf3>
 3d4:	6b 01       	movw	r12, r22
 3d6:	7c 01       	movw	r14, r24
 3d8:	20 e0       	ldi	r18, 0x00	; 0
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	4a e7       	ldi	r20, 0x7A	; 122
 3de:	54 e4       	ldi	r21, 0x44	; 68
 3e0:	6d 81       	ldd	r22, Y+5	; 0x05
 3e2:	7e 81       	ldd	r23, Y+6	; 0x06
 3e4:	8f 81       	ldd	r24, Y+7	; 0x07
 3e6:	98 85       	ldd	r25, Y+8	; 0x08
 3e8:	0e 94 17 06 	call	0xc2e	; 0xc2e <__mulsf3>
 3ec:	9b 01       	movw	r18, r22
 3ee:	ac 01       	movw	r20, r24
 3f0:	c7 01       	movw	r24, r14
 3f2:	b6 01       	movw	r22, r12
 3f4:	0e 94 13 06 	call	0xc26	; 0xc26 <__gesf2>
 3f8:	88 23       	and	r24, r24
 3fa:	3c f0       	brlt	.+14     	; 0x40a <parallelDispense+0x11e>
				if(req->pumps[i].finished == 0){
 3fc:	89 85       	ldd	r24, Y+9	; 0x09
 3fe:	81 11       	cpse	r24, r1
 400:	0d c0       	rjmp	.+26     	; 0x41c <parallelDispense+0x130>
					pumpOff(&(req->pumps[i]));
 402:	ce 01       	movw	r24, r28
 404:	0e 94 4b 01 	call	0x296	; 0x296 <pumpOff>
 408:	09 c0       	rjmp	.+18     	; 0x41c <parallelDispense+0x130>
				}
			}
			else{
				UART_Transmit(req->pumps[i].label);
 40a:	88 81       	ld	r24, Y
 40c:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_Transmit>
				UART_TString(" is still running");
 410:	81 e3       	ldi	r24, 0x31	; 49
 412:	91 e0       	ldi	r25, 0x01	; 1
 414:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
				CRLF();
 418:	0e 94 7b 00 	call	0xf6	; 0xf6 <CRLF>

	for(uint8_t i = 0; i < req->parPumps; i++)
		pumpOn(&(req->pumps[i])); // Turn the pumps on
	
	while(mstime < (totalDuration + DELTA)){
		for(uint8_t i = 0; i < req->parPumps; i++){
 41c:	33 94       	inc	r3
 41e:	f8 01       	movw	r30, r16
 420:	82 81       	ldd	r24, Z+2	; 0x02
 422:	38 16       	cp	r3, r24
 424:	08 f4       	brcc	.+2      	; 0x428 <parallelDispense+0x13c>
 426:	b8 cf       	rjmp	.-144    	; 0x398 <parallelDispense+0xac>
 428:	01 c0       	rjmp	.+2      	; 0x42c <parallelDispense+0x140>
 42a:	21 2c       	mov	r2, r1
	float initialTime = mstime;

	for(uint8_t i = 0; i < req->parPumps; i++)
		pumpOn(&(req->pumps[i])); // Turn the pumps on
	
	while(mstime < (totalDuration + DELTA)){
 42c:	c0 90 b6 01 	lds	r12, 0x01B6
 430:	d0 90 b7 01 	lds	r13, 0x01B7
 434:	e0 90 b8 01 	lds	r14, 0x01B8
 438:	f0 90 b9 01 	lds	r15, 0x01B9
 43c:	20 e0       	ldi	r18, 0x00	; 0
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	4a e7       	ldi	r20, 0x7A	; 122
 442:	54 e4       	ldi	r21, 0x44	; 68
 444:	c5 01       	movw	r24, r10
 446:	b4 01       	movw	r22, r8
 448:	0e 94 cd 04 	call	0x99a	; 0x99a <__addsf3>
 44c:	a7 01       	movw	r20, r14
 44e:	96 01       	movw	r18, r12
 450:	0e 94 13 06 	call	0xc26	; 0xc26 <__gesf2>
 454:	18 16       	cp	r1, r24
 456:	0c f0       	brlt	.+2      	; 0x45a <parallelDispense+0x16e>
 458:	46 c0       	rjmp	.+140    	; 0x4e6 <parallelDispense+0x1fa>
		for(uint8_t i = 0; i < req->parPumps; i++){
 45a:	f8 01       	movw	r30, r16
 45c:	82 81       	ldd	r24, Z+2	; 0x02
 45e:	88 23       	and	r24, r24
 460:	29 f3       	breq	.-54     	; 0x42c <parallelDispense+0x140>
 462:	32 2c       	mov	r3, r2
 464:	99 cf       	rjmp	.-206    	; 0x398 <parallelDispense+0xac>
		if(req->pumps[i].duration > maxTime)
			maxTime = req->pumps[i].duration;
	}
	maxTime *= 1000;
	/* Set total pump time duration and initial time */ 
	float totalDuration = mstime + (unsigned int)(maxTime);
 466:	c0 90 b6 01 	lds	r12, 0x01B6
 46a:	d0 90 b7 01 	lds	r13, 0x01B7
 46e:	e0 90 b8 01 	lds	r14, 0x01B8
 472:	f0 90 b9 01 	lds	r15, 0x01B9
	float maxTime = 0;
	for(uint8_t i = 0; i < req->parPumps; i++){
		if(req->pumps[i].duration > maxTime)
			maxTime = req->pumps[i].duration;
	}
	maxTime *= 1000;
 476:	20 e0       	ldi	r18, 0x00	; 0
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	4a e7       	ldi	r20, 0x7A	; 122
 47c:	54 e4       	ldi	r21, 0x44	; 68
 47e:	67 2d       	mov	r22, r7
 480:	78 2d       	mov	r23, r8
 482:	89 2d       	mov	r24, r9
 484:	9a 2d       	mov	r25, r10
 486:	0e 94 17 06 	call	0xc2e	; 0xc2e <__mulsf3>
	/* Set total pump time duration and initial time */ 
	float totalDuration = mstime + (unsigned int)(maxTime);
 48a:	0e 94 35 05 	call	0xa6a	; 0xa6a <__fixunssfsi>
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	0e 94 61 05 	call	0xac2	; 0xac2 <__floatunsisf>
 496:	a7 01       	movw	r20, r14
 498:	96 01       	movw	r18, r12
 49a:	0e 94 cd 04 	call	0x99a	; 0x99a <__addsf3>
 49e:	4b 01       	movw	r8, r22
 4a0:	5c 01       	movw	r10, r24
	float initialTime = mstime;
 4a2:	40 90 b6 01 	lds	r4, 0x01B6
 4a6:	50 90 b7 01 	lds	r5, 0x01B7
 4aa:	60 90 b8 01 	lds	r6, 0x01B8
 4ae:	70 90 b9 01 	lds	r7, 0x01B9

	for(uint8_t i = 0; i < req->parPumps; i++)
 4b2:	c0 e0       	ldi	r28, 0x00	; 0
 4b4:	57 cf       	rjmp	.-338    	; 0x364 <parallelDispense+0x78>
		if(req->pumps[i].duration > maxTime)
			maxTime = req->pumps[i].duration;
	}
	maxTime *= 1000;
	/* Set total pump time duration and initial time */ 
	float totalDuration = mstime + (unsigned int)(maxTime);
 4b6:	60 91 b6 01 	lds	r22, 0x01B6
 4ba:	70 91 b7 01 	lds	r23, 0x01B7
 4be:	80 91 b8 01 	lds	r24, 0x01B8
 4c2:	90 91 b9 01 	lds	r25, 0x01B9
 4c6:	20 e0       	ldi	r18, 0x00	; 0
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	a9 01       	movw	r20, r18
 4cc:	0e 94 cd 04 	call	0x99a	; 0x99a <__addsf3>
 4d0:	4b 01       	movw	r8, r22
 4d2:	5c 01       	movw	r10, r24
	float initialTime = mstime;
 4d4:	40 90 b6 01 	lds	r4, 0x01B6
 4d8:	50 90 b7 01 	lds	r5, 0x01B7
 4dc:	60 90 b8 01 	lds	r6, 0x01B8
 4e0:	70 90 b9 01 	lds	r7, 0x01B9
 4e4:	a2 cf       	rjmp	.-188    	; 0x42a <parallelDispense+0x13e>
			}
		}
	}
	

}
 4e6:	df 91       	pop	r29
 4e8:	cf 91       	pop	r28
 4ea:	1f 91       	pop	r17
 4ec:	0f 91       	pop	r16
 4ee:	ff 90       	pop	r15
 4f0:	ef 90       	pop	r14
 4f2:	df 90       	pop	r13
 4f4:	cf 90       	pop	r12
 4f6:	bf 90       	pop	r11
 4f8:	af 90       	pop	r10
 4fa:	9f 90       	pop	r9
 4fc:	8f 90       	pop	r8
 4fe:	7f 90       	pop	r7
 500:	6f 90       	pop	r6
 502:	5f 90       	pop	r5
 504:	4f 90       	pop	r4
 506:	3f 90       	pop	r3
 508:	2f 90       	pop	r2
 50a:	08 95       	ret

0000050c <sequentialDispense>:

void sequentialDispense(request* req){
 50c:	8f 92       	push	r8
 50e:	9f 92       	push	r9
 510:	af 92       	push	r10
 512:	bf 92       	push	r11
 514:	cf 92       	push	r12
 516:	df 92       	push	r13
 518:	ef 92       	push	r14
 51a:	ff 92       	push	r15
 51c:	0f 93       	push	r16
 51e:	1f 93       	push	r17
 520:	cf 93       	push	r28
 522:	df 93       	push	r29
 524:	8c 01       	movw	r16, r24
	
	println("Dispensing sequential pumps");
 526:	83 e4       	ldi	r24, 0x43	; 67
 528:	91 e0       	ldi	r25, 0x01	; 1
 52a:	0e 94 82 00 	call	0x104	; 0x104 <println>
	
	uint8_t totalPumps = req->parPumps + req->seqPumps;
 52e:	f8 01       	movw	r30, r16
 530:	92 80       	ldd	r9, Z+2	; 0x02
 532:	83 80       	ldd	r8, Z+3	; 0x03
 534:	89 0c       	add	r8, r9
	for(uint8_t i = req->parPumps; i < totalPumps; i++){
 536:	98 14       	cp	r9, r8
 538:	08 f0       	brcs	.+2      	; 0x53c <sequentialDispense+0x30>
 53a:	47 c0       	rjmp	.+142    	; 0x5ca <sequentialDispense+0xbe>
		float totalDuration = mstime + (float)((req->pumps[i].duration)*1000);
 53c:	89 2d       	mov	r24, r9
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	ec 01       	movw	r28, r24
 542:	cc 0f       	add	r28, r28
 544:	dd 1f       	adc	r29, r29
 546:	88 0f       	add	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	88 0f       	add	r24, r24
 54c:	99 1f       	adc	r25, r25
 54e:	88 0f       	add	r24, r24
 550:	99 1f       	adc	r25, r25
 552:	c8 0f       	add	r28, r24
 554:	d9 1f       	adc	r29, r25
 556:	f8 01       	movw	r30, r16
 558:	a0 80       	ld	r10, Z
 55a:	b1 80       	ldd	r11, Z+1	; 0x01
 55c:	ac 0e       	add	r10, r28
 55e:	bd 1e       	adc	r11, r29
 560:	c0 90 b6 01 	lds	r12, 0x01B6
 564:	d0 90 b7 01 	lds	r13, 0x01B7
 568:	e0 90 b8 01 	lds	r14, 0x01B8
 56c:	f0 90 b9 01 	lds	r15, 0x01B9
 570:	20 e0       	ldi	r18, 0x00	; 0
 572:	30 e0       	ldi	r19, 0x00	; 0
 574:	4a e7       	ldi	r20, 0x7A	; 122
 576:	54 e4       	ldi	r21, 0x44	; 68
 578:	f5 01       	movw	r30, r10
 57a:	65 81       	ldd	r22, Z+5	; 0x05
 57c:	76 81       	ldd	r23, Z+6	; 0x06
 57e:	87 81       	ldd	r24, Z+7	; 0x07
 580:	90 85       	ldd	r25, Z+8	; 0x08
 582:	0e 94 17 06 	call	0xc2e	; 0xc2e <__mulsf3>
 586:	a7 01       	movw	r20, r14
 588:	96 01       	movw	r18, r12
 58a:	0e 94 cd 04 	call	0x99a	; 0x99a <__addsf3>
 58e:	6b 01       	movw	r12, r22
 590:	7c 01       	movw	r14, r24
		pumpOn(&(req->pumps[i]));
 592:	c5 01       	movw	r24, r10
 594:	0e 94 21 01 	call	0x242	; 0x242 <pumpOn>
		while(mstime < totalDuration){ 
 598:	20 91 b6 01 	lds	r18, 0x01B6
 59c:	30 91 b7 01 	lds	r19, 0x01B7
 5a0:	40 91 b8 01 	lds	r20, 0x01B8
 5a4:	50 91 b9 01 	lds	r21, 0x01B9
 5a8:	c7 01       	movw	r24, r14
 5aa:	b6 01       	movw	r22, r12
 5ac:	0e 94 13 06 	call	0xc26	; 0xc26 <__gesf2>
 5b0:	18 16       	cp	r1, r24
 5b2:	94 f3       	brlt	.-28     	; 0x598 <sequentialDispense+0x8c>
			/* Something can be ran here if necessary */ 
		}
		pumpOff(&(req->pumps[i]));
 5b4:	f8 01       	movw	r30, r16
 5b6:	80 81       	ld	r24, Z
 5b8:	91 81       	ldd	r25, Z+1	; 0x01
 5ba:	8c 0f       	add	r24, r28
 5bc:	9d 1f       	adc	r25, r29
 5be:	0e 94 4b 01 	call	0x296	; 0x296 <pumpOff>
void sequentialDispense(request* req){
	
	println("Dispensing sequential pumps");
	
	uint8_t totalPumps = req->parPumps + req->seqPumps;
	for(uint8_t i = req->parPumps; i < totalPumps; i++){
 5c2:	93 94       	inc	r9
 5c4:	98 14       	cp	r9, r8
 5c6:	08 f4       	brcc	.+2      	; 0x5ca <sequentialDispense+0xbe>
 5c8:	b9 cf       	rjmp	.-142    	; 0x53c <sequentialDispense+0x30>
		while(mstime < totalDuration){ 
			/* Something can be ran here if necessary */ 
		}
		pumpOff(&(req->pumps[i]));
	}	
}
 5ca:	df 91       	pop	r29
 5cc:	cf 91       	pop	r28
 5ce:	1f 91       	pop	r17
 5d0:	0f 91       	pop	r16
 5d2:	ff 90       	pop	r15
 5d4:	ef 90       	pop	r14
 5d6:	df 90       	pop	r13
 5d8:	cf 90       	pop	r12
 5da:	bf 90       	pop	r11
 5dc:	af 90       	pop	r10
 5de:	9f 90       	pop	r9
 5e0:	8f 90       	pop	r8
 5e2:	08 95       	ret

000005e4 <init>:
#include "timer.h"
#include "pump.h"
#include "utils.c"

void init(void){
	UART_Init(MYUBRR);
 5e4:	88 e6       	ldi	r24, 0x68	; 104
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_Init>
	timer_init();
 5ec:	0e 94 d7 00 	call	0x1ae	; 0x1ae <timer_init>

	// Set the counter limit
	OCR2B = 200; //A 
 5f0:	88 ec       	ldi	r24, 0xC8	; 200
 5f2:	80 93 b4 00 	sts	0x00B4, r24
	OCR0B = 100; //B
 5f6:	84 e6       	ldi	r24, 0x64	; 100
 5f8:	88 bd       	out	0x28, r24	; 40
	OCR0A = 100; //C	
 5fa:	87 bd       	out	0x27, r24	; 39
	OCR1A = 150; //D
 5fc:	86 e9       	ldi	r24, 0x96	; 150
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	90 93 89 00 	sts	0x0089, r25
 604:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 150; //E
 608:	90 93 8b 00 	sts	0x008B, r25
 60c:	80 93 8a 00 	sts	0x008A, r24
	OCR2A = 150; //F
 610:	86 e9       	ldi	r24, 0x96	; 150
 612:	80 93 b3 00 	sts	0x00B3, r24
 616:	08 95       	ret

00000618 <processRequest>:


}

request* processRequest(){
 618:	6f 92       	push	r6
 61a:	7f 92       	push	r7
 61c:	8f 92       	push	r8
 61e:	9f 92       	push	r9
 620:	af 92       	push	r10
 622:	bf 92       	push	r11
 624:	cf 92       	push	r12
 626:	df 92       	push	r13
 628:	ef 92       	push	r14
 62a:	ff 92       	push	r15
 62c:	0f 93       	push	r16
 62e:	1f 93       	push	r17
 630:	cf 93       	push	r28
 632:	df 93       	push	r29
	pump* pumps = (pump*)malloc(sizeof(pump)*6);
 634:	8c e3       	ldi	r24, 0x3C	; 60
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <malloc>
 63c:	5c 01       	movw	r10, r24
	UART_TString("OK");
 63e:	8f e5       	ldi	r24, 0x5F	; 95
 640:	91 e0       	ldi	r25, 0x01	; 1
 642:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
	unsigned char parPumps = UART_Receive();
 646:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 64a:	c8 2f       	mov	r28, r24
	UART_TString("OK");
 64c:	8f e5       	ldi	r24, 0x5F	; 95
 64e:	91 e0       	ldi	r25, 0x01	; 1
 650:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
	unsigned char seqPumps = UART_Receive();
 654:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
	parPumps -= 48; seqPumps -= 48;
 658:	0f 2e       	mov	r0, r31
 65a:	f0 ed       	ldi	r31, 0xD0	; 208
 65c:	8f 2e       	mov	r8, r31
 65e:	f0 2d       	mov	r31, r0
 660:	8c 0e       	add	r8, r28
 662:	0f 2e       	mov	r0, r31
 664:	f0 ed       	ldi	r31, 0xD0	; 208
 666:	7f 2e       	mov	r7, r31
 668:	f0 2d       	mov	r31, r0
 66a:	78 0e       	add	r7, r24
	
	// Error checking
	if(parPumps + seqPumps > MAXPUMPS)
 66c:	87 2d       	mov	r24, r7
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	88 0d       	add	r24, r8
 672:	91 1d       	adc	r25, r1
 674:	07 97       	sbiw	r24, 0x07	; 7
 676:	0c f0       	brlt	.+2      	; 0x67a <processRequest+0x62>
 678:	09 c1       	rjmp	.+530    	; 0x88c <processRequest+0x274>
		return NULL;
					
	if(parPumps > MAXPUMPS || parPumps < 0)
 67a:	86 e0       	ldi	r24, 0x06	; 6
 67c:	88 15       	cp	r24, r8
 67e:	08 f4       	brcc	.+2      	; 0x682 <processRequest+0x6a>
 680:	08 c1       	rjmp	.+528    	; 0x892 <processRequest+0x27a>
		return NULL;
		
	if(seqPumps > MAXPUMPS || seqPumps < 0)
 682:	87 15       	cp	r24, r7
 684:	08 f4       	brcc	.+2      	; 0x688 <processRequest+0x70>
 686:	08 c1       	rjmp	.+528    	; 0x898 <processRequest+0x280>
	
	/* Handle request */
	
	// Process parallel pump information
	uint8_t i = 0;
	if(parPumps > 0){
 688:	88 20       	and	r8, r8
 68a:	09 f4       	brne	.+2      	; 0x68e <processRequest+0x76>
 68c:	65 c0       	rjmp	.+202    	; 0x758 <processRequest+0x140>
 68e:	e5 01       	movw	r28, r10
 690:	91 2c       	mov	r9, r1
		for(; i < parPumps; i++){
			UART_TString("OK");
 692:	8f e5       	ldi	r24, 0x5F	; 95
 694:	91 e0       	ldi	r25, 0x01	; 1
 696:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
			// Get label info
			pumps[i].label = UART_Receive();
 69a:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 69e:	88 83       	st	Y, r24
			if(pumps[i].label < 65 || pumps[i].label > 70 )
 6a0:	81 54       	subi	r24, 0x41	; 65
 6a2:	86 30       	cpi	r24, 0x06	; 6
 6a4:	08 f0       	brcs	.+2      	; 0x6a8 <processRequest+0x90>
 6a6:	fb c0       	rjmp	.+502    	; 0x89e <processRequest+0x286>
				return NULL;
			UART_TString("OK");
 6a8:	8f e5       	ldi	r24, 0x5F	; 95
 6aa:	91 e0       	ldi	r25, 0x01	; 1
 6ac:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
			// Get amount info
			uint8_t ones = UART_Receive() - 48;
 6b0:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 6b4:	0f 2e       	mov	r0, r31
 6b6:	f0 ed       	ldi	r31, 0xD0	; 208
 6b8:	ff 2e       	mov	r15, r31
 6ba:	f0 2d       	mov	r31, r0
 6bc:	f8 0e       	add	r15, r24
			if(ones < 0 || ones > 8 )
 6be:	e8 e0       	ldi	r30, 0x08	; 8
 6c0:	ef 15       	cp	r30, r15
 6c2:	08 f4       	brcc	.+2      	; 0x6c6 <processRequest+0xae>
 6c4:	ef c0       	rjmp	.+478    	; 0x8a4 <processRequest+0x28c>
				return NULL;
			if(UART_Receive() != '.')
 6c6:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 6ca:	8e 32       	cpi	r24, 0x2E	; 46
 6cc:	09 f0       	breq	.+2      	; 0x6d0 <processRequest+0xb8>
 6ce:	ed c0       	rjmp	.+474    	; 0x8aa <processRequest+0x292>
				return NULL;			
			uint8_t tens = UART_Receive() - 48;
 6d0:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 6d4:	0f 2e       	mov	r0, r31
 6d6:	f0 ed       	ldi	r31, 0xD0	; 208
 6d8:	6f 2e       	mov	r6, r31
 6da:	f0 2d       	mov	r31, r0
 6dc:	68 0e       	add	r6, r24
			if(tens < 0 || tens > 9 )
 6de:	f9 e0       	ldi	r31, 0x09	; 9
 6e0:	f6 15       	cp	r31, r6
 6e2:	08 f4       	brcc	.+2      	; 0x6e6 <processRequest+0xce>
 6e4:	e5 c0       	rjmp	.+458    	; 0x8b0 <processRequest+0x298>
				return NULL;			
			pumps[i].amount = (float)ones + (float)(tens)*0.1;
 6e6:	6f 2d       	mov	r22, r15
 6e8:	70 e0       	ldi	r23, 0x00	; 0
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	0e 94 61 05 	call	0xac2	; 0xac2 <__floatunsisf>
 6f2:	6b 01       	movw	r12, r22
 6f4:	7c 01       	movw	r14, r24
 6f6:	66 2d       	mov	r22, r6
 6f8:	70 e0       	ldi	r23, 0x00	; 0
 6fa:	80 e0       	ldi	r24, 0x00	; 0
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	0e 94 61 05 	call	0xac2	; 0xac2 <__floatunsisf>
 702:	2d ec       	ldi	r18, 0xCD	; 205
 704:	3c ec       	ldi	r19, 0xCC	; 204
 706:	4c ec       	ldi	r20, 0xCC	; 204
 708:	5d e3       	ldi	r21, 0x3D	; 61
 70a:	0e 94 17 06 	call	0xc2e	; 0xc2e <__mulsf3>
 70e:	9b 01       	movw	r18, r22
 710:	ac 01       	movw	r20, r24
 712:	c7 01       	movw	r24, r14
 714:	b6 01       	movw	r22, r12
 716:	0e 94 cd 04 	call	0x99a	; 0x99a <__addsf3>
 71a:	6b 01       	movw	r12, r22
 71c:	7c 01       	movw	r14, r24
 71e:	fe 01       	movw	r30, r28
 720:	61 83       	std	Z+1, r22	; 0x01
 722:	72 83       	std	Z+2, r23	; 0x02
 724:	83 83       	std	Z+3, r24	; 0x03
 726:	94 83       	std	Z+4, r25	; 0x04
			if(pumps[i].amount < 0 || pumps[i].amount > 8)
 728:	20 e0       	ldi	r18, 0x00	; 0
 72a:	30 e0       	ldi	r19, 0x00	; 0
 72c:	a9 01       	movw	r20, r18
 72e:	0e 94 31 05 	call	0xa62	; 0xa62 <__cmpsf2>
 732:	88 23       	and	r24, r24
 734:	0c f4       	brge	.+2      	; 0x738 <processRequest+0x120>
 736:	bf c0       	rjmp	.+382    	; 0x8b6 <processRequest+0x29e>
 738:	20 e0       	ldi	r18, 0x00	; 0
 73a:	30 e0       	ldi	r19, 0x00	; 0
 73c:	40 e0       	ldi	r20, 0x00	; 0
 73e:	51 e4       	ldi	r21, 0x41	; 65
 740:	c7 01       	movw	r24, r14
 742:	b6 01       	movw	r22, r12
 744:	0e 94 13 06 	call	0xc26	; 0xc26 <__gesf2>
 748:	18 16       	cp	r1, r24
 74a:	0c f4       	brge	.+2      	; 0x74e <processRequest+0x136>
 74c:	b7 c0       	rjmp	.+366    	; 0x8bc <processRequest+0x2a4>
	/* Handle request */
	
	// Process parallel pump information
	uint8_t i = 0;
	if(parPumps > 0){
		for(; i < parPumps; i++){
 74e:	93 94       	inc	r9
 750:	2a 96       	adiw	r28, 0x0a	; 10
 752:	89 10       	cpse	r8, r9
 754:	9e cf       	rjmp	.-196    	; 0x692 <processRequest+0x7a>
 756:	01 c0       	rjmp	.+2      	; 0x75a <processRequest+0x142>
	
	
	/* Handle request */
	
	// Process parallel pump information
	uint8_t i = 0;
 758:	91 2c       	mov	r9, r1
			if(pumps[i].amount < 0 || pumps[i].amount > 8)
				return NULL;
		}
	}
	// Process sequential pump information 
	uint8_t j = i + seqPumps;
 75a:	19 2d       	mov	r17, r9
 75c:	17 0d       	add	r17, r7
	if(seqPumps > 0){
 75e:	77 20       	and	r7, r7
 760:	11 f0       	breq	.+4      	; 0x766 <processRequest+0x14e>
		for(; i < j; i++){
 762:	91 16       	cp	r9, r17
 764:	18 f0       	brcs	.+6      	; 0x76c <processRequest+0x154>
				return NULL;
		}
	}
	
	// Convert all amounts to durations
	for(uint8_t index = 0; index < j; index++)
 766:	11 11       	cpse	r17, r1
 768:	6e c0       	rjmp	.+220    	; 0x846 <processRequest+0x22e>
 76a:	81 c0       	rjmp	.+258    	; 0x86e <processRequest+0x256>
	}
	// Process sequential pump information 
	uint8_t j = i + seqPumps;
	if(seqPumps > 0){
		for(; i < j; i++){
			UART_TString("OK");
 76c:	8f e5       	ldi	r24, 0x5F	; 95
 76e:	91 e0       	ldi	r25, 0x01	; 1
 770:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
			// Get label info
			pumps[i].label = UART_Receive();
 774:	89 2d       	mov	r24, r9
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	ec 01       	movw	r28, r24
 77a:	cc 0f       	add	r28, r28
 77c:	dd 1f       	adc	r29, r29
 77e:	88 0f       	add	r24, r24
 780:	99 1f       	adc	r25, r25
 782:	88 0f       	add	r24, r24
 784:	99 1f       	adc	r25, r25
 786:	88 0f       	add	r24, r24
 788:	99 1f       	adc	r25, r25
 78a:	c8 0f       	add	r28, r24
 78c:	d9 1f       	adc	r29, r25
 78e:	ca 0d       	add	r28, r10
 790:	db 1d       	adc	r29, r11
 792:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 796:	88 83       	st	Y, r24
			if(pumps[i].label < 65 || pumps[i].label > 70)
 798:	81 54       	subi	r24, 0x41	; 65
 79a:	86 30       	cpi	r24, 0x06	; 6
 79c:	08 f0       	brcs	.+2      	; 0x7a0 <processRequest+0x188>
 79e:	91 c0       	rjmp	.+290    	; 0x8c2 <processRequest+0x2aa>
				return NULL;
			UART_TString("OK");
 7a0:	8f e5       	ldi	r24, 0x5F	; 95
 7a2:	91 e0       	ldi	r25, 0x01	; 1
 7a4:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
			// Get amount info
			uint8_t ones = UART_Receive() - 48;
 7a8:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 7ac:	00 ed       	ldi	r16, 0xD0	; 208
 7ae:	08 0f       	add	r16, r24
			if(ones < 0 || ones > 8 )
 7b0:	09 30       	cpi	r16, 0x09	; 9
 7b2:	08 f0       	brcs	.+2      	; 0x7b6 <processRequest+0x19e>
 7b4:	89 c0       	rjmp	.+274    	; 0x8c8 <processRequest+0x2b0>
				return NULL;
			if(UART_Receive() != '.')
 7b6:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 7ba:	8e 32       	cpi	r24, 0x2E	; 46
 7bc:	09 f0       	breq	.+2      	; 0x7c0 <processRequest+0x1a8>
 7be:	87 c0       	rjmp	.+270    	; 0x8ce <processRequest+0x2b6>
				return NULL;			
			uint8_t tens = UART_Receive() - 48;
 7c0:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 7c4:	0f 2e       	mov	r0, r31
 7c6:	f0 ed       	ldi	r31, 0xD0	; 208
 7c8:	6f 2e       	mov	r6, r31
 7ca:	f0 2d       	mov	r31, r0
 7cc:	68 0e       	add	r6, r24
			if(tens < 0 || tens > 9 )
 7ce:	f9 e0       	ldi	r31, 0x09	; 9
 7d0:	f6 15       	cp	r31, r6
 7d2:	08 f4       	brcc	.+2      	; 0x7d6 <processRequest+0x1be>
 7d4:	7f c0       	rjmp	.+254    	; 0x8d4 <processRequest+0x2bc>
				return NULL;			
			pumps[i].amount = (float)ones + (float)(tens)*0.1;
 7d6:	60 2f       	mov	r22, r16
 7d8:	70 e0       	ldi	r23, 0x00	; 0
 7da:	80 e0       	ldi	r24, 0x00	; 0
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	0e 94 61 05 	call	0xac2	; 0xac2 <__floatunsisf>
 7e2:	6b 01       	movw	r12, r22
 7e4:	7c 01       	movw	r14, r24
 7e6:	66 2d       	mov	r22, r6
 7e8:	70 e0       	ldi	r23, 0x00	; 0
 7ea:	80 e0       	ldi	r24, 0x00	; 0
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	0e 94 61 05 	call	0xac2	; 0xac2 <__floatunsisf>
 7f2:	2d ec       	ldi	r18, 0xCD	; 205
 7f4:	3c ec       	ldi	r19, 0xCC	; 204
 7f6:	4c ec       	ldi	r20, 0xCC	; 204
 7f8:	5d e3       	ldi	r21, 0x3D	; 61
 7fa:	0e 94 17 06 	call	0xc2e	; 0xc2e <__mulsf3>
 7fe:	9b 01       	movw	r18, r22
 800:	ac 01       	movw	r20, r24
 802:	c7 01       	movw	r24, r14
 804:	b6 01       	movw	r22, r12
 806:	0e 94 cd 04 	call	0x99a	; 0x99a <__addsf3>
 80a:	6b 01       	movw	r12, r22
 80c:	7c 01       	movw	r14, r24
 80e:	69 83       	std	Y+1, r22	; 0x01
 810:	7a 83       	std	Y+2, r23	; 0x02
 812:	8b 83       	std	Y+3, r24	; 0x03
 814:	9c 83       	std	Y+4, r25	; 0x04
			if(pumps[i].amount < 0 || pumps[i].amount > 8)
 816:	20 e0       	ldi	r18, 0x00	; 0
 818:	30 e0       	ldi	r19, 0x00	; 0
 81a:	a9 01       	movw	r20, r18
 81c:	0e 94 31 05 	call	0xa62	; 0xa62 <__cmpsf2>
 820:	88 23       	and	r24, r24
 822:	0c f4       	brge	.+2      	; 0x826 <processRequest+0x20e>
 824:	5a c0       	rjmp	.+180    	; 0x8da <processRequest+0x2c2>
 826:	20 e0       	ldi	r18, 0x00	; 0
 828:	30 e0       	ldi	r19, 0x00	; 0
 82a:	40 e0       	ldi	r20, 0x00	; 0
 82c:	51 e4       	ldi	r21, 0x41	; 65
 82e:	c7 01       	movw	r24, r14
 830:	b6 01       	movw	r22, r12
 832:	0e 94 13 06 	call	0xc26	; 0xc26 <__gesf2>
 836:	18 16       	cp	r1, r24
 838:	0c f4       	brge	.+2      	; 0x83c <processRequest+0x224>
 83a:	52 c0       	rjmp	.+164    	; 0x8e0 <processRequest+0x2c8>
		}
	}
	// Process sequential pump information 
	uint8_t j = i + seqPumps;
	if(seqPumps > 0){
		for(; i < j; i++){
 83c:	93 94       	inc	r9
 83e:	91 16       	cp	r9, r17
 840:	08 f4       	brcc	.+2      	; 0x844 <processRequest+0x22c>
 842:	94 cf       	rjmp	.-216    	; 0x76c <processRequest+0x154>
 844:	90 cf       	rjmp	.-224    	; 0x766 <processRequest+0x14e>
 846:	e5 01       	movw	r28, r10
				return NULL;
		}
	}
	
	// Convert all amounts to durations
	for(uint8_t index = 0; index < j; index++)
 848:	00 e0       	ldi	r16, 0x00	; 0
		pumps[index].duration = pumps[index].amount * A2DRATIO;
 84a:	2d ec       	ldi	r18, 0xCD	; 205
 84c:	3c ec       	ldi	r19, 0xCC	; 204
 84e:	4c eb       	ldi	r20, 0xBC	; 188
 850:	50 e4       	ldi	r21, 0x40	; 64
 852:	69 81       	ldd	r22, Y+1	; 0x01
 854:	7a 81       	ldd	r23, Y+2	; 0x02
 856:	8b 81       	ldd	r24, Y+3	; 0x03
 858:	9c 81       	ldd	r25, Y+4	; 0x04
 85a:	0e 94 17 06 	call	0xc2e	; 0xc2e <__mulsf3>
 85e:	6d 83       	std	Y+5, r22	; 0x05
 860:	7e 83       	std	Y+6, r23	; 0x06
 862:	8f 83       	std	Y+7, r24	; 0x07
 864:	98 87       	std	Y+8, r25	; 0x08
				return NULL;
		}
	}
	
	// Convert all amounts to durations
	for(uint8_t index = 0; index < j; index++)
 866:	0f 5f       	subi	r16, 0xFF	; 255
 868:	2a 96       	adiw	r28, 0x0a	; 10
 86a:	01 13       	cpse	r16, r17
 86c:	ee cf       	rjmp	.-36     	; 0x84a <processRequest+0x232>
		pumps[index].duration = pumps[index].amount * A2DRATIO;

	
	UART_TString("OK");
 86e:	8f e5       	ldi	r24, 0x5F	; 95
 870:	91 e0       	ldi	r25, 0x01	; 1
 872:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
	
	/* Create and return the request */
	
	request* req = (request*)malloc(sizeof(request));
 876:	84 e0       	ldi	r24, 0x04	; 4
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <malloc>
 87e:	fc 01       	movw	r30, r24
	req->pumps = pumps;
 880:	b1 82       	std	Z+1, r11	; 0x01
 882:	a0 82       	st	Z, r10
	req->parPumps = parPumps;
 884:	82 82       	std	Z+2, r8	; 0x02
	req->seqPumps = seqPumps;
 886:	73 82       	std	Z+3, r7	; 0x03
	return req;
 888:	9f 2f       	mov	r25, r31
 88a:	2c c0       	rjmp	.+88     	; 0x8e4 <processRequest+0x2cc>
	unsigned char seqPumps = UART_Receive();
	parPumps -= 48; seqPumps -= 48;
	
	// Error checking
	if(parPumps + seqPumps > MAXPUMPS)
		return NULL;
 88c:	80 e0       	ldi	r24, 0x00	; 0
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	29 c0       	rjmp	.+82     	; 0x8e4 <processRequest+0x2cc>
					
	if(parPumps > MAXPUMPS || parPumps < 0)
		return NULL;
 892:	80 e0       	ldi	r24, 0x00	; 0
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	26 c0       	rjmp	.+76     	; 0x8e4 <processRequest+0x2cc>
		
	if(seqPumps > MAXPUMPS || seqPumps < 0)
		return NULL;
 898:	80 e0       	ldi	r24, 0x00	; 0
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	23 c0       	rjmp	.+70     	; 0x8e4 <processRequest+0x2cc>
		for(; i < parPumps; i++){
			UART_TString("OK");
			// Get label info
			pumps[i].label = UART_Receive();
			if(pumps[i].label < 65 || pumps[i].label > 70 )
				return NULL;
 89e:	80 e0       	ldi	r24, 0x00	; 0
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	20 c0       	rjmp	.+64     	; 0x8e4 <processRequest+0x2cc>
			UART_TString("OK");
			// Get amount info
			uint8_t ones = UART_Receive() - 48;
			if(ones < 0 || ones > 8 )
				return NULL;
 8a4:	80 e0       	ldi	r24, 0x00	; 0
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	1d c0       	rjmp	.+58     	; 0x8e4 <processRequest+0x2cc>
			if(UART_Receive() != '.')
				return NULL;			
 8aa:	80 e0       	ldi	r24, 0x00	; 0
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	1a c0       	rjmp	.+52     	; 0x8e4 <processRequest+0x2cc>
			uint8_t tens = UART_Receive() - 48;
			if(tens < 0 || tens > 9 )
				return NULL;			
 8b0:	80 e0       	ldi	r24, 0x00	; 0
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	17 c0       	rjmp	.+46     	; 0x8e4 <processRequest+0x2cc>
			pumps[i].amount = (float)ones + (float)(tens)*0.1;
			if(pumps[i].amount < 0 || pumps[i].amount > 8)
				return NULL;
 8b6:	80 e0       	ldi	r24, 0x00	; 0
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	14 c0       	rjmp	.+40     	; 0x8e4 <processRequest+0x2cc>
 8bc:	80 e0       	ldi	r24, 0x00	; 0
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	11 c0       	rjmp	.+34     	; 0x8e4 <processRequest+0x2cc>
		for(; i < j; i++){
			UART_TString("OK");
			// Get label info
			pumps[i].label = UART_Receive();
			if(pumps[i].label < 65 || pumps[i].label > 70)
				return NULL;
 8c2:	80 e0       	ldi	r24, 0x00	; 0
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	0e c0       	rjmp	.+28     	; 0x8e4 <processRequest+0x2cc>
			UART_TString("OK");
			// Get amount info
			uint8_t ones = UART_Receive() - 48;
			if(ones < 0 || ones > 8 )
				return NULL;
 8c8:	80 e0       	ldi	r24, 0x00	; 0
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	0b c0       	rjmp	.+22     	; 0x8e4 <processRequest+0x2cc>
			if(UART_Receive() != '.')
				return NULL;			
 8ce:	80 e0       	ldi	r24, 0x00	; 0
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	08 c0       	rjmp	.+16     	; 0x8e4 <processRequest+0x2cc>
			uint8_t tens = UART_Receive() - 48;
			if(tens < 0 || tens > 9 )
				return NULL;			
 8d4:	80 e0       	ldi	r24, 0x00	; 0
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	05 c0       	rjmp	.+10     	; 0x8e4 <processRequest+0x2cc>
			pumps[i].amount = (float)ones + (float)(tens)*0.1;
			if(pumps[i].amount < 0 || pumps[i].amount > 8)
				return NULL;
 8da:	80 e0       	ldi	r24, 0x00	; 0
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	02 c0       	rjmp	.+4      	; 0x8e4 <processRequest+0x2cc>
 8e0:	80 e0       	ldi	r24, 0x00	; 0
 8e2:	90 e0       	ldi	r25, 0x00	; 0
	request* req = (request*)malloc(sizeof(request));
	req->pumps = pumps;
	req->parPumps = parPumps;
	req->seqPumps = seqPumps;
	return req;
}
 8e4:	df 91       	pop	r29
 8e6:	cf 91       	pop	r28
 8e8:	1f 91       	pop	r17
 8ea:	0f 91       	pop	r16
 8ec:	ff 90       	pop	r15
 8ee:	ef 90       	pop	r14
 8f0:	df 90       	pop	r13
 8f2:	cf 90       	pop	r12
 8f4:	bf 90       	pop	r11
 8f6:	af 90       	pop	r10
 8f8:	9f 90       	pop	r9
 8fa:	8f 90       	pop	r8
 8fc:	7f 90       	pop	r7
 8fe:	6f 90       	pop	r6
 900:	08 95       	ret

00000902 <main>:
	* Change UART transmitted messages as necessary 
*/

/* Entry point */
int main(void){
	init();
 902:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <init>
	request* req;
	/* Primary loop */
	// Infinite loop is justified in this situation
	for(;;){	
		req = NULL;
 906:	00 e0       	ldi	r16, 0x00	; 0
 908:	10 e0       	ldi	r17, 0x00	; 0
		println("Ready.");
 90a:	82 e6       	ldi	r24, 0x62	; 98
 90c:	91 e0       	ldi	r25, 0x01	; 1
 90e:	0e 94 82 00 	call	0x104	; 0x104 <println>
		unsigned char temp = UART_Receive();
 912:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
		if(temp == 'R'){
 916:	82 35       	cpi	r24, 0x52	; 82
 918:	89 f5       	brne	.+98     	; 0x97c <main+0x7a>
			if((req = processRequest()) == NULL){
 91a:	0e 94 0c 03 	call	0x618	; 0x618 <processRequest>
 91e:	ec 01       	movw	r28, r24
 920:	00 97       	sbiw	r24, 0x00	; 0
 922:	39 f4       	brne	.+14     	; 0x932 <main+0x30>
				CRLF();
 924:	0e 94 7b 00 	call	0xf6	; 0xf6 <CRLF>
				println("ERROR: Failed to process request!");
 928:	89 e6       	ldi	r24, 0x69	; 105
 92a:	91 e0       	ldi	r25, 0x01	; 1
 92c:	0e 94 82 00 	call	0x104	; 0x104 <println>
				continue;
 930:	ec cf       	rjmp	.-40     	; 0x90a <main+0x8>
			}
			CRLF();
 932:	0e 94 7b 00 	call	0xf6	; 0xf6 <CRLF>
			if(req->parPumps > 0){
 936:	8a 81       	ldd	r24, Y+2	; 0x02
 938:	88 23       	and	r24, r24
 93a:	61 f0       	breq	.+24     	; 0x954 <main+0x52>
				parallelDispense(req);
 93c:	ce 01       	movw	r24, r28
 93e:	0e 94 76 01 	call	0x2ec	; 0x2ec <parallelDispense>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 942:	2f ef       	ldi	r18, 0xFF	; 255
 944:	83 ed       	ldi	r24, 0xD3	; 211
 946:	90 e3       	ldi	r25, 0x30	; 48
 948:	21 50       	subi	r18, 0x01	; 1
 94a:	80 40       	sbci	r24, 0x00	; 0
 94c:	90 40       	sbci	r25, 0x00	; 0
 94e:	e1 f7       	brne	.-8      	; 0x948 <main+0x46>
 950:	00 c0       	rjmp	.+0      	; 0x952 <main+0x50>
 952:	00 00       	nop
				_delay_ms(MODEDELAY); // Delay between modes, will tweak
			}
			if(req->seqPumps > 0){
 954:	8b 81       	ldd	r24, Y+3	; 0x03
 956:	88 23       	and	r24, r24
 958:	61 f0       	breq	.+24     	; 0x972 <main+0x70>
				sequentialDispense(req);
 95a:	ce 01       	movw	r24, r28
 95c:	0e 94 86 02 	call	0x50c	; 0x50c <sequentialDispense>
 960:	2f ef       	ldi	r18, 0xFF	; 255
 962:	83 ed       	ldi	r24, 0xD3	; 211
 964:	90 e3       	ldi	r25, 0x30	; 48
 966:	21 50       	subi	r18, 0x01	; 1
 968:	80 40       	sbci	r24, 0x00	; 0
 96a:	90 40       	sbci	r25, 0x00	; 0
 96c:	e1 f7       	brne	.-8      	; 0x966 <main+0x64>
 96e:	00 c0       	rjmp	.+0      	; 0x970 <main+0x6e>
 970:	00 00       	nop
				_delay_ms(MODEDELAY); // Delay between modes, will tweak
			}
			println("Request completed");			
 972:	8b e8       	ldi	r24, 0x8B	; 139
 974:	91 e0       	ldi	r25, 0x01	; 1
 976:	0e 94 82 00 	call	0x104	; 0x104 <println>
 97a:	06 c0       	rjmp	.+12     	; 0x988 <main+0x86>
		}
		else
			println("Invalid request command");
 97c:	8d e9       	ldi	r24, 0x9D	; 157
 97e:	91 e0       	ldi	r25, 0x01	; 1
 980:	0e 94 82 00 	call	0x104	; 0x104 <println>
	init();
	request* req;
	/* Primary loop */
	// Infinite loop is justified in this situation
	for(;;){	
		req = NULL;
 984:	c0 2f       	mov	r28, r16
 986:	d1 2f       	mov	r29, r17
			println("Request completed");			
		}
		else
			println("Invalid request command");
		
		free(req->pumps); 
 988:	88 81       	ld	r24, Y
 98a:	99 81       	ldd	r25, Y+1	; 0x01
 98c:	0e 94 12 07 	call	0xe24	; 0xe24 <free>
		free(req);		
 990:	ce 01       	movw	r24, r28
 992:	0e 94 12 07 	call	0xe24	; 0xe24 <free>
 996:	b9 cf       	rjmp	.-142    	; 0x90a <main+0x8>

00000998 <__subsf3>:
 998:	50 58       	subi	r21, 0x80	; 128

0000099a <__addsf3>:
 99a:	bb 27       	eor	r27, r27
 99c:	aa 27       	eor	r26, r26
 99e:	0e d0       	rcall	.+28     	; 0x9bc <__addsf3x>
 9a0:	08 c1       	rjmp	.+528    	; 0xbb2 <__fp_round>
 9a2:	f9 d0       	rcall	.+498    	; 0xb96 <__fp_pscA>
 9a4:	30 f0       	brcs	.+12     	; 0x9b2 <__addsf3+0x18>
 9a6:	fe d0       	rcall	.+508    	; 0xba4 <__fp_pscB>
 9a8:	20 f0       	brcs	.+8      	; 0x9b2 <__addsf3+0x18>
 9aa:	31 f4       	brne	.+12     	; 0x9b8 <__addsf3+0x1e>
 9ac:	9f 3f       	cpi	r25, 0xFF	; 255
 9ae:	11 f4       	brne	.+4      	; 0x9b4 <__addsf3+0x1a>
 9b0:	1e f4       	brtc	.+6      	; 0x9b8 <__addsf3+0x1e>
 9b2:	ee c0       	rjmp	.+476    	; 0xb90 <__fp_nan>
 9b4:	0e f4       	brtc	.+2      	; 0x9b8 <__addsf3+0x1e>
 9b6:	e0 95       	com	r30
 9b8:	e7 fb       	bst	r30, 7
 9ba:	e4 c0       	rjmp	.+456    	; 0xb84 <__fp_inf>

000009bc <__addsf3x>:
 9bc:	e9 2f       	mov	r30, r25
 9be:	0a d1       	rcall	.+532    	; 0xbd4 <__fp_split3>
 9c0:	80 f3       	brcs	.-32     	; 0x9a2 <__addsf3+0x8>
 9c2:	ba 17       	cp	r27, r26
 9c4:	62 07       	cpc	r22, r18
 9c6:	73 07       	cpc	r23, r19
 9c8:	84 07       	cpc	r24, r20
 9ca:	95 07       	cpc	r25, r21
 9cc:	18 f0       	brcs	.+6      	; 0x9d4 <__addsf3x+0x18>
 9ce:	71 f4       	brne	.+28     	; 0x9ec <__addsf3x+0x30>
 9d0:	9e f5       	brtc	.+102    	; 0xa38 <__addsf3x+0x7c>
 9d2:	22 c1       	rjmp	.+580    	; 0xc18 <__fp_zero>
 9d4:	0e f4       	brtc	.+2      	; 0x9d8 <__addsf3x+0x1c>
 9d6:	e0 95       	com	r30
 9d8:	0b 2e       	mov	r0, r27
 9da:	ba 2f       	mov	r27, r26
 9dc:	a0 2d       	mov	r26, r0
 9de:	0b 01       	movw	r0, r22
 9e0:	b9 01       	movw	r22, r18
 9e2:	90 01       	movw	r18, r0
 9e4:	0c 01       	movw	r0, r24
 9e6:	ca 01       	movw	r24, r20
 9e8:	a0 01       	movw	r20, r0
 9ea:	11 24       	eor	r1, r1
 9ec:	ff 27       	eor	r31, r31
 9ee:	59 1b       	sub	r21, r25
 9f0:	99 f0       	breq	.+38     	; 0xa18 <__addsf3x+0x5c>
 9f2:	59 3f       	cpi	r21, 0xF9	; 249
 9f4:	50 f4       	brcc	.+20     	; 0xa0a <__addsf3x+0x4e>
 9f6:	50 3e       	cpi	r21, 0xE0	; 224
 9f8:	68 f1       	brcs	.+90     	; 0xa54 <__addsf3x+0x98>
 9fa:	1a 16       	cp	r1, r26
 9fc:	f0 40       	sbci	r31, 0x00	; 0
 9fe:	a2 2f       	mov	r26, r18
 a00:	23 2f       	mov	r18, r19
 a02:	34 2f       	mov	r19, r20
 a04:	44 27       	eor	r20, r20
 a06:	58 5f       	subi	r21, 0xF8	; 248
 a08:	f3 cf       	rjmp	.-26     	; 0x9f0 <__addsf3x+0x34>
 a0a:	46 95       	lsr	r20
 a0c:	37 95       	ror	r19
 a0e:	27 95       	ror	r18
 a10:	a7 95       	ror	r26
 a12:	f0 40       	sbci	r31, 0x00	; 0
 a14:	53 95       	inc	r21
 a16:	c9 f7       	brne	.-14     	; 0xa0a <__addsf3x+0x4e>
 a18:	7e f4       	brtc	.+30     	; 0xa38 <__addsf3x+0x7c>
 a1a:	1f 16       	cp	r1, r31
 a1c:	ba 0b       	sbc	r27, r26
 a1e:	62 0b       	sbc	r22, r18
 a20:	73 0b       	sbc	r23, r19
 a22:	84 0b       	sbc	r24, r20
 a24:	ba f0       	brmi	.+46     	; 0xa54 <__addsf3x+0x98>
 a26:	91 50       	subi	r25, 0x01	; 1
 a28:	a1 f0       	breq	.+40     	; 0xa52 <__addsf3x+0x96>
 a2a:	ff 0f       	add	r31, r31
 a2c:	bb 1f       	adc	r27, r27
 a2e:	66 1f       	adc	r22, r22
 a30:	77 1f       	adc	r23, r23
 a32:	88 1f       	adc	r24, r24
 a34:	c2 f7       	brpl	.-16     	; 0xa26 <__addsf3x+0x6a>
 a36:	0e c0       	rjmp	.+28     	; 0xa54 <__addsf3x+0x98>
 a38:	ba 0f       	add	r27, r26
 a3a:	62 1f       	adc	r22, r18
 a3c:	73 1f       	adc	r23, r19
 a3e:	84 1f       	adc	r24, r20
 a40:	48 f4       	brcc	.+18     	; 0xa54 <__addsf3x+0x98>
 a42:	87 95       	ror	r24
 a44:	77 95       	ror	r23
 a46:	67 95       	ror	r22
 a48:	b7 95       	ror	r27
 a4a:	f7 95       	ror	r31
 a4c:	9e 3f       	cpi	r25, 0xFE	; 254
 a4e:	08 f0       	brcs	.+2      	; 0xa52 <__addsf3x+0x96>
 a50:	b3 cf       	rjmp	.-154    	; 0x9b8 <__addsf3+0x1e>
 a52:	93 95       	inc	r25
 a54:	88 0f       	add	r24, r24
 a56:	08 f0       	brcs	.+2      	; 0xa5a <__addsf3x+0x9e>
 a58:	99 27       	eor	r25, r25
 a5a:	ee 0f       	add	r30, r30
 a5c:	97 95       	ror	r25
 a5e:	87 95       	ror	r24
 a60:	08 95       	ret

00000a62 <__cmpsf2>:
 a62:	6c d0       	rcall	.+216    	; 0xb3c <__fp_cmp>
 a64:	08 f4       	brcc	.+2      	; 0xa68 <__cmpsf2+0x6>
 a66:	81 e0       	ldi	r24, 0x01	; 1
 a68:	08 95       	ret

00000a6a <__fixunssfsi>:
 a6a:	bc d0       	rcall	.+376    	; 0xbe4 <__fp_splitA>
 a6c:	88 f0       	brcs	.+34     	; 0xa90 <__fixunssfsi+0x26>
 a6e:	9f 57       	subi	r25, 0x7F	; 127
 a70:	90 f0       	brcs	.+36     	; 0xa96 <__fixunssfsi+0x2c>
 a72:	b9 2f       	mov	r27, r25
 a74:	99 27       	eor	r25, r25
 a76:	b7 51       	subi	r27, 0x17	; 23
 a78:	a0 f0       	brcs	.+40     	; 0xaa2 <__fixunssfsi+0x38>
 a7a:	d1 f0       	breq	.+52     	; 0xab0 <__fixunssfsi+0x46>
 a7c:	66 0f       	add	r22, r22
 a7e:	77 1f       	adc	r23, r23
 a80:	88 1f       	adc	r24, r24
 a82:	99 1f       	adc	r25, r25
 a84:	1a f0       	brmi	.+6      	; 0xa8c <__fixunssfsi+0x22>
 a86:	ba 95       	dec	r27
 a88:	c9 f7       	brne	.-14     	; 0xa7c <__fixunssfsi+0x12>
 a8a:	12 c0       	rjmp	.+36     	; 0xab0 <__fixunssfsi+0x46>
 a8c:	b1 30       	cpi	r27, 0x01	; 1
 a8e:	81 f0       	breq	.+32     	; 0xab0 <__fixunssfsi+0x46>
 a90:	c3 d0       	rcall	.+390    	; 0xc18 <__fp_zero>
 a92:	b1 e0       	ldi	r27, 0x01	; 1
 a94:	08 95       	ret
 a96:	c0 c0       	rjmp	.+384    	; 0xc18 <__fp_zero>
 a98:	67 2f       	mov	r22, r23
 a9a:	78 2f       	mov	r23, r24
 a9c:	88 27       	eor	r24, r24
 a9e:	b8 5f       	subi	r27, 0xF8	; 248
 aa0:	39 f0       	breq	.+14     	; 0xab0 <__fixunssfsi+0x46>
 aa2:	b9 3f       	cpi	r27, 0xF9	; 249
 aa4:	cc f3       	brlt	.-14     	; 0xa98 <__fixunssfsi+0x2e>
 aa6:	86 95       	lsr	r24
 aa8:	77 95       	ror	r23
 aaa:	67 95       	ror	r22
 aac:	b3 95       	inc	r27
 aae:	d9 f7       	brne	.-10     	; 0xaa6 <__fixunssfsi+0x3c>
 ab0:	3e f4       	brtc	.+14     	; 0xac0 <__fixunssfsi+0x56>
 ab2:	90 95       	com	r25
 ab4:	80 95       	com	r24
 ab6:	70 95       	com	r23
 ab8:	61 95       	neg	r22
 aba:	7f 4f       	sbci	r23, 0xFF	; 255
 abc:	8f 4f       	sbci	r24, 0xFF	; 255
 abe:	9f 4f       	sbci	r25, 0xFF	; 255
 ac0:	08 95       	ret

00000ac2 <__floatunsisf>:
 ac2:	e8 94       	clt
 ac4:	09 c0       	rjmp	.+18     	; 0xad8 <__floatsisf+0x12>

00000ac6 <__floatsisf>:
 ac6:	97 fb       	bst	r25, 7
 ac8:	3e f4       	brtc	.+14     	; 0xad8 <__floatsisf+0x12>
 aca:	90 95       	com	r25
 acc:	80 95       	com	r24
 ace:	70 95       	com	r23
 ad0:	61 95       	neg	r22
 ad2:	7f 4f       	sbci	r23, 0xFF	; 255
 ad4:	8f 4f       	sbci	r24, 0xFF	; 255
 ad6:	9f 4f       	sbci	r25, 0xFF	; 255
 ad8:	99 23       	and	r25, r25
 ada:	a9 f0       	breq	.+42     	; 0xb06 <__floatsisf+0x40>
 adc:	f9 2f       	mov	r31, r25
 ade:	96 e9       	ldi	r25, 0x96	; 150
 ae0:	bb 27       	eor	r27, r27
 ae2:	93 95       	inc	r25
 ae4:	f6 95       	lsr	r31
 ae6:	87 95       	ror	r24
 ae8:	77 95       	ror	r23
 aea:	67 95       	ror	r22
 aec:	b7 95       	ror	r27
 aee:	f1 11       	cpse	r31, r1
 af0:	f8 cf       	rjmp	.-16     	; 0xae2 <__floatsisf+0x1c>
 af2:	fa f4       	brpl	.+62     	; 0xb32 <__floatsisf+0x6c>
 af4:	bb 0f       	add	r27, r27
 af6:	11 f4       	brne	.+4      	; 0xafc <__floatsisf+0x36>
 af8:	60 ff       	sbrs	r22, 0
 afa:	1b c0       	rjmp	.+54     	; 0xb32 <__floatsisf+0x6c>
 afc:	6f 5f       	subi	r22, 0xFF	; 255
 afe:	7f 4f       	sbci	r23, 0xFF	; 255
 b00:	8f 4f       	sbci	r24, 0xFF	; 255
 b02:	9f 4f       	sbci	r25, 0xFF	; 255
 b04:	16 c0       	rjmp	.+44     	; 0xb32 <__floatsisf+0x6c>
 b06:	88 23       	and	r24, r24
 b08:	11 f0       	breq	.+4      	; 0xb0e <__floatsisf+0x48>
 b0a:	96 e9       	ldi	r25, 0x96	; 150
 b0c:	11 c0       	rjmp	.+34     	; 0xb30 <__floatsisf+0x6a>
 b0e:	77 23       	and	r23, r23
 b10:	21 f0       	breq	.+8      	; 0xb1a <__floatsisf+0x54>
 b12:	9e e8       	ldi	r25, 0x8E	; 142
 b14:	87 2f       	mov	r24, r23
 b16:	76 2f       	mov	r23, r22
 b18:	05 c0       	rjmp	.+10     	; 0xb24 <__floatsisf+0x5e>
 b1a:	66 23       	and	r22, r22
 b1c:	71 f0       	breq	.+28     	; 0xb3a <__floatsisf+0x74>
 b1e:	96 e8       	ldi	r25, 0x86	; 134
 b20:	86 2f       	mov	r24, r22
 b22:	70 e0       	ldi	r23, 0x00	; 0
 b24:	60 e0       	ldi	r22, 0x00	; 0
 b26:	2a f0       	brmi	.+10     	; 0xb32 <__floatsisf+0x6c>
 b28:	9a 95       	dec	r25
 b2a:	66 0f       	add	r22, r22
 b2c:	77 1f       	adc	r23, r23
 b2e:	88 1f       	adc	r24, r24
 b30:	da f7       	brpl	.-10     	; 0xb28 <__floatsisf+0x62>
 b32:	88 0f       	add	r24, r24
 b34:	96 95       	lsr	r25
 b36:	87 95       	ror	r24
 b38:	97 f9       	bld	r25, 7
 b3a:	08 95       	ret

00000b3c <__fp_cmp>:
 b3c:	99 0f       	add	r25, r25
 b3e:	00 08       	sbc	r0, r0
 b40:	55 0f       	add	r21, r21
 b42:	aa 0b       	sbc	r26, r26
 b44:	e0 e8       	ldi	r30, 0x80	; 128
 b46:	fe ef       	ldi	r31, 0xFE	; 254
 b48:	16 16       	cp	r1, r22
 b4a:	17 06       	cpc	r1, r23
 b4c:	e8 07       	cpc	r30, r24
 b4e:	f9 07       	cpc	r31, r25
 b50:	c0 f0       	brcs	.+48     	; 0xb82 <__fp_cmp+0x46>
 b52:	12 16       	cp	r1, r18
 b54:	13 06       	cpc	r1, r19
 b56:	e4 07       	cpc	r30, r20
 b58:	f5 07       	cpc	r31, r21
 b5a:	98 f0       	brcs	.+38     	; 0xb82 <__fp_cmp+0x46>
 b5c:	62 1b       	sub	r22, r18
 b5e:	73 0b       	sbc	r23, r19
 b60:	84 0b       	sbc	r24, r20
 b62:	95 0b       	sbc	r25, r21
 b64:	39 f4       	brne	.+14     	; 0xb74 <__fp_cmp+0x38>
 b66:	0a 26       	eor	r0, r26
 b68:	61 f0       	breq	.+24     	; 0xb82 <__fp_cmp+0x46>
 b6a:	23 2b       	or	r18, r19
 b6c:	24 2b       	or	r18, r20
 b6e:	25 2b       	or	r18, r21
 b70:	21 f4       	brne	.+8      	; 0xb7a <__fp_cmp+0x3e>
 b72:	08 95       	ret
 b74:	0a 26       	eor	r0, r26
 b76:	09 f4       	brne	.+2      	; 0xb7a <__fp_cmp+0x3e>
 b78:	a1 40       	sbci	r26, 0x01	; 1
 b7a:	a6 95       	lsr	r26
 b7c:	8f ef       	ldi	r24, 0xFF	; 255
 b7e:	81 1d       	adc	r24, r1
 b80:	81 1d       	adc	r24, r1
 b82:	08 95       	ret

00000b84 <__fp_inf>:
 b84:	97 f9       	bld	r25, 7
 b86:	9f 67       	ori	r25, 0x7F	; 127
 b88:	80 e8       	ldi	r24, 0x80	; 128
 b8a:	70 e0       	ldi	r23, 0x00	; 0
 b8c:	60 e0       	ldi	r22, 0x00	; 0
 b8e:	08 95       	ret

00000b90 <__fp_nan>:
 b90:	9f ef       	ldi	r25, 0xFF	; 255
 b92:	80 ec       	ldi	r24, 0xC0	; 192
 b94:	08 95       	ret

00000b96 <__fp_pscA>:
 b96:	00 24       	eor	r0, r0
 b98:	0a 94       	dec	r0
 b9a:	16 16       	cp	r1, r22
 b9c:	17 06       	cpc	r1, r23
 b9e:	18 06       	cpc	r1, r24
 ba0:	09 06       	cpc	r0, r25
 ba2:	08 95       	ret

00000ba4 <__fp_pscB>:
 ba4:	00 24       	eor	r0, r0
 ba6:	0a 94       	dec	r0
 ba8:	12 16       	cp	r1, r18
 baa:	13 06       	cpc	r1, r19
 bac:	14 06       	cpc	r1, r20
 bae:	05 06       	cpc	r0, r21
 bb0:	08 95       	ret

00000bb2 <__fp_round>:
 bb2:	09 2e       	mov	r0, r25
 bb4:	03 94       	inc	r0
 bb6:	00 0c       	add	r0, r0
 bb8:	11 f4       	brne	.+4      	; 0xbbe <__fp_round+0xc>
 bba:	88 23       	and	r24, r24
 bbc:	52 f0       	brmi	.+20     	; 0xbd2 <__fp_round+0x20>
 bbe:	bb 0f       	add	r27, r27
 bc0:	40 f4       	brcc	.+16     	; 0xbd2 <__fp_round+0x20>
 bc2:	bf 2b       	or	r27, r31
 bc4:	11 f4       	brne	.+4      	; 0xbca <__fp_round+0x18>
 bc6:	60 ff       	sbrs	r22, 0
 bc8:	04 c0       	rjmp	.+8      	; 0xbd2 <__fp_round+0x20>
 bca:	6f 5f       	subi	r22, 0xFF	; 255
 bcc:	7f 4f       	sbci	r23, 0xFF	; 255
 bce:	8f 4f       	sbci	r24, 0xFF	; 255
 bd0:	9f 4f       	sbci	r25, 0xFF	; 255
 bd2:	08 95       	ret

00000bd4 <__fp_split3>:
 bd4:	57 fd       	sbrc	r21, 7
 bd6:	90 58       	subi	r25, 0x80	; 128
 bd8:	44 0f       	add	r20, r20
 bda:	55 1f       	adc	r21, r21
 bdc:	59 f0       	breq	.+22     	; 0xbf4 <__fp_splitA+0x10>
 bde:	5f 3f       	cpi	r21, 0xFF	; 255
 be0:	71 f0       	breq	.+28     	; 0xbfe <__fp_splitA+0x1a>
 be2:	47 95       	ror	r20

00000be4 <__fp_splitA>:
 be4:	88 0f       	add	r24, r24
 be6:	97 fb       	bst	r25, 7
 be8:	99 1f       	adc	r25, r25
 bea:	61 f0       	breq	.+24     	; 0xc04 <__fp_splitA+0x20>
 bec:	9f 3f       	cpi	r25, 0xFF	; 255
 bee:	79 f0       	breq	.+30     	; 0xc0e <__fp_splitA+0x2a>
 bf0:	87 95       	ror	r24
 bf2:	08 95       	ret
 bf4:	12 16       	cp	r1, r18
 bf6:	13 06       	cpc	r1, r19
 bf8:	14 06       	cpc	r1, r20
 bfa:	55 1f       	adc	r21, r21
 bfc:	f2 cf       	rjmp	.-28     	; 0xbe2 <__fp_split3+0xe>
 bfe:	46 95       	lsr	r20
 c00:	f1 df       	rcall	.-30     	; 0xbe4 <__fp_splitA>
 c02:	08 c0       	rjmp	.+16     	; 0xc14 <__fp_splitA+0x30>
 c04:	16 16       	cp	r1, r22
 c06:	17 06       	cpc	r1, r23
 c08:	18 06       	cpc	r1, r24
 c0a:	99 1f       	adc	r25, r25
 c0c:	f1 cf       	rjmp	.-30     	; 0xbf0 <__fp_splitA+0xc>
 c0e:	86 95       	lsr	r24
 c10:	71 05       	cpc	r23, r1
 c12:	61 05       	cpc	r22, r1
 c14:	08 94       	sec
 c16:	08 95       	ret

00000c18 <__fp_zero>:
 c18:	e8 94       	clt

00000c1a <__fp_szero>:
 c1a:	bb 27       	eor	r27, r27
 c1c:	66 27       	eor	r22, r22
 c1e:	77 27       	eor	r23, r23
 c20:	cb 01       	movw	r24, r22
 c22:	97 f9       	bld	r25, 7
 c24:	08 95       	ret

00000c26 <__gesf2>:
 c26:	8a df       	rcall	.-236    	; 0xb3c <__fp_cmp>
 c28:	08 f4       	brcc	.+2      	; 0xc2c <__gesf2+0x6>
 c2a:	8f ef       	ldi	r24, 0xFF	; 255
 c2c:	08 95       	ret

00000c2e <__mulsf3>:
 c2e:	0b d0       	rcall	.+22     	; 0xc46 <__mulsf3x>
 c30:	c0 cf       	rjmp	.-128    	; 0xbb2 <__fp_round>
 c32:	b1 df       	rcall	.-158    	; 0xb96 <__fp_pscA>
 c34:	28 f0       	brcs	.+10     	; 0xc40 <__mulsf3+0x12>
 c36:	b6 df       	rcall	.-148    	; 0xba4 <__fp_pscB>
 c38:	18 f0       	brcs	.+6      	; 0xc40 <__mulsf3+0x12>
 c3a:	95 23       	and	r25, r21
 c3c:	09 f0       	breq	.+2      	; 0xc40 <__mulsf3+0x12>
 c3e:	a2 cf       	rjmp	.-188    	; 0xb84 <__fp_inf>
 c40:	a7 cf       	rjmp	.-178    	; 0xb90 <__fp_nan>
 c42:	11 24       	eor	r1, r1
 c44:	ea cf       	rjmp	.-44     	; 0xc1a <__fp_szero>

00000c46 <__mulsf3x>:
 c46:	c6 df       	rcall	.-116    	; 0xbd4 <__fp_split3>
 c48:	a0 f3       	brcs	.-24     	; 0xc32 <__mulsf3+0x4>

00000c4a <__mulsf3_pse>:
 c4a:	95 9f       	mul	r25, r21
 c4c:	d1 f3       	breq	.-12     	; 0xc42 <__mulsf3+0x14>
 c4e:	95 0f       	add	r25, r21
 c50:	50 e0       	ldi	r21, 0x00	; 0
 c52:	55 1f       	adc	r21, r21
 c54:	62 9f       	mul	r22, r18
 c56:	f0 01       	movw	r30, r0
 c58:	72 9f       	mul	r23, r18
 c5a:	bb 27       	eor	r27, r27
 c5c:	f0 0d       	add	r31, r0
 c5e:	b1 1d       	adc	r27, r1
 c60:	63 9f       	mul	r22, r19
 c62:	aa 27       	eor	r26, r26
 c64:	f0 0d       	add	r31, r0
 c66:	b1 1d       	adc	r27, r1
 c68:	aa 1f       	adc	r26, r26
 c6a:	64 9f       	mul	r22, r20
 c6c:	66 27       	eor	r22, r22
 c6e:	b0 0d       	add	r27, r0
 c70:	a1 1d       	adc	r26, r1
 c72:	66 1f       	adc	r22, r22
 c74:	82 9f       	mul	r24, r18
 c76:	22 27       	eor	r18, r18
 c78:	b0 0d       	add	r27, r0
 c7a:	a1 1d       	adc	r26, r1
 c7c:	62 1f       	adc	r22, r18
 c7e:	73 9f       	mul	r23, r19
 c80:	b0 0d       	add	r27, r0
 c82:	a1 1d       	adc	r26, r1
 c84:	62 1f       	adc	r22, r18
 c86:	83 9f       	mul	r24, r19
 c88:	a0 0d       	add	r26, r0
 c8a:	61 1d       	adc	r22, r1
 c8c:	22 1f       	adc	r18, r18
 c8e:	74 9f       	mul	r23, r20
 c90:	33 27       	eor	r19, r19
 c92:	a0 0d       	add	r26, r0
 c94:	61 1d       	adc	r22, r1
 c96:	23 1f       	adc	r18, r19
 c98:	84 9f       	mul	r24, r20
 c9a:	60 0d       	add	r22, r0
 c9c:	21 1d       	adc	r18, r1
 c9e:	82 2f       	mov	r24, r18
 ca0:	76 2f       	mov	r23, r22
 ca2:	6a 2f       	mov	r22, r26
 ca4:	11 24       	eor	r1, r1
 ca6:	9f 57       	subi	r25, 0x7F	; 127
 ca8:	50 40       	sbci	r21, 0x00	; 0
 caa:	8a f0       	brmi	.+34     	; 0xcce <__mulsf3_pse+0x84>
 cac:	e1 f0       	breq	.+56     	; 0xce6 <__mulsf3_pse+0x9c>
 cae:	88 23       	and	r24, r24
 cb0:	4a f0       	brmi	.+18     	; 0xcc4 <__mulsf3_pse+0x7a>
 cb2:	ee 0f       	add	r30, r30
 cb4:	ff 1f       	adc	r31, r31
 cb6:	bb 1f       	adc	r27, r27
 cb8:	66 1f       	adc	r22, r22
 cba:	77 1f       	adc	r23, r23
 cbc:	88 1f       	adc	r24, r24
 cbe:	91 50       	subi	r25, 0x01	; 1
 cc0:	50 40       	sbci	r21, 0x00	; 0
 cc2:	a9 f7       	brne	.-22     	; 0xcae <__mulsf3_pse+0x64>
 cc4:	9e 3f       	cpi	r25, 0xFE	; 254
 cc6:	51 05       	cpc	r21, r1
 cc8:	70 f0       	brcs	.+28     	; 0xce6 <__mulsf3_pse+0x9c>
 cca:	5c cf       	rjmp	.-328    	; 0xb84 <__fp_inf>
 ccc:	a6 cf       	rjmp	.-180    	; 0xc1a <__fp_szero>
 cce:	5f 3f       	cpi	r21, 0xFF	; 255
 cd0:	ec f3       	brlt	.-6      	; 0xccc <__mulsf3_pse+0x82>
 cd2:	98 3e       	cpi	r25, 0xE8	; 232
 cd4:	dc f3       	brlt	.-10     	; 0xccc <__mulsf3_pse+0x82>
 cd6:	86 95       	lsr	r24
 cd8:	77 95       	ror	r23
 cda:	67 95       	ror	r22
 cdc:	b7 95       	ror	r27
 cde:	f7 95       	ror	r31
 ce0:	e7 95       	ror	r30
 ce2:	9f 5f       	subi	r25, 0xFF	; 255
 ce4:	c1 f7       	brne	.-16     	; 0xcd6 <__mulsf3_pse+0x8c>
 ce6:	fe 2b       	or	r31, r30
 ce8:	88 0f       	add	r24, r24
 cea:	91 1d       	adc	r25, r1
 cec:	96 95       	lsr	r25
 cee:	87 95       	ror	r24
 cf0:	97 f9       	bld	r25, 7
 cf2:	08 95       	ret

00000cf4 <malloc>:
 cf4:	cf 93       	push	r28
 cf6:	df 93       	push	r29
 cf8:	82 30       	cpi	r24, 0x02	; 2
 cfa:	91 05       	cpc	r25, r1
 cfc:	10 f4       	brcc	.+4      	; 0xd02 <malloc+0xe>
 cfe:	82 e0       	ldi	r24, 0x02	; 2
 d00:	90 e0       	ldi	r25, 0x00	; 0
 d02:	e0 91 bc 01 	lds	r30, 0x01BC
 d06:	f0 91 bd 01 	lds	r31, 0x01BD
 d0a:	20 e0       	ldi	r18, 0x00	; 0
 d0c:	30 e0       	ldi	r19, 0x00	; 0
 d0e:	a0 e0       	ldi	r26, 0x00	; 0
 d10:	b0 e0       	ldi	r27, 0x00	; 0
 d12:	30 97       	sbiw	r30, 0x00	; 0
 d14:	39 f1       	breq	.+78     	; 0xd64 <malloc+0x70>
 d16:	40 81       	ld	r20, Z
 d18:	51 81       	ldd	r21, Z+1	; 0x01
 d1a:	48 17       	cp	r20, r24
 d1c:	59 07       	cpc	r21, r25
 d1e:	b8 f0       	brcs	.+46     	; 0xd4e <malloc+0x5a>
 d20:	48 17       	cp	r20, r24
 d22:	59 07       	cpc	r21, r25
 d24:	71 f4       	brne	.+28     	; 0xd42 <malloc+0x4e>
 d26:	82 81       	ldd	r24, Z+2	; 0x02
 d28:	93 81       	ldd	r25, Z+3	; 0x03
 d2a:	10 97       	sbiw	r26, 0x00	; 0
 d2c:	29 f0       	breq	.+10     	; 0xd38 <malloc+0x44>
 d2e:	13 96       	adiw	r26, 0x03	; 3
 d30:	9c 93       	st	X, r25
 d32:	8e 93       	st	-X, r24
 d34:	12 97       	sbiw	r26, 0x02	; 2
 d36:	2c c0       	rjmp	.+88     	; 0xd90 <malloc+0x9c>
 d38:	90 93 bd 01 	sts	0x01BD, r25
 d3c:	80 93 bc 01 	sts	0x01BC, r24
 d40:	27 c0       	rjmp	.+78     	; 0xd90 <malloc+0x9c>
 d42:	21 15       	cp	r18, r1
 d44:	31 05       	cpc	r19, r1
 d46:	31 f0       	breq	.+12     	; 0xd54 <malloc+0x60>
 d48:	42 17       	cp	r20, r18
 d4a:	53 07       	cpc	r21, r19
 d4c:	18 f0       	brcs	.+6      	; 0xd54 <malloc+0x60>
 d4e:	a9 01       	movw	r20, r18
 d50:	db 01       	movw	r26, r22
 d52:	01 c0       	rjmp	.+2      	; 0xd56 <malloc+0x62>
 d54:	ef 01       	movw	r28, r30
 d56:	9a 01       	movw	r18, r20
 d58:	bd 01       	movw	r22, r26
 d5a:	df 01       	movw	r26, r30
 d5c:	02 80       	ldd	r0, Z+2	; 0x02
 d5e:	f3 81       	ldd	r31, Z+3	; 0x03
 d60:	e0 2d       	mov	r30, r0
 d62:	d7 cf       	rjmp	.-82     	; 0xd12 <malloc+0x1e>
 d64:	21 15       	cp	r18, r1
 d66:	31 05       	cpc	r19, r1
 d68:	f9 f0       	breq	.+62     	; 0xda8 <malloc+0xb4>
 d6a:	28 1b       	sub	r18, r24
 d6c:	39 0b       	sbc	r19, r25
 d6e:	24 30       	cpi	r18, 0x04	; 4
 d70:	31 05       	cpc	r19, r1
 d72:	80 f4       	brcc	.+32     	; 0xd94 <malloc+0xa0>
 d74:	8a 81       	ldd	r24, Y+2	; 0x02
 d76:	9b 81       	ldd	r25, Y+3	; 0x03
 d78:	61 15       	cp	r22, r1
 d7a:	71 05       	cpc	r23, r1
 d7c:	21 f0       	breq	.+8      	; 0xd86 <malloc+0x92>
 d7e:	fb 01       	movw	r30, r22
 d80:	93 83       	std	Z+3, r25	; 0x03
 d82:	82 83       	std	Z+2, r24	; 0x02
 d84:	04 c0       	rjmp	.+8      	; 0xd8e <malloc+0x9a>
 d86:	90 93 bd 01 	sts	0x01BD, r25
 d8a:	80 93 bc 01 	sts	0x01BC, r24
 d8e:	fe 01       	movw	r30, r28
 d90:	32 96       	adiw	r30, 0x02	; 2
 d92:	44 c0       	rjmp	.+136    	; 0xe1c <malloc+0x128>
 d94:	fe 01       	movw	r30, r28
 d96:	e2 0f       	add	r30, r18
 d98:	f3 1f       	adc	r31, r19
 d9a:	81 93       	st	Z+, r24
 d9c:	91 93       	st	Z+, r25
 d9e:	22 50       	subi	r18, 0x02	; 2
 da0:	31 09       	sbc	r19, r1
 da2:	39 83       	std	Y+1, r19	; 0x01
 da4:	28 83       	st	Y, r18
 da6:	3a c0       	rjmp	.+116    	; 0xe1c <malloc+0x128>
 da8:	20 91 ba 01 	lds	r18, 0x01BA
 dac:	30 91 bb 01 	lds	r19, 0x01BB
 db0:	23 2b       	or	r18, r19
 db2:	41 f4       	brne	.+16     	; 0xdc4 <malloc+0xd0>
 db4:	20 91 02 01 	lds	r18, 0x0102
 db8:	30 91 03 01 	lds	r19, 0x0103
 dbc:	30 93 bb 01 	sts	0x01BB, r19
 dc0:	20 93 ba 01 	sts	0x01BA, r18
 dc4:	20 91 00 01 	lds	r18, 0x0100
 dc8:	30 91 01 01 	lds	r19, 0x0101
 dcc:	21 15       	cp	r18, r1
 dce:	31 05       	cpc	r19, r1
 dd0:	41 f4       	brne	.+16     	; 0xde2 <malloc+0xee>
 dd2:	2d b7       	in	r18, 0x3d	; 61
 dd4:	3e b7       	in	r19, 0x3e	; 62
 dd6:	40 91 04 01 	lds	r20, 0x0104
 dda:	50 91 05 01 	lds	r21, 0x0105
 dde:	24 1b       	sub	r18, r20
 de0:	35 0b       	sbc	r19, r21
 de2:	e0 91 ba 01 	lds	r30, 0x01BA
 de6:	f0 91 bb 01 	lds	r31, 0x01BB
 dea:	e2 17       	cp	r30, r18
 dec:	f3 07       	cpc	r31, r19
 dee:	a0 f4       	brcc	.+40     	; 0xe18 <malloc+0x124>
 df0:	2e 1b       	sub	r18, r30
 df2:	3f 0b       	sbc	r19, r31
 df4:	28 17       	cp	r18, r24
 df6:	39 07       	cpc	r19, r25
 df8:	78 f0       	brcs	.+30     	; 0xe18 <malloc+0x124>
 dfa:	ac 01       	movw	r20, r24
 dfc:	4e 5f       	subi	r20, 0xFE	; 254
 dfe:	5f 4f       	sbci	r21, 0xFF	; 255
 e00:	24 17       	cp	r18, r20
 e02:	35 07       	cpc	r19, r21
 e04:	48 f0       	brcs	.+18     	; 0xe18 <malloc+0x124>
 e06:	4e 0f       	add	r20, r30
 e08:	5f 1f       	adc	r21, r31
 e0a:	50 93 bb 01 	sts	0x01BB, r21
 e0e:	40 93 ba 01 	sts	0x01BA, r20
 e12:	81 93       	st	Z+, r24
 e14:	91 93       	st	Z+, r25
 e16:	02 c0       	rjmp	.+4      	; 0xe1c <malloc+0x128>
 e18:	e0 e0       	ldi	r30, 0x00	; 0
 e1a:	f0 e0       	ldi	r31, 0x00	; 0
 e1c:	cf 01       	movw	r24, r30
 e1e:	df 91       	pop	r29
 e20:	cf 91       	pop	r28
 e22:	08 95       	ret

00000e24 <free>:
 e24:	cf 93       	push	r28
 e26:	df 93       	push	r29
 e28:	00 97       	sbiw	r24, 0x00	; 0
 e2a:	09 f4       	brne	.+2      	; 0xe2e <free+0xa>
 e2c:	87 c0       	rjmp	.+270    	; 0xf3c <free+0x118>
 e2e:	fc 01       	movw	r30, r24
 e30:	32 97       	sbiw	r30, 0x02	; 2
 e32:	13 82       	std	Z+3, r1	; 0x03
 e34:	12 82       	std	Z+2, r1	; 0x02
 e36:	c0 91 bc 01 	lds	r28, 0x01BC
 e3a:	d0 91 bd 01 	lds	r29, 0x01BD
 e3e:	20 97       	sbiw	r28, 0x00	; 0
 e40:	81 f4       	brne	.+32     	; 0xe62 <free+0x3e>
 e42:	20 81       	ld	r18, Z
 e44:	31 81       	ldd	r19, Z+1	; 0x01
 e46:	28 0f       	add	r18, r24
 e48:	39 1f       	adc	r19, r25
 e4a:	80 91 ba 01 	lds	r24, 0x01BA
 e4e:	90 91 bb 01 	lds	r25, 0x01BB
 e52:	82 17       	cp	r24, r18
 e54:	93 07       	cpc	r25, r19
 e56:	79 f5       	brne	.+94     	; 0xeb6 <free+0x92>
 e58:	f0 93 bb 01 	sts	0x01BB, r31
 e5c:	e0 93 ba 01 	sts	0x01BA, r30
 e60:	6d c0       	rjmp	.+218    	; 0xf3c <free+0x118>
 e62:	de 01       	movw	r26, r28
 e64:	20 e0       	ldi	r18, 0x00	; 0
 e66:	30 e0       	ldi	r19, 0x00	; 0
 e68:	ae 17       	cp	r26, r30
 e6a:	bf 07       	cpc	r27, r31
 e6c:	50 f4       	brcc	.+20     	; 0xe82 <free+0x5e>
 e6e:	12 96       	adiw	r26, 0x02	; 2
 e70:	4d 91       	ld	r20, X+
 e72:	5c 91       	ld	r21, X
 e74:	13 97       	sbiw	r26, 0x03	; 3
 e76:	9d 01       	movw	r18, r26
 e78:	41 15       	cp	r20, r1
 e7a:	51 05       	cpc	r21, r1
 e7c:	09 f1       	breq	.+66     	; 0xec0 <free+0x9c>
 e7e:	da 01       	movw	r26, r20
 e80:	f3 cf       	rjmp	.-26     	; 0xe68 <free+0x44>
 e82:	b3 83       	std	Z+3, r27	; 0x03
 e84:	a2 83       	std	Z+2, r26	; 0x02
 e86:	40 81       	ld	r20, Z
 e88:	51 81       	ldd	r21, Z+1	; 0x01
 e8a:	84 0f       	add	r24, r20
 e8c:	95 1f       	adc	r25, r21
 e8e:	8a 17       	cp	r24, r26
 e90:	9b 07       	cpc	r25, r27
 e92:	71 f4       	brne	.+28     	; 0xeb0 <free+0x8c>
 e94:	8d 91       	ld	r24, X+
 e96:	9c 91       	ld	r25, X
 e98:	11 97       	sbiw	r26, 0x01	; 1
 e9a:	84 0f       	add	r24, r20
 e9c:	95 1f       	adc	r25, r21
 e9e:	02 96       	adiw	r24, 0x02	; 2
 ea0:	91 83       	std	Z+1, r25	; 0x01
 ea2:	80 83       	st	Z, r24
 ea4:	12 96       	adiw	r26, 0x02	; 2
 ea6:	8d 91       	ld	r24, X+
 ea8:	9c 91       	ld	r25, X
 eaa:	13 97       	sbiw	r26, 0x03	; 3
 eac:	93 83       	std	Z+3, r25	; 0x03
 eae:	82 83       	std	Z+2, r24	; 0x02
 eb0:	21 15       	cp	r18, r1
 eb2:	31 05       	cpc	r19, r1
 eb4:	29 f4       	brne	.+10     	; 0xec0 <free+0x9c>
 eb6:	f0 93 bd 01 	sts	0x01BD, r31
 eba:	e0 93 bc 01 	sts	0x01BC, r30
 ebe:	3e c0       	rjmp	.+124    	; 0xf3c <free+0x118>
 ec0:	d9 01       	movw	r26, r18
 ec2:	13 96       	adiw	r26, 0x03	; 3
 ec4:	fc 93       	st	X, r31
 ec6:	ee 93       	st	-X, r30
 ec8:	12 97       	sbiw	r26, 0x02	; 2
 eca:	4d 91       	ld	r20, X+
 ecc:	5d 91       	ld	r21, X+
 ece:	a4 0f       	add	r26, r20
 ed0:	b5 1f       	adc	r27, r21
 ed2:	ea 17       	cp	r30, r26
 ed4:	fb 07       	cpc	r31, r27
 ed6:	79 f4       	brne	.+30     	; 0xef6 <free+0xd2>
 ed8:	80 81       	ld	r24, Z
 eda:	91 81       	ldd	r25, Z+1	; 0x01
 edc:	84 0f       	add	r24, r20
 ede:	95 1f       	adc	r25, r21
 ee0:	02 96       	adiw	r24, 0x02	; 2
 ee2:	d9 01       	movw	r26, r18
 ee4:	11 96       	adiw	r26, 0x01	; 1
 ee6:	9c 93       	st	X, r25
 ee8:	8e 93       	st	-X, r24
 eea:	82 81       	ldd	r24, Z+2	; 0x02
 eec:	93 81       	ldd	r25, Z+3	; 0x03
 eee:	13 96       	adiw	r26, 0x03	; 3
 ef0:	9c 93       	st	X, r25
 ef2:	8e 93       	st	-X, r24
 ef4:	12 97       	sbiw	r26, 0x02	; 2
 ef6:	e0 e0       	ldi	r30, 0x00	; 0
 ef8:	f0 e0       	ldi	r31, 0x00	; 0
 efa:	8a 81       	ldd	r24, Y+2	; 0x02
 efc:	9b 81       	ldd	r25, Y+3	; 0x03
 efe:	00 97       	sbiw	r24, 0x00	; 0
 f00:	19 f0       	breq	.+6      	; 0xf08 <free+0xe4>
 f02:	fe 01       	movw	r30, r28
 f04:	ec 01       	movw	r28, r24
 f06:	f9 cf       	rjmp	.-14     	; 0xefa <free+0xd6>
 f08:	ce 01       	movw	r24, r28
 f0a:	02 96       	adiw	r24, 0x02	; 2
 f0c:	28 81       	ld	r18, Y
 f0e:	39 81       	ldd	r19, Y+1	; 0x01
 f10:	82 0f       	add	r24, r18
 f12:	93 1f       	adc	r25, r19
 f14:	20 91 ba 01 	lds	r18, 0x01BA
 f18:	30 91 bb 01 	lds	r19, 0x01BB
 f1c:	28 17       	cp	r18, r24
 f1e:	39 07       	cpc	r19, r25
 f20:	69 f4       	brne	.+26     	; 0xf3c <free+0x118>
 f22:	30 97       	sbiw	r30, 0x00	; 0
 f24:	29 f4       	brne	.+10     	; 0xf30 <free+0x10c>
 f26:	10 92 bd 01 	sts	0x01BD, r1
 f2a:	10 92 bc 01 	sts	0x01BC, r1
 f2e:	02 c0       	rjmp	.+4      	; 0xf34 <free+0x110>
 f30:	13 82       	std	Z+3, r1	; 0x03
 f32:	12 82       	std	Z+2, r1	; 0x02
 f34:	d0 93 bb 01 	sts	0x01BB, r29
 f38:	c0 93 ba 01 	sts	0x01BA, r28
 f3c:	df 91       	pop	r29
 f3e:	cf 91       	pop	r28
 f40:	08 95       	ret

00000f42 <_exit>:
 f42:	f8 94       	cli

00000f44 <__stop_program>:
 f44:	ff cf       	rjmp	.-2      	; 0xf44 <__stop_program>
