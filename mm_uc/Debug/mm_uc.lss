
mm_uc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ce  00800100  00000d3e  00000dd2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  008001ce  008001ce  00000ea0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000096d  00000000  00000000  00000f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000286  00000000  00000000  000018d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003dc  00000000  00000000  00001b5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000214  00000000  00000000  00001f38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ca  00000000  00000000  0000214c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000898  00000000  00000000  00002416  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  00002cae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e3       	ldi	r30, 0x3E	; 62
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 3c       	cpi	r26, 0xCE	; 206
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae ec       	ldi	r26, 0xCE	; 206
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 3d       	cpi	r26, 0xD4	; 212
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 88 03 	call	0x710	; 0x710 <main>
  9e:	0c 94 9d 06 	jmp	0xd3a	; 0xd3a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <UART_Init>:


void UART_Init( unsigned int ubrr)
{
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
  a6:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
  aa:	80 93 c4 00 	sts	0x00C4, r24
	
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  ae:	88 e1       	ldi	r24, 0x18	; 24
  b0:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
  b4:	8e e0       	ldi	r24, 0x0E	; 14
  b6:	80 93 c2 00 	sts	0x00C2, r24
  ba:	08 95       	ret

000000bc <UART_Transmit>:
}

void UART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
  bc:	e0 ec       	ldi	r30, 0xC0	; 192
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	90 81       	ld	r25, Z
  c2:	95 ff       	sbrs	r25, 5
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <UART_Transmit+0x4>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
  c6:	80 93 c6 00 	sts	0x00C6, r24
  ca:	08 95       	ret

000000cc <UART_TString>:
void UART_Transmit(unsigned char);
unsigned char UART_Receive(void);
void UART_Flush(void);

void UART_TString(char* string){
  cc:	1f 93       	push	r17
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	ec 01       	movw	r28, r24
	uint8_t index = 0;
	while(string[index]){
  d4:	88 81       	ld	r24, Y
  d6:	88 23       	and	r24, r24
  d8:	51 f0       	breq	.+20     	; 0xee <UART_TString+0x22>
void UART_Transmit(unsigned char);
unsigned char UART_Receive(void);
void UART_Flush(void);

void UART_TString(char* string){
	uint8_t index = 0;
  da:	10 e0       	ldi	r17, 0x00	; 0
	while(string[index]){
		UART_Transmit((unsigned char)string[index]);
  dc:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_Transmit>
		index++;
  e0:	1f 5f       	subi	r17, 0xFF	; 255
unsigned char UART_Receive(void);
void UART_Flush(void);

void UART_TString(char* string){
	uint8_t index = 0;
	while(string[index]){
  e2:	fe 01       	movw	r30, r28
  e4:	e1 0f       	add	r30, r17
  e6:	f1 1d       	adc	r31, r1
  e8:	80 81       	ld	r24, Z
  ea:	81 11       	cpse	r24, r1
  ec:	f7 cf       	rjmp	.-18     	; 0xdc <UART_TString+0x10>
		UART_Transmit((unsigned char)string[index]);
		index++;
	}
}
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	1f 91       	pop	r17
  f4:	08 95       	ret

000000f6 <CRLF>:

void CRLF(){
	UART_Transmit(0x0D);
  f6:	8d e0       	ldi	r24, 0x0D	; 13
  f8:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_Transmit>
	UART_Transmit(0x0A);
  fc:	8a e0       	ldi	r24, 0x0A	; 10
  fe:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_Transmit>
 102:	08 95       	ret

00000104 <println>:
}

void println(char* string){
	UART_TString(string);
 104:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
	CRLF();
 108:	0e 94 7b 00 	call	0xf6	; 0xf6 <CRLF>
 10c:	08 95       	ret

0000010e <UART_Receive>:
}

unsigned char UART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
 10e:	e0 ec       	ldi	r30, 0xC0	; 192
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	88 23       	and	r24, r24
 116:	ec f7       	brge	.-6      	; 0x112 <UART_Receive+0x4>
	;
	/* Get and return received data from buffer */
	return UDR0;
 118:	80 91 c6 00 	lds	r24, 0x00C6
}
 11c:	08 95       	ret

0000011e <__vector_14>:

/* Interrupt based timer
	Credit: https://sites.google.com/site/qeewiki/books/avr-guide/timers-on-the-atmega328
*/

ISR (TIMER0_COMPA_vect){
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
	mstime+=4; 
 12c:	80 91 ce 01 	lds	r24, 0x01CE
 130:	90 91 cf 01 	lds	r25, 0x01CF
 134:	04 96       	adiw	r24, 0x04	; 4
 136:	90 93 cf 01 	sts	0x01CF, r25
 13a:	80 93 ce 01 	sts	0x01CE, r24
}
 13e:	9f 91       	pop	r25
 140:	8f 91       	pop	r24
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <timer0_Init>:

void timer0_Init(void){
    TCCR0A |= (1 << WGM01);
 14c:	84 b5       	in	r24, 0x24	; 36
 14e:	82 60       	ori	r24, 0x02	; 2
 150:	84 bd       	out	0x24, r24	; 36
    OCR0A = 0xF9;
 152:	89 ef       	ldi	r24, 0xF9	; 249
 154:	87 bd       	out	0x27, r24	; 39
    TIMSK0 |= (1 << OCIE0A);
 156:	ee e6       	ldi	r30, 0x6E	; 110
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	82 60       	ori	r24, 0x02	; 2
 15e:	80 83       	st	Z, r24
    sei();         
 160:	78 94       	sei
    TCCR0B |= (1 << CS02);  
 162:	85 b5       	in	r24, 0x25	; 37
 164:	84 60       	ori	r24, 0x04	; 4
 166:	85 bd       	out	0x25, r24	; 37
 168:	08 95       	ret

0000016a <pumpOn>:
#define delta 10

void pumpOn(pump *pmp){
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	ec 01       	movw	r28, r24
	pmp->finished = 0;
 170:	19 86       	std	Y+9, r1	; 0x09
	UART_Transmit(pmp->label);
 172:	88 81       	ld	r24, Y
 174:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_Transmit>
	UART_TString(" is on!");
 178:	86 e0       	ldi	r24, 0x06	; 6
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
	switch(pmp->label){
 180:	88 81       	ld	r24, Y
 182:	81 34       	cpi	r24, 0x41	; 65
 184:	19 f4       	brne	.+6      	; 0x18c <pumpOn+0x22>
		case 'A':
			OCR2B = 100;
 186:	84 e6       	ldi	r24, 0x64	; 100
 188:	80 93 b4 00 	sts	0x00B4, r24
		case 'B':
			break;
		default:
			break;
	}
	CRLF();
 18c:	0e 94 7b 00 	call	0xf6	; 0xf6 <CRLF>
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <pumpOff>:

void pumpOff(pump *pmp){
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	ec 01       	movw	r28, r24
	pmp->finished = 1;
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	89 87       	std	Y+9, r24	; 0x09
	UART_Transmit(pmp->label);
 1a0:	88 81       	ld	r24, Y
 1a2:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_Transmit>
	UART_TString(" is off!");
 1a6:	8e e0       	ldi	r24, 0x0E	; 14
 1a8:	91 e0       	ldi	r25, 0x01	; 1
 1aa:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
	switch(pmp->label){
 1ae:	88 81       	ld	r24, Y
 1b0:	81 34       	cpi	r24, 0x41	; 65
 1b2:	19 f4       	brne	.+6      	; 0x1ba <pumpOff+0x24>
		case 'A':
			OCR2B = 255;
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	80 93 b4 00 	sts	0x00B4, r24
		case 'B':
			break;
		default:
		break;
	}
	CRLF();
 1ba:	0e 94 7b 00 	call	0xf6	; 0xf6 <CRLF>
}
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <parallelDispense>:
//for(; OCR2B <= 255; OCR2B++){ _delay_ms(1); }

}
*/

void parallelDispense(request* req){
 1c4:	6f 92       	push	r6
 1c6:	7f 92       	push	r7
 1c8:	8f 92       	push	r8
 1ca:	9f 92       	push	r9
 1cc:	af 92       	push	r10
 1ce:	bf 92       	push	r11
 1d0:	cf 92       	push	r12
 1d2:	df 92       	push	r13
 1d4:	ef 92       	push	r14
 1d6:	ff 92       	push	r15
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	8c 01       	movw	r16, r24
	
	println("Dispensing parallel pumps");
 1e2:	87 e1       	ldi	r24, 0x17	; 23
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	0e 94 82 00 	call	0x104	; 0x104 <println>
	
	/* Get the duration of the pump that will run the longest */
	float maxTime = 0;
	for(uint8_t i = 0; i < req->parPumps; i++){
 1ea:	f8 01       	movw	r30, r16
 1ec:	82 80       	ldd	r8, Z+2	; 0x02
 1ee:	88 20       	and	r8, r8
 1f0:	09 f4       	brne	.+2      	; 0x1f4 <parallelDispense+0x30>
 1f2:	aa c0       	rjmp	.+340    	; 0x348 <parallelDispense+0x184>
 1f4:	c0 81       	ld	r28, Z
 1f6:	d1 81       	ldd	r29, Z+1	; 0x01
 1f8:	f1 2c       	mov	r15, r1
void parallelDispense(request* req){
	
	println("Dispensing parallel pumps");
	
	/* Get the duration of the pump that will run the longest */
	float maxTime = 0;
 1fa:	61 2c       	mov	r6, r1
 1fc:	71 2c       	mov	r7, r1
 1fe:	91 2c       	mov	r9, r1
 200:	a1 2c       	mov	r10, r1
	for(uint8_t i = 0; i < req->parPumps; i++){
		if(req->pumps[i].amount > maxTime)
 202:	b9 80       	ldd	r11, Y+1	; 0x01
 204:	ca 80       	ldd	r12, Y+2	; 0x02
 206:	db 80       	ldd	r13, Y+3	; 0x03
 208:	ec 80       	ldd	r14, Y+4	; 0x04
 20a:	26 2d       	mov	r18, r6
 20c:	37 2d       	mov	r19, r7
 20e:	49 2d       	mov	r20, r9
 210:	5a 2d       	mov	r21, r10
 212:	6b 2d       	mov	r22, r11
 214:	7c 2d       	mov	r23, r12
 216:	8d 2d       	mov	r24, r13
 218:	9e 2d       	mov	r25, r14
 21a:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__gesf2>
 21e:	18 16       	cp	r1, r24
 220:	24 f4       	brge	.+8      	; 0x22a <parallelDispense+0x66>
			maxTime = req->pumps[i].amount;
 222:	6b 2c       	mov	r6, r11
 224:	7c 2c       	mov	r7, r12
 226:	9d 2c       	mov	r9, r13
 228:	ae 2c       	mov	r10, r14
	
	println("Dispensing parallel pumps");
	
	/* Get the duration of the pump that will run the longest */
	float maxTime = 0;
	for(uint8_t i = 0; i < req->parPumps; i++){
 22a:	f3 94       	inc	r15
 22c:	2a 96       	adiw	r28, 0x0a	; 10
 22e:	f8 10       	cpse	r15, r8
 230:	e8 cf       	rjmp	.-48     	; 0x202 <parallelDispense+0x3e>
 232:	71 c0       	rjmp	.+226    	; 0x316 <parallelDispense+0x152>
	/* Set total pump time duration and initial time */ 
	unsigned int totalDuration = mstime + (unsigned int)(maxTime);
	unsigned int initialTime = mstime;

	for(uint8_t i = 0; i < req->parPumps; i++)
		pumpOn(&(req->pumps[i])); // Turn the pumps on
 234:	2c 2f       	mov	r18, r28
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	c9 01       	movw	r24, r18
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	22 0f       	add	r18, r18
 240:	33 1f       	adc	r19, r19
 242:	22 0f       	add	r18, r18
 244:	33 1f       	adc	r19, r19
 246:	22 0f       	add	r18, r18
 248:	33 1f       	adc	r19, r19
 24a:	28 0f       	add	r18, r24
 24c:	39 1f       	adc	r19, r25
 24e:	f8 01       	movw	r30, r16
 250:	80 81       	ld	r24, Z
 252:	91 81       	ldd	r25, Z+1	; 0x01
 254:	82 0f       	add	r24, r18
 256:	93 1f       	adc	r25, r19
 258:	0e 94 b5 00 	call	0x16a	; 0x16a <pumpOn>
	maxTime *= 1000;
	/* Set total pump time duration and initial time */ 
	unsigned int totalDuration = mstime + (unsigned int)(maxTime);
	unsigned int initialTime = mstime;

	for(uint8_t i = 0; i < req->parPumps; i++)
 25c:	cf 5f       	subi	r28, 0xFF	; 255
 25e:	f8 01       	movw	r30, r16
 260:	82 81       	ldd	r24, Z+2	; 0x02
 262:	c8 17       	cp	r28, r24
 264:	38 f3       	brcs	.-50     	; 0x234 <parallelDispense+0x70>
 266:	46 c0       	rjmp	.+140    	; 0x2f4 <parallelDispense+0x130>
		pumpOn(&(req->pumps[i])); // Turn the pumps on
	
	while(mstime < (totalDuration + delta)){
		for(uint8_t i = 0; i < req->parPumps; i++){
			//println("in this loop");
			if((mstime - initialTime) > (unsigned int)((req->pumps[i].amount)*1000) ){
 268:	c0 90 ce 01 	lds	r12, 0x01CE
 26c:	d0 90 cf 01 	lds	r13, 0x01CF
 270:	87 2d       	mov	r24, r7
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	7c 01       	movw	r14, r24
 276:	ee 0c       	add	r14, r14
 278:	ff 1c       	adc	r15, r15
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	e8 0e       	add	r14, r24
 288:	f9 1e       	adc	r15, r25
 28a:	f8 01       	movw	r30, r16
 28c:	c0 81       	ld	r28, Z
 28e:	d1 81       	ldd	r29, Z+1	; 0x01
 290:	ce 0d       	add	r28, r14
 292:	df 1d       	adc	r29, r15
 294:	ca 18       	sub	r12, r10
 296:	db 08       	sbc	r13, r11
 298:	20 e0       	ldi	r18, 0x00	; 0
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	4a e7       	ldi	r20, 0x7A	; 122
 29e:	54 e4       	ldi	r21, 0x44	; 68
 2a0:	69 81       	ldd	r22, Y+1	; 0x01
 2a2:	7a 81       	ldd	r23, Y+2	; 0x02
 2a4:	8b 81       	ldd	r24, Y+3	; 0x03
 2a6:	9c 81       	ldd	r25, Y+4	; 0x04
 2a8:	0e 94 13 05 	call	0xa26	; 0xa26 <__mulsf3>
 2ac:	0e 94 31 04 	call	0x862	; 0x862 <__fixunssfsi>
 2b0:	6c 15       	cp	r22, r12
 2b2:	7d 05       	cpc	r23, r13
 2b4:	78 f4       	brcc	.+30     	; 0x2d4 <parallelDispense+0x110>
				if(req->pumps[i].finished == 0){
 2b6:	89 85       	ldd	r24, Y+9	; 0x09
 2b8:	81 11       	cpse	r24, r1
 2ba:	15 c0       	rjmp	.+42     	; 0x2e6 <parallelDispense+0x122>
					UART_TString("This should be in here.");
 2bc:	81 e3       	ldi	r24, 0x31	; 49
 2be:	91 e0       	ldi	r25, 0x01	; 1
 2c0:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
					pumpOff(&(req->pumps[i]));
 2c4:	f8 01       	movw	r30, r16
 2c6:	80 81       	ld	r24, Z
 2c8:	91 81       	ldd	r25, Z+1	; 0x01
 2ca:	8e 0d       	add	r24, r14
 2cc:	9f 1d       	adc	r25, r15
 2ce:	0e 94 cb 00 	call	0x196	; 0x196 <pumpOff>
 2d2:	09 c0       	rjmp	.+18     	; 0x2e6 <parallelDispense+0x122>
				}
			}
			else{
				UART_Transmit(req->pumps[i].label);
 2d4:	88 81       	ld	r24, Y
 2d6:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_Transmit>
				UART_TString(" is still running");
 2da:	89 e4       	ldi	r24, 0x49	; 73
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
				CRLF();
 2e2:	0e 94 7b 00 	call	0xf6	; 0xf6 <CRLF>

	for(uint8_t i = 0; i < req->parPumps; i++)
		pumpOn(&(req->pumps[i])); // Turn the pumps on
	
	while(mstime < (totalDuration + delta)){
		for(uint8_t i = 0; i < req->parPumps; i++){
 2e6:	73 94       	inc	r7
 2e8:	f8 01       	movw	r30, r16
 2ea:	82 81       	ldd	r24, Z+2	; 0x02
 2ec:	78 16       	cp	r7, r24
 2ee:	08 f4       	brcc	.+2      	; 0x2f2 <parallelDispense+0x12e>
 2f0:	bb cf       	rjmp	.-138    	; 0x268 <parallelDispense+0xa4>
 2f2:	04 c0       	rjmp	.+8      	; 0x2fc <parallelDispense+0x138>
	unsigned int initialTime = mstime;

	for(uint8_t i = 0; i < req->parPumps; i++)
		pumpOn(&(req->pumps[i])); // Turn the pumps on
	
	while(mstime < (totalDuration + delta)){
 2f4:	fa e0       	ldi	r31, 0x0A	; 10
 2f6:	8f 0e       	add	r8, r31
 2f8:	91 1c       	adc	r9, r1
		for(uint8_t i = 0; i < req->parPumps; i++){
 2fa:	61 2c       	mov	r6, r1
	unsigned int initialTime = mstime;

	for(uint8_t i = 0; i < req->parPumps; i++)
		pumpOn(&(req->pumps[i])); // Turn the pumps on
	
	while(mstime < (totalDuration + delta)){
 2fc:	80 91 ce 01 	lds	r24, 0x01CE
 300:	90 91 cf 01 	lds	r25, 0x01CF
 304:	88 15       	cp	r24, r8
 306:	99 05       	cpc	r25, r9
 308:	40 f5       	brcc	.+80     	; 0x35a <parallelDispense+0x196>
		for(uint8_t i = 0; i < req->parPumps; i++){
 30a:	f8 01       	movw	r30, r16
 30c:	82 81       	ldd	r24, Z+2	; 0x02
 30e:	88 23       	and	r24, r24
 310:	a9 f3       	breq	.-22     	; 0x2fc <parallelDispense+0x138>
 312:	76 2c       	mov	r7, r6
 314:	a9 cf       	rjmp	.-174    	; 0x268 <parallelDispense+0xa4>
		if(req->pumps[i].amount > maxTime)
			maxTime = req->pumps[i].amount;
	}
	maxTime *= 1000;
	/* Set total pump time duration and initial time */ 
	unsigned int totalDuration = mstime + (unsigned int)(maxTime);
 316:	c0 91 ce 01 	lds	r28, 0x01CE
 31a:	d0 91 cf 01 	lds	r29, 0x01CF
	float maxTime = 0;
	for(uint8_t i = 0; i < req->parPumps; i++){
		if(req->pumps[i].amount > maxTime)
			maxTime = req->pumps[i].amount;
	}
	maxTime *= 1000;
 31e:	20 e0       	ldi	r18, 0x00	; 0
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	4a e7       	ldi	r20, 0x7A	; 122
 324:	54 e4       	ldi	r21, 0x44	; 68
 326:	66 2d       	mov	r22, r6
 328:	77 2d       	mov	r23, r7
 32a:	89 2d       	mov	r24, r9
 32c:	9a 2d       	mov	r25, r10
 32e:	0e 94 13 05 	call	0xa26	; 0xa26 <__mulsf3>
	/* Set total pump time duration and initial time */ 
	unsigned int totalDuration = mstime + (unsigned int)(maxTime);
 332:	0e 94 31 04 	call	0x862	; 0x862 <__fixunssfsi>
 336:	4e 01       	movw	r8, r28
 338:	86 0e       	add	r8, r22
 33a:	97 1e       	adc	r9, r23
	unsigned int initialTime = mstime;
 33c:	a0 90 ce 01 	lds	r10, 0x01CE
 340:	b0 90 cf 01 	lds	r11, 0x01CF

	for(uint8_t i = 0; i < req->parPumps; i++)
 344:	c0 e0       	ldi	r28, 0x00	; 0
 346:	76 cf       	rjmp	.-276    	; 0x234 <parallelDispense+0x70>
		if(req->pumps[i].amount > maxTime)
			maxTime = req->pumps[i].amount;
	}
	maxTime *= 1000;
	/* Set total pump time duration and initial time */ 
	unsigned int totalDuration = mstime + (unsigned int)(maxTime);
 348:	80 90 ce 01 	lds	r8, 0x01CE
 34c:	90 90 cf 01 	lds	r9, 0x01CF
	unsigned int initialTime = mstime;
 350:	a0 90 ce 01 	lds	r10, 0x01CE
 354:	b0 90 cf 01 	lds	r11, 0x01CF
 358:	cd cf       	rjmp	.-102    	; 0x2f4 <parallelDispense+0x130>
			}
		}
	}
	

}
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	1f 91       	pop	r17
 360:	0f 91       	pop	r16
 362:	ff 90       	pop	r15
 364:	ef 90       	pop	r14
 366:	df 90       	pop	r13
 368:	cf 90       	pop	r12
 36a:	bf 90       	pop	r11
 36c:	af 90       	pop	r10
 36e:	9f 90       	pop	r9
 370:	8f 90       	pop	r8
 372:	7f 90       	pop	r7
 374:	6f 90       	pop	r6
 376:	08 95       	ret

00000378 <sequentialDispense>:

void sequentialDispense(request* req){
 378:	af 92       	push	r10
 37a:	bf 92       	push	r11
 37c:	cf 92       	push	r12
 37e:	df 92       	push	r13
 380:	ef 92       	push	r14
 382:	ff 92       	push	r15
 384:	0f 93       	push	r16
 386:	1f 93       	push	r17
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	7c 01       	movw	r14, r24
	
	println("Dispensing sequential pumps");
 38e:	8b e5       	ldi	r24, 0x5B	; 91
 390:	91 e0       	ldi	r25, 0x01	; 1
 392:	0e 94 82 00 	call	0x104	; 0x104 <println>
	
	uint8_t totalPumps = req->parPumps + req->seqPumps;
 396:	f7 01       	movw	r30, r14
 398:	b2 80       	ldd	r11, Z+2	; 0x02
 39a:	a3 80       	ldd	r10, Z+3	; 0x03
 39c:	ab 0c       	add	r10, r11
	for(uint8_t i = req->parPumps; i < totalPumps; i++){
 39e:	ba 14       	cp	r11, r10
 3a0:	c8 f5       	brcc	.+114    	; 0x414 <sequentialDispense+0x9c>
		unsigned int totalDuration = mstime + (unsigned int)((req->pumps[i].amount)*1000);
 3a2:	8b 2d       	mov	r24, r11
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	ec 01       	movw	r28, r24
 3a8:	cc 0f       	add	r28, r28
 3aa:	dd 1f       	adc	r29, r29
 3ac:	88 0f       	add	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	c8 0f       	add	r28, r24
 3ba:	d9 1f       	adc	r29, r25
 3bc:	f7 01       	movw	r30, r14
 3be:	00 81       	ld	r16, Z
 3c0:	11 81       	ldd	r17, Z+1	; 0x01
 3c2:	0c 0f       	add	r16, r28
 3c4:	1d 1f       	adc	r17, r29
 3c6:	c0 90 ce 01 	lds	r12, 0x01CE
 3ca:	d0 90 cf 01 	lds	r13, 0x01CF
 3ce:	20 e0       	ldi	r18, 0x00	; 0
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	4a e7       	ldi	r20, 0x7A	; 122
 3d4:	54 e4       	ldi	r21, 0x44	; 68
 3d6:	f8 01       	movw	r30, r16
 3d8:	61 81       	ldd	r22, Z+1	; 0x01
 3da:	72 81       	ldd	r23, Z+2	; 0x02
 3dc:	83 81       	ldd	r24, Z+3	; 0x03
 3de:	94 81       	ldd	r25, Z+4	; 0x04
 3e0:	0e 94 13 05 	call	0xa26	; 0xa26 <__mulsf3>
 3e4:	0e 94 31 04 	call	0x862	; 0x862 <__fixunssfsi>
 3e8:	c6 0e       	add	r12, r22
 3ea:	d7 1e       	adc	r13, r23
		pumpOn(&(req->pumps[i]));
 3ec:	c8 01       	movw	r24, r16
 3ee:	0e 94 b5 00 	call	0x16a	; 0x16a <pumpOn>
		while(mstime < totalDuration){ }
 3f2:	80 91 ce 01 	lds	r24, 0x01CE
 3f6:	90 91 cf 01 	lds	r25, 0x01CF
 3fa:	8c 15       	cp	r24, r12
 3fc:	9d 05       	cpc	r25, r13
 3fe:	c8 f3       	brcs	.-14     	; 0x3f2 <sequentialDispense+0x7a>
		pumpOff(&(req->pumps[i]));
 400:	f7 01       	movw	r30, r14
 402:	80 81       	ld	r24, Z
 404:	91 81       	ldd	r25, Z+1	; 0x01
 406:	8c 0f       	add	r24, r28
 408:	9d 1f       	adc	r25, r29
 40a:	0e 94 cb 00 	call	0x196	; 0x196 <pumpOff>
void sequentialDispense(request* req){
	
	println("Dispensing sequential pumps");
	
	uint8_t totalPumps = req->parPumps + req->seqPumps;
	for(uint8_t i = req->parPumps; i < totalPumps; i++){
 40e:	b3 94       	inc	r11
 410:	ba 14       	cp	r11, r10
 412:	38 f2       	brcs	.-114    	; 0x3a2 <sequentialDispense+0x2a>
		unsigned int totalDuration = mstime + (unsigned int)((req->pumps[i].amount)*1000);
		pumpOn(&(req->pumps[i]));
		while(mstime < totalDuration){ }
		pumpOff(&(req->pumps[i]));
	}	
 414:	df 91       	pop	r29
 416:	cf 91       	pop	r28
 418:	1f 91       	pop	r17
 41a:	0f 91       	pop	r16
 41c:	ff 90       	pop	r15
 41e:	ef 90       	pop	r14
 420:	df 90       	pop	r13
 422:	cf 90       	pop	r12
 424:	bf 90       	pop	r11
 426:	af 90       	pop	r10
 428:	08 95       	ret

0000042a <init>:
#include "timer.h"
#include "pump.h"
#include "utils.c"

void init(void){
	UART_Init(MYUBRR);
 42a:	87 e6       	ldi	r24, 0x67	; 103
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_Init>
	timer0_Init();
 432:	0e 94 a6 00 	call	0x14c	; 0x14c <timer0_Init>
	TCCR2A = _BV(COM2A1) | _BV(COM2B1) | _BV(WGM21) | _BV(WGM20);
 436:	83 ea       	ldi	r24, 0xA3	; 163
 438:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = _BV(CS22);
 43c:	84 e0       	ldi	r24, 0x04	; 4
 43e:	80 93 b1 00 	sts	0x00B1, r24
	OCR2B = 255; 
 442:	8f ef       	ldi	r24, 0xFF	; 255
 444:	80 93 b4 00 	sts	0x00B4, r24
	DDRD |= 1<<PD3; // OC2B
 448:	53 9a       	sbi	0x0a, 3	; 10
 44a:	08 95       	ret

0000044c <processRequest>:
}

request* processRequest(){
 44c:	6f 92       	push	r6
 44e:	7f 92       	push	r7
 450:	8f 92       	push	r8
 452:	9f 92       	push	r9
 454:	af 92       	push	r10
 456:	bf 92       	push	r11
 458:	cf 92       	push	r12
 45a:	df 92       	push	r13
 45c:	ef 92       	push	r14
 45e:	ff 92       	push	r15
 460:	0f 93       	push	r16
 462:	1f 93       	push	r17
 464:	cf 93       	push	r28
 466:	df 93       	push	r29
	pump* pumps = (pump*)malloc(sizeof(pump)*6);
 468:	8c e3       	ldi	r24, 0x3C	; 60
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	0e 94 76 05 	call	0xaec	; 0xaec <malloc>
 470:	8c 01       	movw	r16, r24
	UART_TString("OK");
 472:	87 e7       	ldi	r24, 0x77	; 119
 474:	91 e0       	ldi	r25, 0x01	; 1
 476:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
	unsigned char parPumps = UART_Receive();
 47a:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 47e:	c8 2f       	mov	r28, r24
	UART_TString("OK");
 480:	87 e7       	ldi	r24, 0x77	; 119
 482:	91 e0       	ldi	r25, 0x01	; 1
 484:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
	unsigned char seqPumps = UART_Receive();
 488:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
	parPumps -= 48; seqPumps -= 48;
 48c:	0f 2e       	mov	r0, r31
 48e:	f0 ed       	ldi	r31, 0xD0	; 208
 490:	8f 2e       	mov	r8, r31
 492:	f0 2d       	mov	r31, r0
 494:	8c 0e       	add	r8, r28
 496:	0f 2e       	mov	r0, r31
 498:	f0 ed       	ldi	r31, 0xD0	; 208
 49a:	7f 2e       	mov	r7, r31
 49c:	f0 2d       	mov	r31, r0
 49e:	78 0e       	add	r7, r24
	
	// Error checking
	if(parPumps + seqPumps > 6)
 4a0:	87 2d       	mov	r24, r7
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	88 0d       	add	r24, r8
 4a6:	91 1d       	adc	r25, r1
 4a8:	07 97       	sbiw	r24, 0x07	; 7
 4aa:	0c f0       	brlt	.+2      	; 0x4ae <processRequest+0x62>
 4ac:	f6 c0       	rjmp	.+492    	; 0x69a <processRequest+0x24e>
		return NULL;
					
	if(parPumps > 6 || parPumps < 0)
 4ae:	86 e0       	ldi	r24, 0x06	; 6
 4b0:	88 15       	cp	r24, r8
 4b2:	08 f4       	brcc	.+2      	; 0x4b6 <processRequest+0x6a>
 4b4:	f5 c0       	rjmp	.+490    	; 0x6a0 <processRequest+0x254>
		return NULL;
		
	if(seqPumps > 6 || seqPumps < 0)
 4b6:	87 15       	cp	r24, r7
 4b8:	08 f4       	brcc	.+2      	; 0x4bc <processRequest+0x70>
 4ba:	f5 c0       	rjmp	.+490    	; 0x6a6 <processRequest+0x25a>
	
	/* Handle request */
	
	// Process parallel pump information
	uint8_t i = 0;
	if(parPumps > 0){
 4bc:	88 20       	and	r8, r8
 4be:	09 f4       	brne	.+2      	; 0x4c2 <processRequest+0x76>
 4c0:	65 c0       	rjmp	.+202    	; 0x58c <processRequest+0x140>
 4c2:	e8 01       	movw	r28, r16
 4c4:	91 2c       	mov	r9, r1
		for(; i < parPumps; i++){
			UART_TString("OK");
 4c6:	87 e7       	ldi	r24, 0x77	; 119
 4c8:	91 e0       	ldi	r25, 0x01	; 1
 4ca:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
			// Get label info
			pumps[i].label = UART_Receive();
 4ce:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 4d2:	88 83       	st	Y, r24
			if(pumps[i].label < 65 || pumps[i].label > 70 )
 4d4:	81 54       	subi	r24, 0x41	; 65
 4d6:	86 30       	cpi	r24, 0x06	; 6
 4d8:	08 f0       	brcs	.+2      	; 0x4dc <processRequest+0x90>
 4da:	e8 c0       	rjmp	.+464    	; 0x6ac <processRequest+0x260>
				return NULL;
			UART_TString("OK");
 4dc:	87 e7       	ldi	r24, 0x77	; 119
 4de:	91 e0       	ldi	r25, 0x01	; 1
 4e0:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
			// Get amount info
			uint8_t ones = UART_Receive() - 48;
 4e4:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 4e8:	0f 2e       	mov	r0, r31
 4ea:	f0 ed       	ldi	r31, 0xD0	; 208
 4ec:	ff 2e       	mov	r15, r31
 4ee:	f0 2d       	mov	r31, r0
 4f0:	f8 0e       	add	r15, r24
			if(ones < 0 || ones > 8 )
 4f2:	e8 e0       	ldi	r30, 0x08	; 8
 4f4:	ef 15       	cp	r30, r15
 4f6:	08 f4       	brcc	.+2      	; 0x4fa <processRequest+0xae>
 4f8:	dc c0       	rjmp	.+440    	; 0x6b2 <processRequest+0x266>
				return NULL;
			if(UART_Receive() != '.')
 4fa:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 4fe:	8e 32       	cpi	r24, 0x2E	; 46
 500:	09 f0       	breq	.+2      	; 0x504 <processRequest+0xb8>
 502:	da c0       	rjmp	.+436    	; 0x6b8 <processRequest+0x26c>
				return NULL;			
			uint8_t tens = UART_Receive() - 48;
 504:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 508:	0f 2e       	mov	r0, r31
 50a:	f0 ed       	ldi	r31, 0xD0	; 208
 50c:	6f 2e       	mov	r6, r31
 50e:	f0 2d       	mov	r31, r0
 510:	68 0e       	add	r6, r24
			if(tens < 0 || tens > 9 )
 512:	f9 e0       	ldi	r31, 0x09	; 9
 514:	f6 15       	cp	r31, r6
 516:	08 f4       	brcc	.+2      	; 0x51a <processRequest+0xce>
 518:	d2 c0       	rjmp	.+420    	; 0x6be <processRequest+0x272>
				return NULL;			
			pumps[i].amount = (float)ones + (float)(tens)*0.1;
 51a:	6f 2d       	mov	r22, r15
 51c:	70 e0       	ldi	r23, 0x00	; 0
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__floatunsisf>
 526:	6b 01       	movw	r12, r22
 528:	7c 01       	movw	r14, r24
 52a:	66 2d       	mov	r22, r6
 52c:	70 e0       	ldi	r23, 0x00	; 0
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__floatunsisf>
 536:	2d ec       	ldi	r18, 0xCD	; 205
 538:	3c ec       	ldi	r19, 0xCC	; 204
 53a:	4c ec       	ldi	r20, 0xCC	; 204
 53c:	5d e3       	ldi	r21, 0x3D	; 61
 53e:	0e 94 13 05 	call	0xa26	; 0xa26 <__mulsf3>
 542:	9b 01       	movw	r18, r22
 544:	ac 01       	movw	r20, r24
 546:	c7 01       	movw	r24, r14
 548:	b6 01       	movw	r22, r12
 54a:	0e 94 c9 03 	call	0x792	; 0x792 <__addsf3>
 54e:	6b 01       	movw	r12, r22
 550:	7c 01       	movw	r14, r24
 552:	fe 01       	movw	r30, r28
 554:	61 83       	std	Z+1, r22	; 0x01
 556:	72 83       	std	Z+2, r23	; 0x02
 558:	83 83       	std	Z+3, r24	; 0x03
 55a:	94 83       	std	Z+4, r25	; 0x04
			if(pumps[i].amount < 0 || pumps[i].amount > 8 )
 55c:	20 e0       	ldi	r18, 0x00	; 0
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	a9 01       	movw	r20, r18
 562:	0e 94 2d 04 	call	0x85a	; 0x85a <__cmpsf2>
 566:	88 23       	and	r24, r24
 568:	0c f4       	brge	.+2      	; 0x56c <processRequest+0x120>
 56a:	ac c0       	rjmp	.+344    	; 0x6c4 <processRequest+0x278>
 56c:	20 e0       	ldi	r18, 0x00	; 0
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	40 e0       	ldi	r20, 0x00	; 0
 572:	51 e4       	ldi	r21, 0x41	; 65
 574:	c7 01       	movw	r24, r14
 576:	b6 01       	movw	r22, r12
 578:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__gesf2>
 57c:	18 16       	cp	r1, r24
 57e:	0c f4       	brge	.+2      	; 0x582 <processRequest+0x136>
 580:	a4 c0       	rjmp	.+328    	; 0x6ca <processRequest+0x27e>
	/* Handle request */
	
	// Process parallel pump information
	uint8_t i = 0;
	if(parPumps > 0){
		for(; i < parPumps; i++){
 582:	93 94       	inc	r9
 584:	2a 96       	adiw	r28, 0x0a	; 10
 586:	89 10       	cpse	r8, r9
 588:	9e cf       	rjmp	.-196    	; 0x4c6 <processRequest+0x7a>
 58a:	01 c0       	rjmp	.+2      	; 0x58e <processRequest+0x142>
	
	
	/* Handle request */
	
	// Process parallel pump information
	uint8_t i = 0;
 58c:	91 2c       	mov	r9, r1
				return NULL;
		}
	}
	// Process sequential pump information 
	uint8_t j = i + seqPumps;
	if(seqPumps > 0){
 58e:	77 20       	and	r7, r7
 590:	09 f4       	brne	.+2      	; 0x594 <processRequest+0x148>
 592:	74 c0       	rjmp	.+232    	; 0x67c <processRequest+0x230>
			if(pumps[i].amount < 0 || pumps[i].amount > 8 )
				return NULL;
		}
	}
	// Process sequential pump information 
	uint8_t j = i + seqPumps;
 594:	b9 2c       	mov	r11, r9
 596:	b7 0c       	add	r11, r7
	if(seqPumps > 0){
		for(; i < j; i++){
 598:	9b 14       	cp	r9, r11
 59a:	08 f0       	brcs	.+2      	; 0x59e <processRequest+0x152>
 59c:	6f c0       	rjmp	.+222    	; 0x67c <processRequest+0x230>
			UART_TString("OK");
 59e:	87 e7       	ldi	r24, 0x77	; 119
 5a0:	91 e0       	ldi	r25, 0x01	; 1
 5a2:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
			// Get label info
			pumps[i].label = UART_Receive();
 5a6:	89 2d       	mov	r24, r9
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	ec 01       	movw	r28, r24
 5ac:	cc 0f       	add	r28, r28
 5ae:	dd 1f       	adc	r29, r29
 5b0:	88 0f       	add	r24, r24
 5b2:	99 1f       	adc	r25, r25
 5b4:	88 0f       	add	r24, r24
 5b6:	99 1f       	adc	r25, r25
 5b8:	88 0f       	add	r24, r24
 5ba:	99 1f       	adc	r25, r25
 5bc:	c8 0f       	add	r28, r24
 5be:	d9 1f       	adc	r29, r25
 5c0:	c0 0f       	add	r28, r16
 5c2:	d1 1f       	adc	r29, r17
 5c4:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 5c8:	88 83       	st	Y, r24
			if(pumps[i].label < 65 || pumps[i].label > 70 )
 5ca:	81 54       	subi	r24, 0x41	; 65
 5cc:	86 30       	cpi	r24, 0x06	; 6
 5ce:	08 f0       	brcs	.+2      	; 0x5d2 <processRequest+0x186>
 5d0:	7f c0       	rjmp	.+254    	; 0x6d0 <processRequest+0x284>
				return NULL;
			UART_TString("OK");
 5d2:	87 e7       	ldi	r24, 0x77	; 119
 5d4:	91 e0       	ldi	r25, 0x01	; 1
 5d6:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
			// Get amount info
			uint8_t ones = UART_Receive() - 48;
 5da:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 5de:	0f 2e       	mov	r0, r31
 5e0:	f0 ed       	ldi	r31, 0xD0	; 208
 5e2:	ff 2e       	mov	r15, r31
 5e4:	f0 2d       	mov	r31, r0
 5e6:	f8 0e       	add	r15, r24
			if(ones < 0 || ones > 8 )
 5e8:	f8 e0       	ldi	r31, 0x08	; 8
 5ea:	ff 15       	cp	r31, r15
 5ec:	08 f4       	brcc	.+2      	; 0x5f0 <processRequest+0x1a4>
 5ee:	73 c0       	rjmp	.+230    	; 0x6d6 <processRequest+0x28a>
				return NULL;
			if(UART_Receive() != '.')
 5f0:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 5f4:	8e 32       	cpi	r24, 0x2E	; 46
 5f6:	09 f0       	breq	.+2      	; 0x5fa <processRequest+0x1ae>
 5f8:	71 c0       	rjmp	.+226    	; 0x6dc <processRequest+0x290>
				return NULL;			
			uint8_t tens = UART_Receive() - 48;
 5fa:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 5fe:	0f 2e       	mov	r0, r31
 600:	f0 ed       	ldi	r31, 0xD0	; 208
 602:	af 2e       	mov	r10, r31
 604:	f0 2d       	mov	r31, r0
 606:	a8 0e       	add	r10, r24
			if(tens < 0 || tens > 9 )
 608:	89 e0       	ldi	r24, 0x09	; 9
 60a:	8a 15       	cp	r24, r10
 60c:	08 f4       	brcc	.+2      	; 0x610 <processRequest+0x1c4>
 60e:	69 c0       	rjmp	.+210    	; 0x6e2 <processRequest+0x296>
				return NULL;			
			pumps[i].amount = (float)ones + (float)(tens)*0.1;
 610:	6f 2d       	mov	r22, r15
 612:	70 e0       	ldi	r23, 0x00	; 0
 614:	80 e0       	ldi	r24, 0x00	; 0
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__floatunsisf>
 61c:	6b 01       	movw	r12, r22
 61e:	7c 01       	movw	r14, r24
 620:	6a 2d       	mov	r22, r10
 622:	70 e0       	ldi	r23, 0x00	; 0
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__floatunsisf>
 62c:	2d ec       	ldi	r18, 0xCD	; 205
 62e:	3c ec       	ldi	r19, 0xCC	; 204
 630:	4c ec       	ldi	r20, 0xCC	; 204
 632:	5d e3       	ldi	r21, 0x3D	; 61
 634:	0e 94 13 05 	call	0xa26	; 0xa26 <__mulsf3>
 638:	9b 01       	movw	r18, r22
 63a:	ac 01       	movw	r20, r24
 63c:	c7 01       	movw	r24, r14
 63e:	b6 01       	movw	r22, r12
 640:	0e 94 c9 03 	call	0x792	; 0x792 <__addsf3>
 644:	6b 01       	movw	r12, r22
 646:	7c 01       	movw	r14, r24
 648:	69 83       	std	Y+1, r22	; 0x01
 64a:	7a 83       	std	Y+2, r23	; 0x02
 64c:	8b 83       	std	Y+3, r24	; 0x03
 64e:	9c 83       	std	Y+4, r25	; 0x04
			if(pumps[i].amount < 0 || pumps[i].amount > 8 )
 650:	20 e0       	ldi	r18, 0x00	; 0
 652:	30 e0       	ldi	r19, 0x00	; 0
 654:	a9 01       	movw	r20, r18
 656:	0e 94 2d 04 	call	0x85a	; 0x85a <__cmpsf2>
 65a:	88 23       	and	r24, r24
 65c:	0c f4       	brge	.+2      	; 0x660 <processRequest+0x214>
 65e:	44 c0       	rjmp	.+136    	; 0x6e8 <processRequest+0x29c>
 660:	20 e0       	ldi	r18, 0x00	; 0
 662:	30 e0       	ldi	r19, 0x00	; 0
 664:	40 e0       	ldi	r20, 0x00	; 0
 666:	51 e4       	ldi	r21, 0x41	; 65
 668:	c7 01       	movw	r24, r14
 66a:	b6 01       	movw	r22, r12
 66c:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__gesf2>
 670:	18 16       	cp	r1, r24
 672:	ec f1       	brlt	.+122    	; 0x6ee <processRequest+0x2a2>
		}
	}
	// Process sequential pump information 
	uint8_t j = i + seqPumps;
	if(seqPumps > 0){
		for(; i < j; i++){
 674:	93 94       	inc	r9
 676:	9b 14       	cp	r9, r11
 678:	08 f4       	brcc	.+2      	; 0x67c <processRequest+0x230>
 67a:	91 cf       	rjmp	.-222    	; 0x59e <processRequest+0x152>
			pumps[i].amount = (float)ones + (float)(tens)*0.1;
			if(pumps[i].amount < 0 || pumps[i].amount > 8 )
				return NULL;
		}
	}
	UART_TString("OK");
 67c:	87 e7       	ldi	r24, 0x77	; 119
 67e:	91 e0       	ldi	r25, 0x01	; 1
 680:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
	
	/* Create and return the request */
	
	request* req = (request*)malloc(sizeof(request));
 684:	84 e0       	ldi	r24, 0x04	; 4
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	0e 94 76 05 	call	0xaec	; 0xaec <malloc>
 68c:	fc 01       	movw	r30, r24
	req->pumps = pumps;
 68e:	11 83       	std	Z+1, r17	; 0x01
 690:	00 83       	st	Z, r16
	req->parPumps = parPumps;
 692:	82 82       	std	Z+2, r8	; 0x02
	req->seqPumps = seqPumps;
 694:	73 82       	std	Z+3, r7	; 0x03
	return req;
 696:	9f 2f       	mov	r25, r31
 698:	2c c0       	rjmp	.+88     	; 0x6f2 <processRequest+0x2a6>
	unsigned char seqPumps = UART_Receive();
	parPumps -= 48; seqPumps -= 48;
	
	// Error checking
	if(parPumps + seqPumps > 6)
		return NULL;
 69a:	80 e0       	ldi	r24, 0x00	; 0
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	29 c0       	rjmp	.+82     	; 0x6f2 <processRequest+0x2a6>
					
	if(parPumps > 6 || parPumps < 0)
		return NULL;
 6a0:	80 e0       	ldi	r24, 0x00	; 0
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	26 c0       	rjmp	.+76     	; 0x6f2 <processRequest+0x2a6>
		
	if(seqPumps > 6 || seqPumps < 0)
		return NULL;
 6a6:	80 e0       	ldi	r24, 0x00	; 0
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	23 c0       	rjmp	.+70     	; 0x6f2 <processRequest+0x2a6>
		for(; i < parPumps; i++){
			UART_TString("OK");
			// Get label info
			pumps[i].label = UART_Receive();
			if(pumps[i].label < 65 || pumps[i].label > 70 )
				return NULL;
 6ac:	80 e0       	ldi	r24, 0x00	; 0
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	20 c0       	rjmp	.+64     	; 0x6f2 <processRequest+0x2a6>
			UART_TString("OK");
			// Get amount info
			uint8_t ones = UART_Receive() - 48;
			if(ones < 0 || ones > 8 )
				return NULL;
 6b2:	80 e0       	ldi	r24, 0x00	; 0
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	1d c0       	rjmp	.+58     	; 0x6f2 <processRequest+0x2a6>
			if(UART_Receive() != '.')
				return NULL;			
 6b8:	80 e0       	ldi	r24, 0x00	; 0
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	1a c0       	rjmp	.+52     	; 0x6f2 <processRequest+0x2a6>
			uint8_t tens = UART_Receive() - 48;
			if(tens < 0 || tens > 9 )
				return NULL;			
 6be:	80 e0       	ldi	r24, 0x00	; 0
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	17 c0       	rjmp	.+46     	; 0x6f2 <processRequest+0x2a6>
			pumps[i].amount = (float)ones + (float)(tens)*0.1;
			if(pumps[i].amount < 0 || pumps[i].amount > 8 )
				return NULL;
 6c4:	80 e0       	ldi	r24, 0x00	; 0
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	14 c0       	rjmp	.+40     	; 0x6f2 <processRequest+0x2a6>
 6ca:	80 e0       	ldi	r24, 0x00	; 0
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	11 c0       	rjmp	.+34     	; 0x6f2 <processRequest+0x2a6>
		for(; i < j; i++){
			UART_TString("OK");
			// Get label info
			pumps[i].label = UART_Receive();
			if(pumps[i].label < 65 || pumps[i].label > 70 )
				return NULL;
 6d0:	80 e0       	ldi	r24, 0x00	; 0
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	0e c0       	rjmp	.+28     	; 0x6f2 <processRequest+0x2a6>
			UART_TString("OK");
			// Get amount info
			uint8_t ones = UART_Receive() - 48;
			if(ones < 0 || ones > 8 )
				return NULL;
 6d6:	80 e0       	ldi	r24, 0x00	; 0
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	0b c0       	rjmp	.+22     	; 0x6f2 <processRequest+0x2a6>
			if(UART_Receive() != '.')
				return NULL;			
 6dc:	80 e0       	ldi	r24, 0x00	; 0
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	08 c0       	rjmp	.+16     	; 0x6f2 <processRequest+0x2a6>
			uint8_t tens = UART_Receive() - 48;
			if(tens < 0 || tens > 9 )
				return NULL;			
 6e2:	80 e0       	ldi	r24, 0x00	; 0
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	05 c0       	rjmp	.+10     	; 0x6f2 <processRequest+0x2a6>
			pumps[i].amount = (float)ones + (float)(tens)*0.1;
			if(pumps[i].amount < 0 || pumps[i].amount > 8 )
				return NULL;
 6e8:	80 e0       	ldi	r24, 0x00	; 0
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <processRequest+0x2a6>
 6ee:	80 e0       	ldi	r24, 0x00	; 0
 6f0:	90 e0       	ldi	r25, 0x00	; 0
	request* req = (request*)malloc(sizeof(request));
	req->pumps = pumps;
	req->parPumps = parPumps;
	req->seqPumps = seqPumps;
	return req;
}
 6f2:	df 91       	pop	r29
 6f4:	cf 91       	pop	r28
 6f6:	1f 91       	pop	r17
 6f8:	0f 91       	pop	r16
 6fa:	ff 90       	pop	r15
 6fc:	ef 90       	pop	r14
 6fe:	df 90       	pop	r13
 700:	cf 90       	pop	r12
 702:	bf 90       	pop	r11
 704:	af 90       	pop	r10
 706:	9f 90       	pop	r9
 708:	8f 90       	pop	r8
 70a:	7f 90       	pop	r7
 70c:	6f 90       	pop	r6
 70e:	08 95       	ret

00000710 <main>:
	* Change UART transmitted messages as necessary 
*/

/* Entry point */
int main(void){
	init();
 710:	0e 94 15 02 	call	0x42a	; 0x42a <init>
	request* req;
	/* Primary loop */
	while(1){	
		println("Ready.");
 714:	8a e7       	ldi	r24, 0x7A	; 122
 716:	91 e0       	ldi	r25, 0x01	; 1
 718:	0e 94 82 00 	call	0x104	; 0x104 <println>
		unsigned char temp = UART_Receive();
 71c:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
		if(temp == 'R'){
 720:	82 35       	cpi	r24, 0x52	; 82
 722:	89 f5       	brne	.+98     	; 0x786 <main+0x76>
			if((req = processRequest()) == NULL){
 724:	0e 94 26 02 	call	0x44c	; 0x44c <processRequest>
 728:	ec 01       	movw	r28, r24
 72a:	00 97       	sbiw	r24, 0x00	; 0
 72c:	39 f4       	brne	.+14     	; 0x73c <main+0x2c>
				CRLF();
 72e:	0e 94 7b 00 	call	0xf6	; 0xf6 <CRLF>
				println("ERROR: Failed to process request!");
 732:	81 e8       	ldi	r24, 0x81	; 129
 734:	91 e0       	ldi	r25, 0x01	; 1
 736:	0e 94 82 00 	call	0x104	; 0x104 <println>
				continue;
 73a:	ec cf       	rjmp	.-40     	; 0x714 <main+0x4>
			}
			CRLF();
 73c:	0e 94 7b 00 	call	0xf6	; 0xf6 <CRLF>
			if(req->parPumps > 0){
 740:	8a 81       	ldd	r24, Y+2	; 0x02
 742:	88 23       	and	r24, r24
 744:	61 f0       	breq	.+24     	; 0x75e <main+0x4e>
				parallelDispense(req);
 746:	ce 01       	movw	r24, r28
 748:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <parallelDispense>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 74c:	2f ef       	ldi	r18, 0xFF	; 255
 74e:	83 ed       	ldi	r24, 0xD3	; 211
 750:	90 e3       	ldi	r25, 0x30	; 48
 752:	21 50       	subi	r18, 0x01	; 1
 754:	80 40       	sbci	r24, 0x00	; 0
 756:	90 40       	sbci	r25, 0x00	; 0
 758:	e1 f7       	brne	.-8      	; 0x752 <main+0x42>
 75a:	00 c0       	rjmp	.+0      	; 0x75c <main+0x4c>
 75c:	00 00       	nop
				_delay_ms(1000); // Delay between modes, will tweak
			}
			if(req->seqPumps > 0){
 75e:	8b 81       	ldd	r24, Y+3	; 0x03
 760:	88 23       	and	r24, r24
 762:	61 f0       	breq	.+24     	; 0x77c <main+0x6c>
				sequentialDispense(req);
 764:	ce 01       	movw	r24, r28
 766:	0e 94 bc 01 	call	0x378	; 0x378 <sequentialDispense>
 76a:	2f ef       	ldi	r18, 0xFF	; 255
 76c:	83 ed       	ldi	r24, 0xD3	; 211
 76e:	90 e3       	ldi	r25, 0x30	; 48
 770:	21 50       	subi	r18, 0x01	; 1
 772:	80 40       	sbci	r24, 0x00	; 0
 774:	90 40       	sbci	r25, 0x00	; 0
 776:	e1 f7       	brne	.-8      	; 0x770 <main+0x60>
 778:	00 c0       	rjmp	.+0      	; 0x77a <main+0x6a>
 77a:	00 00       	nop
				_delay_ms(1000); // Delay between modes, will tweak
			}
			println("Request completed");			
 77c:	83 ea       	ldi	r24, 0xA3	; 163
 77e:	91 e0       	ldi	r25, 0x01	; 1
 780:	0e 94 82 00 	call	0x104	; 0x104 <println>
 784:	c7 cf       	rjmp	.-114    	; 0x714 <main+0x4>
		}
		else
			println("Invalid request command");
 786:	85 eb       	ldi	r24, 0xB5	; 181
 788:	91 e0       	ldi	r25, 0x01	; 1
 78a:	0e 94 82 00 	call	0x104	; 0x104 <println>
 78e:	c2 cf       	rjmp	.-124    	; 0x714 <main+0x4>

00000790 <__subsf3>:
 790:	50 58       	subi	r21, 0x80	; 128

00000792 <__addsf3>:
 792:	bb 27       	eor	r27, r27
 794:	aa 27       	eor	r26, r26
 796:	0e d0       	rcall	.+28     	; 0x7b4 <__addsf3x>
 798:	08 c1       	rjmp	.+528    	; 0x9aa <__fp_round>
 79a:	f9 d0       	rcall	.+498    	; 0x98e <__fp_pscA>
 79c:	30 f0       	brcs	.+12     	; 0x7aa <__addsf3+0x18>
 79e:	fe d0       	rcall	.+508    	; 0x99c <__fp_pscB>
 7a0:	20 f0       	brcs	.+8      	; 0x7aa <__addsf3+0x18>
 7a2:	31 f4       	brne	.+12     	; 0x7b0 <__addsf3+0x1e>
 7a4:	9f 3f       	cpi	r25, 0xFF	; 255
 7a6:	11 f4       	brne	.+4      	; 0x7ac <__addsf3+0x1a>
 7a8:	1e f4       	brtc	.+6      	; 0x7b0 <__addsf3+0x1e>
 7aa:	ee c0       	rjmp	.+476    	; 0x988 <__fp_nan>
 7ac:	0e f4       	brtc	.+2      	; 0x7b0 <__addsf3+0x1e>
 7ae:	e0 95       	com	r30
 7b0:	e7 fb       	bst	r30, 7
 7b2:	e4 c0       	rjmp	.+456    	; 0x97c <__fp_inf>

000007b4 <__addsf3x>:
 7b4:	e9 2f       	mov	r30, r25
 7b6:	0a d1       	rcall	.+532    	; 0x9cc <__fp_split3>
 7b8:	80 f3       	brcs	.-32     	; 0x79a <__addsf3+0x8>
 7ba:	ba 17       	cp	r27, r26
 7bc:	62 07       	cpc	r22, r18
 7be:	73 07       	cpc	r23, r19
 7c0:	84 07       	cpc	r24, r20
 7c2:	95 07       	cpc	r25, r21
 7c4:	18 f0       	brcs	.+6      	; 0x7cc <__addsf3x+0x18>
 7c6:	71 f4       	brne	.+28     	; 0x7e4 <__addsf3x+0x30>
 7c8:	9e f5       	brtc	.+102    	; 0x830 <__addsf3x+0x7c>
 7ca:	22 c1       	rjmp	.+580    	; 0xa10 <__fp_zero>
 7cc:	0e f4       	brtc	.+2      	; 0x7d0 <__addsf3x+0x1c>
 7ce:	e0 95       	com	r30
 7d0:	0b 2e       	mov	r0, r27
 7d2:	ba 2f       	mov	r27, r26
 7d4:	a0 2d       	mov	r26, r0
 7d6:	0b 01       	movw	r0, r22
 7d8:	b9 01       	movw	r22, r18
 7da:	90 01       	movw	r18, r0
 7dc:	0c 01       	movw	r0, r24
 7de:	ca 01       	movw	r24, r20
 7e0:	a0 01       	movw	r20, r0
 7e2:	11 24       	eor	r1, r1
 7e4:	ff 27       	eor	r31, r31
 7e6:	59 1b       	sub	r21, r25
 7e8:	99 f0       	breq	.+38     	; 0x810 <__addsf3x+0x5c>
 7ea:	59 3f       	cpi	r21, 0xF9	; 249
 7ec:	50 f4       	brcc	.+20     	; 0x802 <__addsf3x+0x4e>
 7ee:	50 3e       	cpi	r21, 0xE0	; 224
 7f0:	68 f1       	brcs	.+90     	; 0x84c <__addsf3x+0x98>
 7f2:	1a 16       	cp	r1, r26
 7f4:	f0 40       	sbci	r31, 0x00	; 0
 7f6:	a2 2f       	mov	r26, r18
 7f8:	23 2f       	mov	r18, r19
 7fa:	34 2f       	mov	r19, r20
 7fc:	44 27       	eor	r20, r20
 7fe:	58 5f       	subi	r21, 0xF8	; 248
 800:	f3 cf       	rjmp	.-26     	; 0x7e8 <__addsf3x+0x34>
 802:	46 95       	lsr	r20
 804:	37 95       	ror	r19
 806:	27 95       	ror	r18
 808:	a7 95       	ror	r26
 80a:	f0 40       	sbci	r31, 0x00	; 0
 80c:	53 95       	inc	r21
 80e:	c9 f7       	brne	.-14     	; 0x802 <__addsf3x+0x4e>
 810:	7e f4       	brtc	.+30     	; 0x830 <__addsf3x+0x7c>
 812:	1f 16       	cp	r1, r31
 814:	ba 0b       	sbc	r27, r26
 816:	62 0b       	sbc	r22, r18
 818:	73 0b       	sbc	r23, r19
 81a:	84 0b       	sbc	r24, r20
 81c:	ba f0       	brmi	.+46     	; 0x84c <__addsf3x+0x98>
 81e:	91 50       	subi	r25, 0x01	; 1
 820:	a1 f0       	breq	.+40     	; 0x84a <__addsf3x+0x96>
 822:	ff 0f       	add	r31, r31
 824:	bb 1f       	adc	r27, r27
 826:	66 1f       	adc	r22, r22
 828:	77 1f       	adc	r23, r23
 82a:	88 1f       	adc	r24, r24
 82c:	c2 f7       	brpl	.-16     	; 0x81e <__addsf3x+0x6a>
 82e:	0e c0       	rjmp	.+28     	; 0x84c <__addsf3x+0x98>
 830:	ba 0f       	add	r27, r26
 832:	62 1f       	adc	r22, r18
 834:	73 1f       	adc	r23, r19
 836:	84 1f       	adc	r24, r20
 838:	48 f4       	brcc	.+18     	; 0x84c <__addsf3x+0x98>
 83a:	87 95       	ror	r24
 83c:	77 95       	ror	r23
 83e:	67 95       	ror	r22
 840:	b7 95       	ror	r27
 842:	f7 95       	ror	r31
 844:	9e 3f       	cpi	r25, 0xFE	; 254
 846:	08 f0       	brcs	.+2      	; 0x84a <__addsf3x+0x96>
 848:	b3 cf       	rjmp	.-154    	; 0x7b0 <__addsf3+0x1e>
 84a:	93 95       	inc	r25
 84c:	88 0f       	add	r24, r24
 84e:	08 f0       	brcs	.+2      	; 0x852 <__addsf3x+0x9e>
 850:	99 27       	eor	r25, r25
 852:	ee 0f       	add	r30, r30
 854:	97 95       	ror	r25
 856:	87 95       	ror	r24
 858:	08 95       	ret

0000085a <__cmpsf2>:
 85a:	6c d0       	rcall	.+216    	; 0x934 <__fp_cmp>
 85c:	08 f4       	brcc	.+2      	; 0x860 <__cmpsf2+0x6>
 85e:	81 e0       	ldi	r24, 0x01	; 1
 860:	08 95       	ret

00000862 <__fixunssfsi>:
 862:	bc d0       	rcall	.+376    	; 0x9dc <__fp_splitA>
 864:	88 f0       	brcs	.+34     	; 0x888 <__fixunssfsi+0x26>
 866:	9f 57       	subi	r25, 0x7F	; 127
 868:	90 f0       	brcs	.+36     	; 0x88e <__fixunssfsi+0x2c>
 86a:	b9 2f       	mov	r27, r25
 86c:	99 27       	eor	r25, r25
 86e:	b7 51       	subi	r27, 0x17	; 23
 870:	a0 f0       	brcs	.+40     	; 0x89a <__fixunssfsi+0x38>
 872:	d1 f0       	breq	.+52     	; 0x8a8 <__fixunssfsi+0x46>
 874:	66 0f       	add	r22, r22
 876:	77 1f       	adc	r23, r23
 878:	88 1f       	adc	r24, r24
 87a:	99 1f       	adc	r25, r25
 87c:	1a f0       	brmi	.+6      	; 0x884 <__fixunssfsi+0x22>
 87e:	ba 95       	dec	r27
 880:	c9 f7       	brne	.-14     	; 0x874 <__fixunssfsi+0x12>
 882:	12 c0       	rjmp	.+36     	; 0x8a8 <__fixunssfsi+0x46>
 884:	b1 30       	cpi	r27, 0x01	; 1
 886:	81 f0       	breq	.+32     	; 0x8a8 <__fixunssfsi+0x46>
 888:	c3 d0       	rcall	.+390    	; 0xa10 <__fp_zero>
 88a:	b1 e0       	ldi	r27, 0x01	; 1
 88c:	08 95       	ret
 88e:	c0 c0       	rjmp	.+384    	; 0xa10 <__fp_zero>
 890:	67 2f       	mov	r22, r23
 892:	78 2f       	mov	r23, r24
 894:	88 27       	eor	r24, r24
 896:	b8 5f       	subi	r27, 0xF8	; 248
 898:	39 f0       	breq	.+14     	; 0x8a8 <__fixunssfsi+0x46>
 89a:	b9 3f       	cpi	r27, 0xF9	; 249
 89c:	cc f3       	brlt	.-14     	; 0x890 <__fixunssfsi+0x2e>
 89e:	86 95       	lsr	r24
 8a0:	77 95       	ror	r23
 8a2:	67 95       	ror	r22
 8a4:	b3 95       	inc	r27
 8a6:	d9 f7       	brne	.-10     	; 0x89e <__fixunssfsi+0x3c>
 8a8:	3e f4       	brtc	.+14     	; 0x8b8 <__fixunssfsi+0x56>
 8aa:	90 95       	com	r25
 8ac:	80 95       	com	r24
 8ae:	70 95       	com	r23
 8b0:	61 95       	neg	r22
 8b2:	7f 4f       	sbci	r23, 0xFF	; 255
 8b4:	8f 4f       	sbci	r24, 0xFF	; 255
 8b6:	9f 4f       	sbci	r25, 0xFF	; 255
 8b8:	08 95       	ret

000008ba <__floatunsisf>:
 8ba:	e8 94       	clt
 8bc:	09 c0       	rjmp	.+18     	; 0x8d0 <__floatsisf+0x12>

000008be <__floatsisf>:
 8be:	97 fb       	bst	r25, 7
 8c0:	3e f4       	brtc	.+14     	; 0x8d0 <__floatsisf+0x12>
 8c2:	90 95       	com	r25
 8c4:	80 95       	com	r24
 8c6:	70 95       	com	r23
 8c8:	61 95       	neg	r22
 8ca:	7f 4f       	sbci	r23, 0xFF	; 255
 8cc:	8f 4f       	sbci	r24, 0xFF	; 255
 8ce:	9f 4f       	sbci	r25, 0xFF	; 255
 8d0:	99 23       	and	r25, r25
 8d2:	a9 f0       	breq	.+42     	; 0x8fe <__floatsisf+0x40>
 8d4:	f9 2f       	mov	r31, r25
 8d6:	96 e9       	ldi	r25, 0x96	; 150
 8d8:	bb 27       	eor	r27, r27
 8da:	93 95       	inc	r25
 8dc:	f6 95       	lsr	r31
 8de:	87 95       	ror	r24
 8e0:	77 95       	ror	r23
 8e2:	67 95       	ror	r22
 8e4:	b7 95       	ror	r27
 8e6:	f1 11       	cpse	r31, r1
 8e8:	f8 cf       	rjmp	.-16     	; 0x8da <__floatsisf+0x1c>
 8ea:	fa f4       	brpl	.+62     	; 0x92a <__stack+0x2b>
 8ec:	bb 0f       	add	r27, r27
 8ee:	11 f4       	brne	.+4      	; 0x8f4 <__floatsisf+0x36>
 8f0:	60 ff       	sbrs	r22, 0
 8f2:	1b c0       	rjmp	.+54     	; 0x92a <__stack+0x2b>
 8f4:	6f 5f       	subi	r22, 0xFF	; 255
 8f6:	7f 4f       	sbci	r23, 0xFF	; 255
 8f8:	8f 4f       	sbci	r24, 0xFF	; 255
 8fa:	9f 4f       	sbci	r25, 0xFF	; 255
 8fc:	16 c0       	rjmp	.+44     	; 0x92a <__stack+0x2b>
 8fe:	88 23       	and	r24, r24
 900:	11 f0       	breq	.+4      	; 0x906 <__stack+0x7>
 902:	96 e9       	ldi	r25, 0x96	; 150
 904:	11 c0       	rjmp	.+34     	; 0x928 <__stack+0x29>
 906:	77 23       	and	r23, r23
 908:	21 f0       	breq	.+8      	; 0x912 <__stack+0x13>
 90a:	9e e8       	ldi	r25, 0x8E	; 142
 90c:	87 2f       	mov	r24, r23
 90e:	76 2f       	mov	r23, r22
 910:	05 c0       	rjmp	.+10     	; 0x91c <__stack+0x1d>
 912:	66 23       	and	r22, r22
 914:	71 f0       	breq	.+28     	; 0x932 <__stack+0x33>
 916:	96 e8       	ldi	r25, 0x86	; 134
 918:	86 2f       	mov	r24, r22
 91a:	70 e0       	ldi	r23, 0x00	; 0
 91c:	60 e0       	ldi	r22, 0x00	; 0
 91e:	2a f0       	brmi	.+10     	; 0x92a <__stack+0x2b>
 920:	9a 95       	dec	r25
 922:	66 0f       	add	r22, r22
 924:	77 1f       	adc	r23, r23
 926:	88 1f       	adc	r24, r24
 928:	da f7       	brpl	.-10     	; 0x920 <__stack+0x21>
 92a:	88 0f       	add	r24, r24
 92c:	96 95       	lsr	r25
 92e:	87 95       	ror	r24
 930:	97 f9       	bld	r25, 7
 932:	08 95       	ret

00000934 <__fp_cmp>:
 934:	99 0f       	add	r25, r25
 936:	00 08       	sbc	r0, r0
 938:	55 0f       	add	r21, r21
 93a:	aa 0b       	sbc	r26, r26
 93c:	e0 e8       	ldi	r30, 0x80	; 128
 93e:	fe ef       	ldi	r31, 0xFE	; 254
 940:	16 16       	cp	r1, r22
 942:	17 06       	cpc	r1, r23
 944:	e8 07       	cpc	r30, r24
 946:	f9 07       	cpc	r31, r25
 948:	c0 f0       	brcs	.+48     	; 0x97a <__fp_cmp+0x46>
 94a:	12 16       	cp	r1, r18
 94c:	13 06       	cpc	r1, r19
 94e:	e4 07       	cpc	r30, r20
 950:	f5 07       	cpc	r31, r21
 952:	98 f0       	brcs	.+38     	; 0x97a <__fp_cmp+0x46>
 954:	62 1b       	sub	r22, r18
 956:	73 0b       	sbc	r23, r19
 958:	84 0b       	sbc	r24, r20
 95a:	95 0b       	sbc	r25, r21
 95c:	39 f4       	brne	.+14     	; 0x96c <__fp_cmp+0x38>
 95e:	0a 26       	eor	r0, r26
 960:	61 f0       	breq	.+24     	; 0x97a <__fp_cmp+0x46>
 962:	23 2b       	or	r18, r19
 964:	24 2b       	or	r18, r20
 966:	25 2b       	or	r18, r21
 968:	21 f4       	brne	.+8      	; 0x972 <__fp_cmp+0x3e>
 96a:	08 95       	ret
 96c:	0a 26       	eor	r0, r26
 96e:	09 f4       	brne	.+2      	; 0x972 <__fp_cmp+0x3e>
 970:	a1 40       	sbci	r26, 0x01	; 1
 972:	a6 95       	lsr	r26
 974:	8f ef       	ldi	r24, 0xFF	; 255
 976:	81 1d       	adc	r24, r1
 978:	81 1d       	adc	r24, r1
 97a:	08 95       	ret

0000097c <__fp_inf>:
 97c:	97 f9       	bld	r25, 7
 97e:	9f 67       	ori	r25, 0x7F	; 127
 980:	80 e8       	ldi	r24, 0x80	; 128
 982:	70 e0       	ldi	r23, 0x00	; 0
 984:	60 e0       	ldi	r22, 0x00	; 0
 986:	08 95       	ret

00000988 <__fp_nan>:
 988:	9f ef       	ldi	r25, 0xFF	; 255
 98a:	80 ec       	ldi	r24, 0xC0	; 192
 98c:	08 95       	ret

0000098e <__fp_pscA>:
 98e:	00 24       	eor	r0, r0
 990:	0a 94       	dec	r0
 992:	16 16       	cp	r1, r22
 994:	17 06       	cpc	r1, r23
 996:	18 06       	cpc	r1, r24
 998:	09 06       	cpc	r0, r25
 99a:	08 95       	ret

0000099c <__fp_pscB>:
 99c:	00 24       	eor	r0, r0
 99e:	0a 94       	dec	r0
 9a0:	12 16       	cp	r1, r18
 9a2:	13 06       	cpc	r1, r19
 9a4:	14 06       	cpc	r1, r20
 9a6:	05 06       	cpc	r0, r21
 9a8:	08 95       	ret

000009aa <__fp_round>:
 9aa:	09 2e       	mov	r0, r25
 9ac:	03 94       	inc	r0
 9ae:	00 0c       	add	r0, r0
 9b0:	11 f4       	brne	.+4      	; 0x9b6 <__fp_round+0xc>
 9b2:	88 23       	and	r24, r24
 9b4:	52 f0       	brmi	.+20     	; 0x9ca <__fp_round+0x20>
 9b6:	bb 0f       	add	r27, r27
 9b8:	40 f4       	brcc	.+16     	; 0x9ca <__fp_round+0x20>
 9ba:	bf 2b       	or	r27, r31
 9bc:	11 f4       	brne	.+4      	; 0x9c2 <__fp_round+0x18>
 9be:	60 ff       	sbrs	r22, 0
 9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__fp_round+0x20>
 9c2:	6f 5f       	subi	r22, 0xFF	; 255
 9c4:	7f 4f       	sbci	r23, 0xFF	; 255
 9c6:	8f 4f       	sbci	r24, 0xFF	; 255
 9c8:	9f 4f       	sbci	r25, 0xFF	; 255
 9ca:	08 95       	ret

000009cc <__fp_split3>:
 9cc:	57 fd       	sbrc	r21, 7
 9ce:	90 58       	subi	r25, 0x80	; 128
 9d0:	44 0f       	add	r20, r20
 9d2:	55 1f       	adc	r21, r21
 9d4:	59 f0       	breq	.+22     	; 0x9ec <__fp_splitA+0x10>
 9d6:	5f 3f       	cpi	r21, 0xFF	; 255
 9d8:	71 f0       	breq	.+28     	; 0x9f6 <__fp_splitA+0x1a>
 9da:	47 95       	ror	r20

000009dc <__fp_splitA>:
 9dc:	88 0f       	add	r24, r24
 9de:	97 fb       	bst	r25, 7
 9e0:	99 1f       	adc	r25, r25
 9e2:	61 f0       	breq	.+24     	; 0x9fc <__fp_splitA+0x20>
 9e4:	9f 3f       	cpi	r25, 0xFF	; 255
 9e6:	79 f0       	breq	.+30     	; 0xa06 <__fp_splitA+0x2a>
 9e8:	87 95       	ror	r24
 9ea:	08 95       	ret
 9ec:	12 16       	cp	r1, r18
 9ee:	13 06       	cpc	r1, r19
 9f0:	14 06       	cpc	r1, r20
 9f2:	55 1f       	adc	r21, r21
 9f4:	f2 cf       	rjmp	.-28     	; 0x9da <__fp_split3+0xe>
 9f6:	46 95       	lsr	r20
 9f8:	f1 df       	rcall	.-30     	; 0x9dc <__fp_splitA>
 9fa:	08 c0       	rjmp	.+16     	; 0xa0c <__fp_splitA+0x30>
 9fc:	16 16       	cp	r1, r22
 9fe:	17 06       	cpc	r1, r23
 a00:	18 06       	cpc	r1, r24
 a02:	99 1f       	adc	r25, r25
 a04:	f1 cf       	rjmp	.-30     	; 0x9e8 <__fp_splitA+0xc>
 a06:	86 95       	lsr	r24
 a08:	71 05       	cpc	r23, r1
 a0a:	61 05       	cpc	r22, r1
 a0c:	08 94       	sec
 a0e:	08 95       	ret

00000a10 <__fp_zero>:
 a10:	e8 94       	clt

00000a12 <__fp_szero>:
 a12:	bb 27       	eor	r27, r27
 a14:	66 27       	eor	r22, r22
 a16:	77 27       	eor	r23, r23
 a18:	cb 01       	movw	r24, r22
 a1a:	97 f9       	bld	r25, 7
 a1c:	08 95       	ret

00000a1e <__gesf2>:
 a1e:	8a df       	rcall	.-236    	; 0x934 <__fp_cmp>
 a20:	08 f4       	brcc	.+2      	; 0xa24 <__gesf2+0x6>
 a22:	8f ef       	ldi	r24, 0xFF	; 255
 a24:	08 95       	ret

00000a26 <__mulsf3>:
 a26:	0b d0       	rcall	.+22     	; 0xa3e <__mulsf3x>
 a28:	c0 cf       	rjmp	.-128    	; 0x9aa <__fp_round>
 a2a:	b1 df       	rcall	.-158    	; 0x98e <__fp_pscA>
 a2c:	28 f0       	brcs	.+10     	; 0xa38 <__mulsf3+0x12>
 a2e:	b6 df       	rcall	.-148    	; 0x99c <__fp_pscB>
 a30:	18 f0       	brcs	.+6      	; 0xa38 <__mulsf3+0x12>
 a32:	95 23       	and	r25, r21
 a34:	09 f0       	breq	.+2      	; 0xa38 <__mulsf3+0x12>
 a36:	a2 cf       	rjmp	.-188    	; 0x97c <__fp_inf>
 a38:	a7 cf       	rjmp	.-178    	; 0x988 <__fp_nan>
 a3a:	11 24       	eor	r1, r1
 a3c:	ea cf       	rjmp	.-44     	; 0xa12 <__fp_szero>

00000a3e <__mulsf3x>:
 a3e:	c6 df       	rcall	.-116    	; 0x9cc <__fp_split3>
 a40:	a0 f3       	brcs	.-24     	; 0xa2a <__mulsf3+0x4>

00000a42 <__mulsf3_pse>:
 a42:	95 9f       	mul	r25, r21
 a44:	d1 f3       	breq	.-12     	; 0xa3a <__mulsf3+0x14>
 a46:	95 0f       	add	r25, r21
 a48:	50 e0       	ldi	r21, 0x00	; 0
 a4a:	55 1f       	adc	r21, r21
 a4c:	62 9f       	mul	r22, r18
 a4e:	f0 01       	movw	r30, r0
 a50:	72 9f       	mul	r23, r18
 a52:	bb 27       	eor	r27, r27
 a54:	f0 0d       	add	r31, r0
 a56:	b1 1d       	adc	r27, r1
 a58:	63 9f       	mul	r22, r19
 a5a:	aa 27       	eor	r26, r26
 a5c:	f0 0d       	add	r31, r0
 a5e:	b1 1d       	adc	r27, r1
 a60:	aa 1f       	adc	r26, r26
 a62:	64 9f       	mul	r22, r20
 a64:	66 27       	eor	r22, r22
 a66:	b0 0d       	add	r27, r0
 a68:	a1 1d       	adc	r26, r1
 a6a:	66 1f       	adc	r22, r22
 a6c:	82 9f       	mul	r24, r18
 a6e:	22 27       	eor	r18, r18
 a70:	b0 0d       	add	r27, r0
 a72:	a1 1d       	adc	r26, r1
 a74:	62 1f       	adc	r22, r18
 a76:	73 9f       	mul	r23, r19
 a78:	b0 0d       	add	r27, r0
 a7a:	a1 1d       	adc	r26, r1
 a7c:	62 1f       	adc	r22, r18
 a7e:	83 9f       	mul	r24, r19
 a80:	a0 0d       	add	r26, r0
 a82:	61 1d       	adc	r22, r1
 a84:	22 1f       	adc	r18, r18
 a86:	74 9f       	mul	r23, r20
 a88:	33 27       	eor	r19, r19
 a8a:	a0 0d       	add	r26, r0
 a8c:	61 1d       	adc	r22, r1
 a8e:	23 1f       	adc	r18, r19
 a90:	84 9f       	mul	r24, r20
 a92:	60 0d       	add	r22, r0
 a94:	21 1d       	adc	r18, r1
 a96:	82 2f       	mov	r24, r18
 a98:	76 2f       	mov	r23, r22
 a9a:	6a 2f       	mov	r22, r26
 a9c:	11 24       	eor	r1, r1
 a9e:	9f 57       	subi	r25, 0x7F	; 127
 aa0:	50 40       	sbci	r21, 0x00	; 0
 aa2:	8a f0       	brmi	.+34     	; 0xac6 <__mulsf3_pse+0x84>
 aa4:	e1 f0       	breq	.+56     	; 0xade <__mulsf3_pse+0x9c>
 aa6:	88 23       	and	r24, r24
 aa8:	4a f0       	brmi	.+18     	; 0xabc <__mulsf3_pse+0x7a>
 aaa:	ee 0f       	add	r30, r30
 aac:	ff 1f       	adc	r31, r31
 aae:	bb 1f       	adc	r27, r27
 ab0:	66 1f       	adc	r22, r22
 ab2:	77 1f       	adc	r23, r23
 ab4:	88 1f       	adc	r24, r24
 ab6:	91 50       	subi	r25, 0x01	; 1
 ab8:	50 40       	sbci	r21, 0x00	; 0
 aba:	a9 f7       	brne	.-22     	; 0xaa6 <__mulsf3_pse+0x64>
 abc:	9e 3f       	cpi	r25, 0xFE	; 254
 abe:	51 05       	cpc	r21, r1
 ac0:	70 f0       	brcs	.+28     	; 0xade <__mulsf3_pse+0x9c>
 ac2:	5c cf       	rjmp	.-328    	; 0x97c <__fp_inf>
 ac4:	a6 cf       	rjmp	.-180    	; 0xa12 <__fp_szero>
 ac6:	5f 3f       	cpi	r21, 0xFF	; 255
 ac8:	ec f3       	brlt	.-6      	; 0xac4 <__mulsf3_pse+0x82>
 aca:	98 3e       	cpi	r25, 0xE8	; 232
 acc:	dc f3       	brlt	.-10     	; 0xac4 <__mulsf3_pse+0x82>
 ace:	86 95       	lsr	r24
 ad0:	77 95       	ror	r23
 ad2:	67 95       	ror	r22
 ad4:	b7 95       	ror	r27
 ad6:	f7 95       	ror	r31
 ad8:	e7 95       	ror	r30
 ada:	9f 5f       	subi	r25, 0xFF	; 255
 adc:	c1 f7       	brne	.-16     	; 0xace <__mulsf3_pse+0x8c>
 ade:	fe 2b       	or	r31, r30
 ae0:	88 0f       	add	r24, r24
 ae2:	91 1d       	adc	r25, r1
 ae4:	96 95       	lsr	r25
 ae6:	87 95       	ror	r24
 ae8:	97 f9       	bld	r25, 7
 aea:	08 95       	ret

00000aec <malloc>:
 aec:	cf 93       	push	r28
 aee:	df 93       	push	r29
 af0:	82 30       	cpi	r24, 0x02	; 2
 af2:	91 05       	cpc	r25, r1
 af4:	10 f4       	brcc	.+4      	; 0xafa <malloc+0xe>
 af6:	82 e0       	ldi	r24, 0x02	; 2
 af8:	90 e0       	ldi	r25, 0x00	; 0
 afa:	e0 91 d2 01 	lds	r30, 0x01D2
 afe:	f0 91 d3 01 	lds	r31, 0x01D3
 b02:	20 e0       	ldi	r18, 0x00	; 0
 b04:	30 e0       	ldi	r19, 0x00	; 0
 b06:	a0 e0       	ldi	r26, 0x00	; 0
 b08:	b0 e0       	ldi	r27, 0x00	; 0
 b0a:	30 97       	sbiw	r30, 0x00	; 0
 b0c:	39 f1       	breq	.+78     	; 0xb5c <malloc+0x70>
 b0e:	40 81       	ld	r20, Z
 b10:	51 81       	ldd	r21, Z+1	; 0x01
 b12:	48 17       	cp	r20, r24
 b14:	59 07       	cpc	r21, r25
 b16:	b8 f0       	brcs	.+46     	; 0xb46 <malloc+0x5a>
 b18:	48 17       	cp	r20, r24
 b1a:	59 07       	cpc	r21, r25
 b1c:	71 f4       	brne	.+28     	; 0xb3a <malloc+0x4e>
 b1e:	82 81       	ldd	r24, Z+2	; 0x02
 b20:	93 81       	ldd	r25, Z+3	; 0x03
 b22:	10 97       	sbiw	r26, 0x00	; 0
 b24:	29 f0       	breq	.+10     	; 0xb30 <malloc+0x44>
 b26:	13 96       	adiw	r26, 0x03	; 3
 b28:	9c 93       	st	X, r25
 b2a:	8e 93       	st	-X, r24
 b2c:	12 97       	sbiw	r26, 0x02	; 2
 b2e:	2c c0       	rjmp	.+88     	; 0xb88 <malloc+0x9c>
 b30:	90 93 d3 01 	sts	0x01D3, r25
 b34:	80 93 d2 01 	sts	0x01D2, r24
 b38:	27 c0       	rjmp	.+78     	; 0xb88 <malloc+0x9c>
 b3a:	21 15       	cp	r18, r1
 b3c:	31 05       	cpc	r19, r1
 b3e:	31 f0       	breq	.+12     	; 0xb4c <malloc+0x60>
 b40:	42 17       	cp	r20, r18
 b42:	53 07       	cpc	r21, r19
 b44:	18 f0       	brcs	.+6      	; 0xb4c <malloc+0x60>
 b46:	a9 01       	movw	r20, r18
 b48:	db 01       	movw	r26, r22
 b4a:	01 c0       	rjmp	.+2      	; 0xb4e <malloc+0x62>
 b4c:	ef 01       	movw	r28, r30
 b4e:	9a 01       	movw	r18, r20
 b50:	bd 01       	movw	r22, r26
 b52:	df 01       	movw	r26, r30
 b54:	02 80       	ldd	r0, Z+2	; 0x02
 b56:	f3 81       	ldd	r31, Z+3	; 0x03
 b58:	e0 2d       	mov	r30, r0
 b5a:	d7 cf       	rjmp	.-82     	; 0xb0a <malloc+0x1e>
 b5c:	21 15       	cp	r18, r1
 b5e:	31 05       	cpc	r19, r1
 b60:	f9 f0       	breq	.+62     	; 0xba0 <malloc+0xb4>
 b62:	28 1b       	sub	r18, r24
 b64:	39 0b       	sbc	r19, r25
 b66:	24 30       	cpi	r18, 0x04	; 4
 b68:	31 05       	cpc	r19, r1
 b6a:	80 f4       	brcc	.+32     	; 0xb8c <malloc+0xa0>
 b6c:	8a 81       	ldd	r24, Y+2	; 0x02
 b6e:	9b 81       	ldd	r25, Y+3	; 0x03
 b70:	61 15       	cp	r22, r1
 b72:	71 05       	cpc	r23, r1
 b74:	21 f0       	breq	.+8      	; 0xb7e <malloc+0x92>
 b76:	fb 01       	movw	r30, r22
 b78:	93 83       	std	Z+3, r25	; 0x03
 b7a:	82 83       	std	Z+2, r24	; 0x02
 b7c:	04 c0       	rjmp	.+8      	; 0xb86 <malloc+0x9a>
 b7e:	90 93 d3 01 	sts	0x01D3, r25
 b82:	80 93 d2 01 	sts	0x01D2, r24
 b86:	fe 01       	movw	r30, r28
 b88:	32 96       	adiw	r30, 0x02	; 2
 b8a:	44 c0       	rjmp	.+136    	; 0xc14 <malloc+0x128>
 b8c:	fe 01       	movw	r30, r28
 b8e:	e2 0f       	add	r30, r18
 b90:	f3 1f       	adc	r31, r19
 b92:	81 93       	st	Z+, r24
 b94:	91 93       	st	Z+, r25
 b96:	22 50       	subi	r18, 0x02	; 2
 b98:	31 09       	sbc	r19, r1
 b9a:	39 83       	std	Y+1, r19	; 0x01
 b9c:	28 83       	st	Y, r18
 b9e:	3a c0       	rjmp	.+116    	; 0xc14 <malloc+0x128>
 ba0:	20 91 d0 01 	lds	r18, 0x01D0
 ba4:	30 91 d1 01 	lds	r19, 0x01D1
 ba8:	23 2b       	or	r18, r19
 baa:	41 f4       	brne	.+16     	; 0xbbc <malloc+0xd0>
 bac:	20 91 02 01 	lds	r18, 0x0102
 bb0:	30 91 03 01 	lds	r19, 0x0103
 bb4:	30 93 d1 01 	sts	0x01D1, r19
 bb8:	20 93 d0 01 	sts	0x01D0, r18
 bbc:	20 91 00 01 	lds	r18, 0x0100
 bc0:	30 91 01 01 	lds	r19, 0x0101
 bc4:	21 15       	cp	r18, r1
 bc6:	31 05       	cpc	r19, r1
 bc8:	41 f4       	brne	.+16     	; 0xbda <malloc+0xee>
 bca:	2d b7       	in	r18, 0x3d	; 61
 bcc:	3e b7       	in	r19, 0x3e	; 62
 bce:	40 91 04 01 	lds	r20, 0x0104
 bd2:	50 91 05 01 	lds	r21, 0x0105
 bd6:	24 1b       	sub	r18, r20
 bd8:	35 0b       	sbc	r19, r21
 bda:	e0 91 d0 01 	lds	r30, 0x01D0
 bde:	f0 91 d1 01 	lds	r31, 0x01D1
 be2:	e2 17       	cp	r30, r18
 be4:	f3 07       	cpc	r31, r19
 be6:	a0 f4       	brcc	.+40     	; 0xc10 <malloc+0x124>
 be8:	2e 1b       	sub	r18, r30
 bea:	3f 0b       	sbc	r19, r31
 bec:	28 17       	cp	r18, r24
 bee:	39 07       	cpc	r19, r25
 bf0:	78 f0       	brcs	.+30     	; 0xc10 <malloc+0x124>
 bf2:	ac 01       	movw	r20, r24
 bf4:	4e 5f       	subi	r20, 0xFE	; 254
 bf6:	5f 4f       	sbci	r21, 0xFF	; 255
 bf8:	24 17       	cp	r18, r20
 bfa:	35 07       	cpc	r19, r21
 bfc:	48 f0       	brcs	.+18     	; 0xc10 <malloc+0x124>
 bfe:	4e 0f       	add	r20, r30
 c00:	5f 1f       	adc	r21, r31
 c02:	50 93 d1 01 	sts	0x01D1, r21
 c06:	40 93 d0 01 	sts	0x01D0, r20
 c0a:	81 93       	st	Z+, r24
 c0c:	91 93       	st	Z+, r25
 c0e:	02 c0       	rjmp	.+4      	; 0xc14 <malloc+0x128>
 c10:	e0 e0       	ldi	r30, 0x00	; 0
 c12:	f0 e0       	ldi	r31, 0x00	; 0
 c14:	cf 01       	movw	r24, r30
 c16:	df 91       	pop	r29
 c18:	cf 91       	pop	r28
 c1a:	08 95       	ret

00000c1c <free>:
 c1c:	cf 93       	push	r28
 c1e:	df 93       	push	r29
 c20:	00 97       	sbiw	r24, 0x00	; 0
 c22:	09 f4       	brne	.+2      	; 0xc26 <free+0xa>
 c24:	87 c0       	rjmp	.+270    	; 0xd34 <free+0x118>
 c26:	fc 01       	movw	r30, r24
 c28:	32 97       	sbiw	r30, 0x02	; 2
 c2a:	13 82       	std	Z+3, r1	; 0x03
 c2c:	12 82       	std	Z+2, r1	; 0x02
 c2e:	c0 91 d2 01 	lds	r28, 0x01D2
 c32:	d0 91 d3 01 	lds	r29, 0x01D3
 c36:	20 97       	sbiw	r28, 0x00	; 0
 c38:	81 f4       	brne	.+32     	; 0xc5a <free+0x3e>
 c3a:	20 81       	ld	r18, Z
 c3c:	31 81       	ldd	r19, Z+1	; 0x01
 c3e:	28 0f       	add	r18, r24
 c40:	39 1f       	adc	r19, r25
 c42:	80 91 d0 01 	lds	r24, 0x01D0
 c46:	90 91 d1 01 	lds	r25, 0x01D1
 c4a:	82 17       	cp	r24, r18
 c4c:	93 07       	cpc	r25, r19
 c4e:	79 f5       	brne	.+94     	; 0xcae <free+0x92>
 c50:	f0 93 d1 01 	sts	0x01D1, r31
 c54:	e0 93 d0 01 	sts	0x01D0, r30
 c58:	6d c0       	rjmp	.+218    	; 0xd34 <free+0x118>
 c5a:	de 01       	movw	r26, r28
 c5c:	20 e0       	ldi	r18, 0x00	; 0
 c5e:	30 e0       	ldi	r19, 0x00	; 0
 c60:	ae 17       	cp	r26, r30
 c62:	bf 07       	cpc	r27, r31
 c64:	50 f4       	brcc	.+20     	; 0xc7a <free+0x5e>
 c66:	12 96       	adiw	r26, 0x02	; 2
 c68:	4d 91       	ld	r20, X+
 c6a:	5c 91       	ld	r21, X
 c6c:	13 97       	sbiw	r26, 0x03	; 3
 c6e:	9d 01       	movw	r18, r26
 c70:	41 15       	cp	r20, r1
 c72:	51 05       	cpc	r21, r1
 c74:	09 f1       	breq	.+66     	; 0xcb8 <free+0x9c>
 c76:	da 01       	movw	r26, r20
 c78:	f3 cf       	rjmp	.-26     	; 0xc60 <free+0x44>
 c7a:	b3 83       	std	Z+3, r27	; 0x03
 c7c:	a2 83       	std	Z+2, r26	; 0x02
 c7e:	40 81       	ld	r20, Z
 c80:	51 81       	ldd	r21, Z+1	; 0x01
 c82:	84 0f       	add	r24, r20
 c84:	95 1f       	adc	r25, r21
 c86:	8a 17       	cp	r24, r26
 c88:	9b 07       	cpc	r25, r27
 c8a:	71 f4       	brne	.+28     	; 0xca8 <free+0x8c>
 c8c:	8d 91       	ld	r24, X+
 c8e:	9c 91       	ld	r25, X
 c90:	11 97       	sbiw	r26, 0x01	; 1
 c92:	84 0f       	add	r24, r20
 c94:	95 1f       	adc	r25, r21
 c96:	02 96       	adiw	r24, 0x02	; 2
 c98:	91 83       	std	Z+1, r25	; 0x01
 c9a:	80 83       	st	Z, r24
 c9c:	12 96       	adiw	r26, 0x02	; 2
 c9e:	8d 91       	ld	r24, X+
 ca0:	9c 91       	ld	r25, X
 ca2:	13 97       	sbiw	r26, 0x03	; 3
 ca4:	93 83       	std	Z+3, r25	; 0x03
 ca6:	82 83       	std	Z+2, r24	; 0x02
 ca8:	21 15       	cp	r18, r1
 caa:	31 05       	cpc	r19, r1
 cac:	29 f4       	brne	.+10     	; 0xcb8 <free+0x9c>
 cae:	f0 93 d3 01 	sts	0x01D3, r31
 cb2:	e0 93 d2 01 	sts	0x01D2, r30
 cb6:	3e c0       	rjmp	.+124    	; 0xd34 <free+0x118>
 cb8:	d9 01       	movw	r26, r18
 cba:	13 96       	adiw	r26, 0x03	; 3
 cbc:	fc 93       	st	X, r31
 cbe:	ee 93       	st	-X, r30
 cc0:	12 97       	sbiw	r26, 0x02	; 2
 cc2:	4d 91       	ld	r20, X+
 cc4:	5d 91       	ld	r21, X+
 cc6:	a4 0f       	add	r26, r20
 cc8:	b5 1f       	adc	r27, r21
 cca:	ea 17       	cp	r30, r26
 ccc:	fb 07       	cpc	r31, r27
 cce:	79 f4       	brne	.+30     	; 0xcee <free+0xd2>
 cd0:	80 81       	ld	r24, Z
 cd2:	91 81       	ldd	r25, Z+1	; 0x01
 cd4:	84 0f       	add	r24, r20
 cd6:	95 1f       	adc	r25, r21
 cd8:	02 96       	adiw	r24, 0x02	; 2
 cda:	d9 01       	movw	r26, r18
 cdc:	11 96       	adiw	r26, 0x01	; 1
 cde:	9c 93       	st	X, r25
 ce0:	8e 93       	st	-X, r24
 ce2:	82 81       	ldd	r24, Z+2	; 0x02
 ce4:	93 81       	ldd	r25, Z+3	; 0x03
 ce6:	13 96       	adiw	r26, 0x03	; 3
 ce8:	9c 93       	st	X, r25
 cea:	8e 93       	st	-X, r24
 cec:	12 97       	sbiw	r26, 0x02	; 2
 cee:	e0 e0       	ldi	r30, 0x00	; 0
 cf0:	f0 e0       	ldi	r31, 0x00	; 0
 cf2:	8a 81       	ldd	r24, Y+2	; 0x02
 cf4:	9b 81       	ldd	r25, Y+3	; 0x03
 cf6:	00 97       	sbiw	r24, 0x00	; 0
 cf8:	19 f0       	breq	.+6      	; 0xd00 <free+0xe4>
 cfa:	fe 01       	movw	r30, r28
 cfc:	ec 01       	movw	r28, r24
 cfe:	f9 cf       	rjmp	.-14     	; 0xcf2 <free+0xd6>
 d00:	ce 01       	movw	r24, r28
 d02:	02 96       	adiw	r24, 0x02	; 2
 d04:	28 81       	ld	r18, Y
 d06:	39 81       	ldd	r19, Y+1	; 0x01
 d08:	82 0f       	add	r24, r18
 d0a:	93 1f       	adc	r25, r19
 d0c:	20 91 d0 01 	lds	r18, 0x01D0
 d10:	30 91 d1 01 	lds	r19, 0x01D1
 d14:	28 17       	cp	r18, r24
 d16:	39 07       	cpc	r19, r25
 d18:	69 f4       	brne	.+26     	; 0xd34 <free+0x118>
 d1a:	30 97       	sbiw	r30, 0x00	; 0
 d1c:	29 f4       	brne	.+10     	; 0xd28 <free+0x10c>
 d1e:	10 92 d3 01 	sts	0x01D3, r1
 d22:	10 92 d2 01 	sts	0x01D2, r1
 d26:	02 c0       	rjmp	.+4      	; 0xd2c <free+0x110>
 d28:	13 82       	std	Z+3, r1	; 0x03
 d2a:	12 82       	std	Z+2, r1	; 0x02
 d2c:	d0 93 d1 01 	sts	0x01D1, r29
 d30:	c0 93 d0 01 	sts	0x01D0, r28
 d34:	df 91       	pop	r29
 d36:	cf 91       	pop	r28
 d38:	08 95       	ret

00000d3a <_exit>:
 d3a:	f8 94       	cli

00000d3c <__stop_program>:
 d3c:	ff cf       	rjmp	.-2      	; 0xd3c <__stop_program>
