
mm_uc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b6  00800100  00000d32  00000dc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  008001b6  008001b6  00000e7c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e7c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000961  00000000  00000000  00000f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000286  00000000  00000000  000018a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003dd  00000000  00000000  00001b2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000214  00000000  00000000  00001f08  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002af  00000000  00000000  0000211c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000089b  00000000  00000000  000023cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  00002c66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e3       	ldi	r30, 0x32	; 50
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 3b       	cpi	r26, 0xB6	; 182
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 eb       	ldi	r26, 0xB6	; 182
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 3b       	cpi	r26, 0xBC	; 188
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 82 03 	call	0x704	; 0x704 <main>
  9e:	0c 94 97 06 	jmp	0xd2e	; 0xd2e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <UART_Init>:


void UART_Init( unsigned int ubrr)
{
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
  a6:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
  aa:	80 93 c4 00 	sts	0x00C4, r24
	
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  ae:	88 e1       	ldi	r24, 0x18	; 24
  b0:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
  b4:	8e e0       	ldi	r24, 0x0E	; 14
  b6:	80 93 c2 00 	sts	0x00C2, r24
  ba:	08 95       	ret

000000bc <UART_Transmit>:
}

void UART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
  bc:	e0 ec       	ldi	r30, 0xC0	; 192
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	90 81       	ld	r25, Z
  c2:	95 ff       	sbrs	r25, 5
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <UART_Transmit+0x4>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
  c6:	80 93 c6 00 	sts	0x00C6, r24
  ca:	08 95       	ret

000000cc <UART_TString>:
void UART_Transmit(unsigned char);
unsigned char UART_Receive(void);
void UART_Flush(void);

void UART_TString(char* string){
  cc:	1f 93       	push	r17
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	ec 01       	movw	r28, r24
	uint8_t index = 0;
	while(string[index]){
  d4:	88 81       	ld	r24, Y
  d6:	88 23       	and	r24, r24
  d8:	51 f0       	breq	.+20     	; 0xee <UART_TString+0x22>
void UART_Transmit(unsigned char);
unsigned char UART_Receive(void);
void UART_Flush(void);

void UART_TString(char* string){
	uint8_t index = 0;
  da:	10 e0       	ldi	r17, 0x00	; 0
	while(string[index]){
		UART_Transmit((unsigned char)string[index]);
  dc:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_Transmit>
		index++;
  e0:	1f 5f       	subi	r17, 0xFF	; 255
unsigned char UART_Receive(void);
void UART_Flush(void);

void UART_TString(char* string){
	uint8_t index = 0;
	while(string[index]){
  e2:	fe 01       	movw	r30, r28
  e4:	e1 0f       	add	r30, r17
  e6:	f1 1d       	adc	r31, r1
  e8:	80 81       	ld	r24, Z
  ea:	81 11       	cpse	r24, r1
  ec:	f7 cf       	rjmp	.-18     	; 0xdc <UART_TString+0x10>
		UART_Transmit((unsigned char)string[index]);
		index++;
	}
}
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	1f 91       	pop	r17
  f4:	08 95       	ret

000000f6 <CRLF>:

void CRLF(){
	UART_Transmit(0x0D);
  f6:	8d e0       	ldi	r24, 0x0D	; 13
  f8:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_Transmit>
	UART_Transmit(0x0A);
  fc:	8a e0       	ldi	r24, 0x0A	; 10
  fe:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_Transmit>
 102:	08 95       	ret

00000104 <println>:
}

void println(char* string){
	UART_TString(string);
 104:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
	CRLF();
 108:	0e 94 7b 00 	call	0xf6	; 0xf6 <CRLF>
 10c:	08 95       	ret

0000010e <UART_Receive>:
}

unsigned char UART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
 10e:	e0 ec       	ldi	r30, 0xC0	; 192
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	88 23       	and	r24, r24
 116:	ec f7       	brge	.-6      	; 0x112 <UART_Receive+0x4>
	;
	/* Get and return received data from buffer */
	return UDR0;
 118:	80 91 c6 00 	lds	r24, 0x00C6
}
 11c:	08 95       	ret

0000011e <__vector_14>:

/* Interrupt based timer
	Credit: https://sites.google.com/site/qeewiki/books/avr-guide/timers-on-the-atmega328
*/

ISR (TIMER0_COMPA_vect){
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
	mstime+=4; 
 12c:	80 91 b6 01 	lds	r24, 0x01B6
 130:	90 91 b7 01 	lds	r25, 0x01B7
 134:	04 96       	adiw	r24, 0x04	; 4
 136:	90 93 b7 01 	sts	0x01B7, r25
 13a:	80 93 b6 01 	sts	0x01B6, r24
}
 13e:	9f 91       	pop	r25
 140:	8f 91       	pop	r24
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <timer0_Init>:

void timer0_Init(void){
    TCCR0A |= (1 << WGM01);
 14c:	84 b5       	in	r24, 0x24	; 36
 14e:	82 60       	ori	r24, 0x02	; 2
 150:	84 bd       	out	0x24, r24	; 36
    OCR0A = 0xF9;
 152:	89 ef       	ldi	r24, 0xF9	; 249
 154:	87 bd       	out	0x27, r24	; 39
    TIMSK0 |= (1 << OCIE0A);
 156:	ee e6       	ldi	r30, 0x6E	; 110
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	82 60       	ori	r24, 0x02	; 2
 15e:	80 83       	st	Z, r24
    sei();         
 160:	78 94       	sei
    TCCR0B |= (1 << CS02);  
 162:	85 b5       	in	r24, 0x25	; 37
 164:	84 60       	ori	r24, 0x04	; 4
 166:	85 bd       	out	0x25, r24	; 37
 168:	08 95       	ret

0000016a <pumpOn>:
#define DELTA 1000

void pumpOn(pump *pmp){
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	ec 01       	movw	r28, r24
	pmp->finished = 0;
 170:	19 86       	std	Y+9, r1	; 0x09
	UART_Transmit(pmp->label);
 172:	88 81       	ld	r24, Y
 174:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_Transmit>
	UART_TString(" is on!");
 178:	86 e0       	ldi	r24, 0x06	; 6
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
	switch(pmp->label){
 180:	88 81       	ld	r24, Y
 182:	81 34       	cpi	r24, 0x41	; 65
 184:	19 f4       	brne	.+6      	; 0x18c <pumpOn+0x22>
		case 'A':
			OCR2B = 100;
 186:	84 e6       	ldi	r24, 0x64	; 100
 188:	80 93 b4 00 	sts	0x00B4, r24
		case 'B':
			break;
		default:
			break;
	}
	CRLF();
 18c:	0e 94 7b 00 	call	0xf6	; 0xf6 <CRLF>
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <pumpOff>:

void pumpOff(pump *pmp){
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	ec 01       	movw	r28, r24
	pmp->finished = 1;
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	89 87       	std	Y+9, r24	; 0x09
	UART_Transmit(pmp->label);
 1a0:	88 81       	ld	r24, Y
 1a2:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_Transmit>
	UART_TString(" is off!");
 1a6:	8e e0       	ldi	r24, 0x0E	; 14
 1a8:	91 e0       	ldi	r25, 0x01	; 1
 1aa:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
	switch(pmp->label){
 1ae:	88 81       	ld	r24, Y
 1b0:	81 34       	cpi	r24, 0x41	; 65
 1b2:	19 f4       	brne	.+6      	; 0x1ba <pumpOff+0x24>
		case 'A':
			OCR2B = 255;
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	80 93 b4 00 	sts	0x00B4, r24
		case 'B':
			break;
		default:
		break;
	}
	CRLF();
 1ba:	0e 94 7b 00 	call	0xf6	; 0xf6 <CRLF>
}
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <parallelDispense>:

void parallelDispense(request* req){
 1c4:	6f 92       	push	r6
 1c6:	7f 92       	push	r7
 1c8:	8f 92       	push	r8
 1ca:	9f 92       	push	r9
 1cc:	af 92       	push	r10
 1ce:	bf 92       	push	r11
 1d0:	cf 92       	push	r12
 1d2:	df 92       	push	r13
 1d4:	ef 92       	push	r14
 1d6:	ff 92       	push	r15
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	8c 01       	movw	r16, r24
	
	println("Dispensing parallel pumps");
 1e2:	87 e1       	ldi	r24, 0x17	; 23
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	0e 94 82 00 	call	0x104	; 0x104 <println>
	
	/* Get the duration of the pump that will run the longest */
	float maxTime = 0;
	for(uint8_t i = 0; i < req->parPumps; i++){
 1ea:	f8 01       	movw	r30, r16
 1ec:	a2 80       	ldd	r10, Z+2	; 0x02
 1ee:	aa 20       	and	r10, r10
 1f0:	09 f4       	brne	.+2      	; 0x1f4 <parallelDispense+0x30>
 1f2:	a1 c0       	rjmp	.+322    	; 0x336 <parallelDispense+0x172>
 1f4:	c0 81       	ld	r28, Z
 1f6:	d1 81       	ldd	r29, Z+1	; 0x01
 1f8:	f1 2c       	mov	r15, r1
void parallelDispense(request* req){
	
	println("Dispensing parallel pumps");
	
	/* Get the duration of the pump that will run the longest */
	float maxTime = 0;
 1fa:	61 2c       	mov	r6, r1
 1fc:	71 2c       	mov	r7, r1
 1fe:	81 2c       	mov	r8, r1
 200:	91 2c       	mov	r9, r1
	for(uint8_t i = 0; i < req->parPumps; i++){
		if(req->pumps[i].amount > maxTime)
 202:	b9 80       	ldd	r11, Y+1	; 0x01
 204:	ca 80       	ldd	r12, Y+2	; 0x02
 206:	db 80       	ldd	r13, Y+3	; 0x03
 208:	ec 80       	ldd	r14, Y+4	; 0x04
 20a:	26 2d       	mov	r18, r6
 20c:	37 2d       	mov	r19, r7
 20e:	48 2d       	mov	r20, r8
 210:	59 2d       	mov	r21, r9
 212:	6b 2d       	mov	r22, r11
 214:	7c 2d       	mov	r23, r12
 216:	8d 2d       	mov	r24, r13
 218:	9e 2d       	mov	r25, r14
 21a:	0e 94 09 05 	call	0xa12	; 0xa12 <__gesf2>
 21e:	18 16       	cp	r1, r24
 220:	24 f4       	brge	.+8      	; 0x22a <parallelDispense+0x66>
			maxTime = req->pumps[i].amount;
 222:	6b 2c       	mov	r6, r11
 224:	7c 2c       	mov	r7, r12
 226:	8d 2c       	mov	r8, r13
 228:	9e 2c       	mov	r9, r14
	
	println("Dispensing parallel pumps");
	
	/* Get the duration of the pump that will run the longest */
	float maxTime = 0;
	for(uint8_t i = 0; i < req->parPumps; i++){
 22a:	f3 94       	inc	r15
 22c:	2a 96       	adiw	r28, 0x0a	; 10
 22e:	fa 10       	cpse	r15, r10
 230:	e8 cf       	rjmp	.-48     	; 0x202 <parallelDispense+0x3e>
 232:	69 c0       	rjmp	.+210    	; 0x306 <parallelDispense+0x142>
	/* Set total pump time duration and initial time */ 
	unsigned int totalDuration = mstime + (unsigned int)(maxTime);
	unsigned int initialTime = mstime;

	for(uint8_t i = 0; i < req->parPumps; i++)
		pumpOn(&(req->pumps[i])); // Turn the pumps on
 234:	2c 2f       	mov	r18, r28
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	c9 01       	movw	r24, r18
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	22 0f       	add	r18, r18
 240:	33 1f       	adc	r19, r19
 242:	22 0f       	add	r18, r18
 244:	33 1f       	adc	r19, r19
 246:	22 0f       	add	r18, r18
 248:	33 1f       	adc	r19, r19
 24a:	28 0f       	add	r18, r24
 24c:	39 1f       	adc	r19, r25
 24e:	f8 01       	movw	r30, r16
 250:	80 81       	ld	r24, Z
 252:	91 81       	ldd	r25, Z+1	; 0x01
 254:	82 0f       	add	r24, r18
 256:	93 1f       	adc	r25, r19
 258:	0e 94 b5 00 	call	0x16a	; 0x16a <pumpOn>
	maxTime *= 1000;
	/* Set total pump time duration and initial time */ 
	unsigned int totalDuration = mstime + (unsigned int)(maxTime);
	unsigned int initialTime = mstime;

	for(uint8_t i = 0; i < req->parPumps; i++)
 25c:	cf 5f       	subi	r28, 0xFF	; 255
 25e:	f8 01       	movw	r30, r16
 260:	82 81       	ldd	r24, Z+2	; 0x02
 262:	c8 17       	cp	r28, r24
 264:	38 f3       	brcs	.-50     	; 0x234 <parallelDispense+0x70>
 266:	3d c0       	rjmp	.+122    	; 0x2e2 <parallelDispense+0x11e>
		pumpOn(&(req->pumps[i])); // Turn the pumps on
	
	while(mstime < (totalDuration + DELTA)){
		for(uint8_t i = 0; i < req->parPumps; i++){
			//println("in this loop");
			if((mstime - initialTime) >= (unsigned int)((req->pumps[i].amount)*1000) ){
 268:	e0 90 b6 01 	lds	r14, 0x01B6
 26c:	f0 90 b7 01 	lds	r15, 0x01B7
 270:	89 2d       	mov	r24, r9
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	ec 01       	movw	r28, r24
 276:	cc 0f       	add	r28, r28
 278:	dd 1f       	adc	r29, r29
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	8c 0f       	add	r24, r28
 288:	9d 1f       	adc	r25, r29
 28a:	f8 01       	movw	r30, r16
 28c:	c0 81       	ld	r28, Z
 28e:	d1 81       	ldd	r29, Z+1	; 0x01
 290:	c8 0f       	add	r28, r24
 292:	d9 1f       	adc	r29, r25
 294:	ec 18       	sub	r14, r12
 296:	fd 08       	sbc	r15, r13
 298:	20 e0       	ldi	r18, 0x00	; 0
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	4a e7       	ldi	r20, 0x7A	; 122
 29e:	54 e4       	ldi	r21, 0x44	; 68
 2a0:	69 81       	ldd	r22, Y+1	; 0x01
 2a2:	7a 81       	ldd	r23, Y+2	; 0x02
 2a4:	8b 81       	ldd	r24, Y+3	; 0x03
 2a6:	9c 81       	ldd	r25, Y+4	; 0x04
 2a8:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__mulsf3>
 2ac:	0e 94 2b 04 	call	0x856	; 0x856 <__fixunssfsi>
 2b0:	e6 16       	cp	r14, r22
 2b2:	f7 06       	cpc	r15, r23
 2b4:	38 f0       	brcs	.+14     	; 0x2c4 <parallelDispense+0x100>
				if(req->pumps[i].finished == 0){
 2b6:	89 85       	ldd	r24, Y+9	; 0x09
 2b8:	81 11       	cpse	r24, r1
 2ba:	0d c0       	rjmp	.+26     	; 0x2d6 <parallelDispense+0x112>
					pumpOff(&(req->pumps[i]));
 2bc:	ce 01       	movw	r24, r28
 2be:	0e 94 cb 00 	call	0x196	; 0x196 <pumpOff>
 2c2:	09 c0       	rjmp	.+18     	; 0x2d6 <parallelDispense+0x112>
				}
			}
			else{
				UART_Transmit(req->pumps[i].label);
 2c4:	88 81       	ld	r24, Y
 2c6:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_Transmit>
				UART_TString(" is still running");
 2ca:	81 e3       	ldi	r24, 0x31	; 49
 2cc:	91 e0       	ldi	r25, 0x01	; 1
 2ce:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
				CRLF();
 2d2:	0e 94 7b 00 	call	0xf6	; 0xf6 <CRLF>

	for(uint8_t i = 0; i < req->parPumps; i++)
		pumpOn(&(req->pumps[i])); // Turn the pumps on
	
	while(mstime < (totalDuration + DELTA)){
		for(uint8_t i = 0; i < req->parPumps; i++){
 2d6:	93 94       	inc	r9
 2d8:	f8 01       	movw	r30, r16
 2da:	82 81       	ldd	r24, Z+2	; 0x02
 2dc:	98 16       	cp	r9, r24
 2de:	20 f2       	brcs	.-120    	; 0x268 <parallelDispense+0xa4>
 2e0:	05 c0       	rjmp	.+10     	; 0x2ec <parallelDispense+0x128>
	unsigned int initialTime = mstime;

	for(uint8_t i = 0; i < req->parPumps; i++)
		pumpOn(&(req->pumps[i])); // Turn the pumps on
	
	while(mstime < (totalDuration + DELTA)){
 2e2:	f8 e1       	ldi	r31, 0x18	; 24
 2e4:	af 1a       	sub	r10, r31
 2e6:	fc ef       	ldi	r31, 0xFC	; 252
 2e8:	bf 0a       	sbc	r11, r31
		for(uint8_t i = 0; i < req->parPumps; i++){
 2ea:	81 2c       	mov	r8, r1
	unsigned int initialTime = mstime;

	for(uint8_t i = 0; i < req->parPumps; i++)
		pumpOn(&(req->pumps[i])); // Turn the pumps on
	
	while(mstime < (totalDuration + DELTA)){
 2ec:	80 91 b6 01 	lds	r24, 0x01B6
 2f0:	90 91 b7 01 	lds	r25, 0x01B7
 2f4:	8a 15       	cp	r24, r10
 2f6:	9b 05       	cpc	r25, r11
 2f8:	38 f5       	brcc	.+78     	; 0x348 <parallelDispense+0x184>
		for(uint8_t i = 0; i < req->parPumps; i++){
 2fa:	f8 01       	movw	r30, r16
 2fc:	82 81       	ldd	r24, Z+2	; 0x02
 2fe:	88 23       	and	r24, r24
 300:	a9 f3       	breq	.-22     	; 0x2ec <parallelDispense+0x128>
 302:	98 2c       	mov	r9, r8
 304:	b1 cf       	rjmp	.-158    	; 0x268 <parallelDispense+0xa4>
		if(req->pumps[i].amount > maxTime)
			maxTime = req->pumps[i].amount;
	}
	maxTime *= 1000;
	/* Set total pump time duration and initial time */ 
	unsigned int totalDuration = mstime + (unsigned int)(maxTime);
 306:	a0 90 b6 01 	lds	r10, 0x01B6
 30a:	b0 90 b7 01 	lds	r11, 0x01B7
	float maxTime = 0;
	for(uint8_t i = 0; i < req->parPumps; i++){
		if(req->pumps[i].amount > maxTime)
			maxTime = req->pumps[i].amount;
	}
	maxTime *= 1000;
 30e:	20 e0       	ldi	r18, 0x00	; 0
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	4a e7       	ldi	r20, 0x7A	; 122
 314:	54 e4       	ldi	r21, 0x44	; 68
 316:	66 2d       	mov	r22, r6
 318:	77 2d       	mov	r23, r7
 31a:	88 2d       	mov	r24, r8
 31c:	99 2d       	mov	r25, r9
 31e:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__mulsf3>
	/* Set total pump time duration and initial time */ 
	unsigned int totalDuration = mstime + (unsigned int)(maxTime);
 322:	0e 94 2b 04 	call	0x856	; 0x856 <__fixunssfsi>
 326:	a6 0e       	add	r10, r22
 328:	b7 1e       	adc	r11, r23
	unsigned int initialTime = mstime;
 32a:	c0 90 b6 01 	lds	r12, 0x01B6
 32e:	d0 90 b7 01 	lds	r13, 0x01B7

	for(uint8_t i = 0; i < req->parPumps; i++)
 332:	c0 e0       	ldi	r28, 0x00	; 0
 334:	7f cf       	rjmp	.-258    	; 0x234 <parallelDispense+0x70>
		if(req->pumps[i].amount > maxTime)
			maxTime = req->pumps[i].amount;
	}
	maxTime *= 1000;
	/* Set total pump time duration and initial time */ 
	unsigned int totalDuration = mstime + (unsigned int)(maxTime);
 336:	a0 90 b6 01 	lds	r10, 0x01B6
 33a:	b0 90 b7 01 	lds	r11, 0x01B7
	unsigned int initialTime = mstime;
 33e:	c0 90 b6 01 	lds	r12, 0x01B6
 342:	d0 90 b7 01 	lds	r13, 0x01B7
 346:	cd cf       	rjmp	.-102    	; 0x2e2 <parallelDispense+0x11e>
			}
		}
	}
	

}
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	1f 91       	pop	r17
 34e:	0f 91       	pop	r16
 350:	ff 90       	pop	r15
 352:	ef 90       	pop	r14
 354:	df 90       	pop	r13
 356:	cf 90       	pop	r12
 358:	bf 90       	pop	r11
 35a:	af 90       	pop	r10
 35c:	9f 90       	pop	r9
 35e:	8f 90       	pop	r8
 360:	7f 90       	pop	r7
 362:	6f 90       	pop	r6
 364:	08 95       	ret

00000366 <sequentialDispense>:

void sequentialDispense(request* req){
 366:	af 92       	push	r10
 368:	bf 92       	push	r11
 36a:	cf 92       	push	r12
 36c:	df 92       	push	r13
 36e:	ef 92       	push	r14
 370:	ff 92       	push	r15
 372:	0f 93       	push	r16
 374:	1f 93       	push	r17
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
 37a:	7c 01       	movw	r14, r24
	
	println("Dispensing sequential pumps");
 37c:	83 e4       	ldi	r24, 0x43	; 67
 37e:	91 e0       	ldi	r25, 0x01	; 1
 380:	0e 94 82 00 	call	0x104	; 0x104 <println>
	
	uint8_t totalPumps = req->parPumps + req->seqPumps;
 384:	f7 01       	movw	r30, r14
 386:	b2 80       	ldd	r11, Z+2	; 0x02
 388:	a3 80       	ldd	r10, Z+3	; 0x03
 38a:	ab 0c       	add	r10, r11
	for(uint8_t i = req->parPumps; i < totalPumps; i++){
 38c:	ba 14       	cp	r11, r10
 38e:	c8 f5       	brcc	.+114    	; 0x402 <sequentialDispense+0x9c>
		unsigned int totalDuration = mstime + (unsigned int)((req->pumps[i].amount)*1000);
 390:	8b 2d       	mov	r24, r11
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	ec 01       	movw	r28, r24
 396:	cc 0f       	add	r28, r28
 398:	dd 1f       	adc	r29, r29
 39a:	88 0f       	add	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	c8 0f       	add	r28, r24
 3a8:	d9 1f       	adc	r29, r25
 3aa:	f7 01       	movw	r30, r14
 3ac:	00 81       	ld	r16, Z
 3ae:	11 81       	ldd	r17, Z+1	; 0x01
 3b0:	0c 0f       	add	r16, r28
 3b2:	1d 1f       	adc	r17, r29
 3b4:	c0 90 b6 01 	lds	r12, 0x01B6
 3b8:	d0 90 b7 01 	lds	r13, 0x01B7
 3bc:	20 e0       	ldi	r18, 0x00	; 0
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	4a e7       	ldi	r20, 0x7A	; 122
 3c2:	54 e4       	ldi	r21, 0x44	; 68
 3c4:	f8 01       	movw	r30, r16
 3c6:	61 81       	ldd	r22, Z+1	; 0x01
 3c8:	72 81       	ldd	r23, Z+2	; 0x02
 3ca:	83 81       	ldd	r24, Z+3	; 0x03
 3cc:	94 81       	ldd	r25, Z+4	; 0x04
 3ce:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__mulsf3>
 3d2:	0e 94 2b 04 	call	0x856	; 0x856 <__fixunssfsi>
 3d6:	c6 0e       	add	r12, r22
 3d8:	d7 1e       	adc	r13, r23
		pumpOn(&(req->pumps[i]));
 3da:	c8 01       	movw	r24, r16
 3dc:	0e 94 b5 00 	call	0x16a	; 0x16a <pumpOn>
		while(mstime < totalDuration){ }
 3e0:	80 91 b6 01 	lds	r24, 0x01B6
 3e4:	90 91 b7 01 	lds	r25, 0x01B7
 3e8:	8c 15       	cp	r24, r12
 3ea:	9d 05       	cpc	r25, r13
 3ec:	c8 f3       	brcs	.-14     	; 0x3e0 <sequentialDispense+0x7a>
		pumpOff(&(req->pumps[i]));
 3ee:	f7 01       	movw	r30, r14
 3f0:	80 81       	ld	r24, Z
 3f2:	91 81       	ldd	r25, Z+1	; 0x01
 3f4:	8c 0f       	add	r24, r28
 3f6:	9d 1f       	adc	r25, r29
 3f8:	0e 94 cb 00 	call	0x196	; 0x196 <pumpOff>
void sequentialDispense(request* req){
	
	println("Dispensing sequential pumps");
	
	uint8_t totalPumps = req->parPumps + req->seqPumps;
	for(uint8_t i = req->parPumps; i < totalPumps; i++){
 3fc:	b3 94       	inc	r11
 3fe:	ba 14       	cp	r11, r10
 400:	38 f2       	brcs	.-114    	; 0x390 <sequentialDispense+0x2a>
		unsigned int totalDuration = mstime + (unsigned int)((req->pumps[i].amount)*1000);
		pumpOn(&(req->pumps[i]));
		while(mstime < totalDuration){ }
		pumpOff(&(req->pumps[i]));
	}	
}
 402:	df 91       	pop	r29
 404:	cf 91       	pop	r28
 406:	1f 91       	pop	r17
 408:	0f 91       	pop	r16
 40a:	ff 90       	pop	r15
 40c:	ef 90       	pop	r14
 40e:	df 90       	pop	r13
 410:	cf 90       	pop	r12
 412:	bf 90       	pop	r11
 414:	af 90       	pop	r10
 416:	08 95       	ret

00000418 <init>:
#include "timer.h"
#include "pump.h"
#include "utils.c"

void init(void){
	UART_Init(MYUBRR);
 418:	88 e6       	ldi	r24, 0x68	; 104
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_Init>
	timer0_Init();
 420:	0e 94 a6 00 	call	0x14c	; 0x14c <timer0_Init>
	TCCR2A = _BV(COM2A1) | _BV(COM2B1) | _BV(WGM21) | _BV(WGM20);
 424:	83 ea       	ldi	r24, 0xA3	; 163
 426:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = _BV(CS22);
 42a:	84 e0       	ldi	r24, 0x04	; 4
 42c:	80 93 b1 00 	sts	0x00B1, r24
	OCR2B = 255; 
 430:	8f ef       	ldi	r24, 0xFF	; 255
 432:	80 93 b4 00 	sts	0x00B4, r24
	OCR2A = 255; 
 436:	80 93 b3 00 	sts	0x00B3, r24
	DDRD |= 1<<PD3; // OC2B
 43a:	53 9a       	sbi	0x0a, 3	; 10
	DDRD |= 1<<PB3; // OC2B
 43c:	53 9a       	sbi	0x0a, 3	; 10
 43e:	08 95       	ret

00000440 <processRequest>:
}

request* processRequest(){
 440:	6f 92       	push	r6
 442:	7f 92       	push	r7
 444:	8f 92       	push	r8
 446:	9f 92       	push	r9
 448:	af 92       	push	r10
 44a:	bf 92       	push	r11
 44c:	cf 92       	push	r12
 44e:	df 92       	push	r13
 450:	ef 92       	push	r14
 452:	ff 92       	push	r15
 454:	0f 93       	push	r16
 456:	1f 93       	push	r17
 458:	cf 93       	push	r28
 45a:	df 93       	push	r29
	pump* pumps = (pump*)malloc(sizeof(pump)*6);
 45c:	8c e3       	ldi	r24, 0x3C	; 60
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	0e 94 70 05 	call	0xae0	; 0xae0 <malloc>
 464:	8c 01       	movw	r16, r24
	UART_TString("OK");
 466:	8f e5       	ldi	r24, 0x5F	; 95
 468:	91 e0       	ldi	r25, 0x01	; 1
 46a:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
	unsigned char parPumps = UART_Receive();
 46e:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 472:	c8 2f       	mov	r28, r24
	UART_TString("OK");
 474:	8f e5       	ldi	r24, 0x5F	; 95
 476:	91 e0       	ldi	r25, 0x01	; 1
 478:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
	unsigned char seqPumps = UART_Receive();
 47c:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
	parPumps -= 48; seqPumps -= 48;
 480:	0f 2e       	mov	r0, r31
 482:	f0 ed       	ldi	r31, 0xD0	; 208
 484:	8f 2e       	mov	r8, r31
 486:	f0 2d       	mov	r31, r0
 488:	8c 0e       	add	r8, r28
 48a:	0f 2e       	mov	r0, r31
 48c:	f0 ed       	ldi	r31, 0xD0	; 208
 48e:	7f 2e       	mov	r7, r31
 490:	f0 2d       	mov	r31, r0
 492:	78 0e       	add	r7, r24
	
	// Error checking
	if(parPumps + seqPumps > MAXPUMPS)
 494:	87 2d       	mov	r24, r7
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	88 0d       	add	r24, r8
 49a:	91 1d       	adc	r25, r1
 49c:	07 97       	sbiw	r24, 0x07	; 7
 49e:	0c f0       	brlt	.+2      	; 0x4a2 <processRequest+0x62>
 4a0:	f6 c0       	rjmp	.+492    	; 0x68e <processRequest+0x24e>
		return NULL;
					
	if(parPumps > MAXPUMPS || parPumps < 0)
 4a2:	86 e0       	ldi	r24, 0x06	; 6
 4a4:	88 15       	cp	r24, r8
 4a6:	08 f4       	brcc	.+2      	; 0x4aa <processRequest+0x6a>
 4a8:	f5 c0       	rjmp	.+490    	; 0x694 <processRequest+0x254>
		return NULL;
		
	if(seqPumps > MAXPUMPS || seqPumps < 0)
 4aa:	87 15       	cp	r24, r7
 4ac:	08 f4       	brcc	.+2      	; 0x4b0 <processRequest+0x70>
 4ae:	f5 c0       	rjmp	.+490    	; 0x69a <processRequest+0x25a>
	
	/* Handle request */
	
	// Process parallel pump information
	uint8_t i = 0;
	if(parPumps > 0){
 4b0:	88 20       	and	r8, r8
 4b2:	09 f4       	brne	.+2      	; 0x4b6 <processRequest+0x76>
 4b4:	65 c0       	rjmp	.+202    	; 0x580 <processRequest+0x140>
 4b6:	e8 01       	movw	r28, r16
 4b8:	91 2c       	mov	r9, r1
		for(; i < parPumps; i++){
			UART_TString("OK");
 4ba:	8f e5       	ldi	r24, 0x5F	; 95
 4bc:	91 e0       	ldi	r25, 0x01	; 1
 4be:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
			// Get label info
			pumps[i].label = UART_Receive();
 4c2:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 4c6:	88 83       	st	Y, r24
			if(pumps[i].label < 65 || pumps[i].label > 70 )
 4c8:	81 54       	subi	r24, 0x41	; 65
 4ca:	86 30       	cpi	r24, 0x06	; 6
 4cc:	08 f0       	brcs	.+2      	; 0x4d0 <processRequest+0x90>
 4ce:	e8 c0       	rjmp	.+464    	; 0x6a0 <processRequest+0x260>
				return NULL;
			UART_TString("OK");
 4d0:	8f e5       	ldi	r24, 0x5F	; 95
 4d2:	91 e0       	ldi	r25, 0x01	; 1
 4d4:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
			// Get amount info
			uint8_t ones = UART_Receive() - 48;
 4d8:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 4dc:	0f 2e       	mov	r0, r31
 4de:	f0 ed       	ldi	r31, 0xD0	; 208
 4e0:	ff 2e       	mov	r15, r31
 4e2:	f0 2d       	mov	r31, r0
 4e4:	f8 0e       	add	r15, r24
			if(ones < 0 || ones > 8 )
 4e6:	e8 e0       	ldi	r30, 0x08	; 8
 4e8:	ef 15       	cp	r30, r15
 4ea:	08 f4       	brcc	.+2      	; 0x4ee <processRequest+0xae>
 4ec:	dc c0       	rjmp	.+440    	; 0x6a6 <processRequest+0x266>
				return NULL;
			if(UART_Receive() != '.')
 4ee:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 4f2:	8e 32       	cpi	r24, 0x2E	; 46
 4f4:	09 f0       	breq	.+2      	; 0x4f8 <processRequest+0xb8>
 4f6:	da c0       	rjmp	.+436    	; 0x6ac <processRequest+0x26c>
				return NULL;			
			uint8_t tens = UART_Receive() - 48;
 4f8:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 4fc:	0f 2e       	mov	r0, r31
 4fe:	f0 ed       	ldi	r31, 0xD0	; 208
 500:	6f 2e       	mov	r6, r31
 502:	f0 2d       	mov	r31, r0
 504:	68 0e       	add	r6, r24
			if(tens < 0 || tens > 9 )
 506:	f9 e0       	ldi	r31, 0x09	; 9
 508:	f6 15       	cp	r31, r6
 50a:	08 f4       	brcc	.+2      	; 0x50e <processRequest+0xce>
 50c:	d2 c0       	rjmp	.+420    	; 0x6b2 <processRequest+0x272>
				return NULL;			
			pumps[i].amount = (float)ones + (float)(tens)*0.1;
 50e:	6f 2d       	mov	r22, r15
 510:	70 e0       	ldi	r23, 0x00	; 0
 512:	80 e0       	ldi	r24, 0x00	; 0
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	0e 94 57 04 	call	0x8ae	; 0x8ae <__floatunsisf>
 51a:	6b 01       	movw	r12, r22
 51c:	7c 01       	movw	r14, r24
 51e:	66 2d       	mov	r22, r6
 520:	70 e0       	ldi	r23, 0x00	; 0
 522:	80 e0       	ldi	r24, 0x00	; 0
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	0e 94 57 04 	call	0x8ae	; 0x8ae <__floatunsisf>
 52a:	2d ec       	ldi	r18, 0xCD	; 205
 52c:	3c ec       	ldi	r19, 0xCC	; 204
 52e:	4c ec       	ldi	r20, 0xCC	; 204
 530:	5d e3       	ldi	r21, 0x3D	; 61
 532:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__mulsf3>
 536:	9b 01       	movw	r18, r22
 538:	ac 01       	movw	r20, r24
 53a:	c7 01       	movw	r24, r14
 53c:	b6 01       	movw	r22, r12
 53e:	0e 94 c3 03 	call	0x786	; 0x786 <__addsf3>
 542:	6b 01       	movw	r12, r22
 544:	7c 01       	movw	r14, r24
 546:	fe 01       	movw	r30, r28
 548:	61 83       	std	Z+1, r22	; 0x01
 54a:	72 83       	std	Z+2, r23	; 0x02
 54c:	83 83       	std	Z+3, r24	; 0x03
 54e:	94 83       	std	Z+4, r25	; 0x04
			if(pumps[i].amount < 0 || pumps[i].amount > 8)
 550:	20 e0       	ldi	r18, 0x00	; 0
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	a9 01       	movw	r20, r18
 556:	0e 94 27 04 	call	0x84e	; 0x84e <__cmpsf2>
 55a:	88 23       	and	r24, r24
 55c:	0c f4       	brge	.+2      	; 0x560 <processRequest+0x120>
 55e:	ac c0       	rjmp	.+344    	; 0x6b8 <processRequest+0x278>
 560:	20 e0       	ldi	r18, 0x00	; 0
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	40 e0       	ldi	r20, 0x00	; 0
 566:	51 e4       	ldi	r21, 0x41	; 65
 568:	c7 01       	movw	r24, r14
 56a:	b6 01       	movw	r22, r12
 56c:	0e 94 09 05 	call	0xa12	; 0xa12 <__gesf2>
 570:	18 16       	cp	r1, r24
 572:	0c f4       	brge	.+2      	; 0x576 <processRequest+0x136>
 574:	a4 c0       	rjmp	.+328    	; 0x6be <processRequest+0x27e>
	/* Handle request */
	
	// Process parallel pump information
	uint8_t i = 0;
	if(parPumps > 0){
		for(; i < parPumps; i++){
 576:	93 94       	inc	r9
 578:	2a 96       	adiw	r28, 0x0a	; 10
 57a:	89 10       	cpse	r8, r9
 57c:	9e cf       	rjmp	.-196    	; 0x4ba <processRequest+0x7a>
 57e:	01 c0       	rjmp	.+2      	; 0x582 <processRequest+0x142>
	
	
	/* Handle request */
	
	// Process parallel pump information
	uint8_t i = 0;
 580:	91 2c       	mov	r9, r1
				return NULL;
		}
	}
	// Process sequential pump information 
	uint8_t j = i + seqPumps;
	if(seqPumps > 0){
 582:	77 20       	and	r7, r7
 584:	09 f4       	brne	.+2      	; 0x588 <processRequest+0x148>
 586:	74 c0       	rjmp	.+232    	; 0x670 <processRequest+0x230>
			if(pumps[i].amount < 0 || pumps[i].amount > 8)
				return NULL;
		}
	}
	// Process sequential pump information 
	uint8_t j = i + seqPumps;
 588:	b9 2c       	mov	r11, r9
 58a:	b7 0c       	add	r11, r7
	if(seqPumps > 0){
		for(; i < j; i++){
 58c:	9b 14       	cp	r9, r11
 58e:	08 f0       	brcs	.+2      	; 0x592 <processRequest+0x152>
 590:	6f c0       	rjmp	.+222    	; 0x670 <processRequest+0x230>
			UART_TString("OK");
 592:	8f e5       	ldi	r24, 0x5F	; 95
 594:	91 e0       	ldi	r25, 0x01	; 1
 596:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
			// Get label info
			pumps[i].label = UART_Receive();
 59a:	89 2d       	mov	r24, r9
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	ec 01       	movw	r28, r24
 5a0:	cc 0f       	add	r28, r28
 5a2:	dd 1f       	adc	r29, r29
 5a4:	88 0f       	add	r24, r24
 5a6:	99 1f       	adc	r25, r25
 5a8:	88 0f       	add	r24, r24
 5aa:	99 1f       	adc	r25, r25
 5ac:	88 0f       	add	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	c8 0f       	add	r28, r24
 5b2:	d9 1f       	adc	r29, r25
 5b4:	c0 0f       	add	r28, r16
 5b6:	d1 1f       	adc	r29, r17
 5b8:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 5bc:	88 83       	st	Y, r24
			if(pumps[i].label < 65 || pumps[i].label > 70)
 5be:	81 54       	subi	r24, 0x41	; 65
 5c0:	86 30       	cpi	r24, 0x06	; 6
 5c2:	08 f0       	brcs	.+2      	; 0x5c6 <processRequest+0x186>
 5c4:	7f c0       	rjmp	.+254    	; 0x6c4 <processRequest+0x284>
				return NULL;
			UART_TString("OK");
 5c6:	8f e5       	ldi	r24, 0x5F	; 95
 5c8:	91 e0       	ldi	r25, 0x01	; 1
 5ca:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
			// Get amount info
			uint8_t ones = UART_Receive() - 48;
 5ce:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 5d2:	0f 2e       	mov	r0, r31
 5d4:	f0 ed       	ldi	r31, 0xD0	; 208
 5d6:	ff 2e       	mov	r15, r31
 5d8:	f0 2d       	mov	r31, r0
 5da:	f8 0e       	add	r15, r24
			if(ones < 0 || ones > 8 )
 5dc:	f8 e0       	ldi	r31, 0x08	; 8
 5de:	ff 15       	cp	r31, r15
 5e0:	08 f4       	brcc	.+2      	; 0x5e4 <processRequest+0x1a4>
 5e2:	73 c0       	rjmp	.+230    	; 0x6ca <processRequest+0x28a>
				return NULL;
			if(UART_Receive() != '.')
 5e4:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 5e8:	8e 32       	cpi	r24, 0x2E	; 46
 5ea:	09 f0       	breq	.+2      	; 0x5ee <processRequest+0x1ae>
 5ec:	71 c0       	rjmp	.+226    	; 0x6d0 <processRequest+0x290>
				return NULL;			
			uint8_t tens = UART_Receive() - 48;
 5ee:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
 5f2:	0f 2e       	mov	r0, r31
 5f4:	f0 ed       	ldi	r31, 0xD0	; 208
 5f6:	af 2e       	mov	r10, r31
 5f8:	f0 2d       	mov	r31, r0
 5fa:	a8 0e       	add	r10, r24
			if(tens < 0 || tens > 9 )
 5fc:	89 e0       	ldi	r24, 0x09	; 9
 5fe:	8a 15       	cp	r24, r10
 600:	08 f4       	brcc	.+2      	; 0x604 <processRequest+0x1c4>
 602:	69 c0       	rjmp	.+210    	; 0x6d6 <processRequest+0x296>
				return NULL;			
			pumps[i].amount = (float)ones + (float)(tens)*0.1;
 604:	6f 2d       	mov	r22, r15
 606:	70 e0       	ldi	r23, 0x00	; 0
 608:	80 e0       	ldi	r24, 0x00	; 0
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	0e 94 57 04 	call	0x8ae	; 0x8ae <__floatunsisf>
 610:	6b 01       	movw	r12, r22
 612:	7c 01       	movw	r14, r24
 614:	6a 2d       	mov	r22, r10
 616:	70 e0       	ldi	r23, 0x00	; 0
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	0e 94 57 04 	call	0x8ae	; 0x8ae <__floatunsisf>
 620:	2d ec       	ldi	r18, 0xCD	; 205
 622:	3c ec       	ldi	r19, 0xCC	; 204
 624:	4c ec       	ldi	r20, 0xCC	; 204
 626:	5d e3       	ldi	r21, 0x3D	; 61
 628:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__mulsf3>
 62c:	9b 01       	movw	r18, r22
 62e:	ac 01       	movw	r20, r24
 630:	c7 01       	movw	r24, r14
 632:	b6 01       	movw	r22, r12
 634:	0e 94 c3 03 	call	0x786	; 0x786 <__addsf3>
 638:	6b 01       	movw	r12, r22
 63a:	7c 01       	movw	r14, r24
 63c:	69 83       	std	Y+1, r22	; 0x01
 63e:	7a 83       	std	Y+2, r23	; 0x02
 640:	8b 83       	std	Y+3, r24	; 0x03
 642:	9c 83       	std	Y+4, r25	; 0x04
			if(pumps[i].amount < 0 || pumps[i].amount > 8)
 644:	20 e0       	ldi	r18, 0x00	; 0
 646:	30 e0       	ldi	r19, 0x00	; 0
 648:	a9 01       	movw	r20, r18
 64a:	0e 94 27 04 	call	0x84e	; 0x84e <__cmpsf2>
 64e:	88 23       	and	r24, r24
 650:	0c f4       	brge	.+2      	; 0x654 <processRequest+0x214>
 652:	44 c0       	rjmp	.+136    	; 0x6dc <processRequest+0x29c>
 654:	20 e0       	ldi	r18, 0x00	; 0
 656:	30 e0       	ldi	r19, 0x00	; 0
 658:	40 e0       	ldi	r20, 0x00	; 0
 65a:	51 e4       	ldi	r21, 0x41	; 65
 65c:	c7 01       	movw	r24, r14
 65e:	b6 01       	movw	r22, r12
 660:	0e 94 09 05 	call	0xa12	; 0xa12 <__gesf2>
 664:	18 16       	cp	r1, r24
 666:	ec f1       	brlt	.+122    	; 0x6e2 <processRequest+0x2a2>
		}
	}
	// Process sequential pump information 
	uint8_t j = i + seqPumps;
	if(seqPumps > 0){
		for(; i < j; i++){
 668:	93 94       	inc	r9
 66a:	9b 14       	cp	r9, r11
 66c:	08 f4       	brcc	.+2      	; 0x670 <processRequest+0x230>
 66e:	91 cf       	rjmp	.-222    	; 0x592 <processRequest+0x152>
			pumps[i].amount = (float)ones + (float)(tens)*0.1;
			if(pumps[i].amount < 0 || pumps[i].amount > 8)
				return NULL;
		}
	}
	UART_TString("OK");
 670:	8f e5       	ldi	r24, 0x5F	; 95
 672:	91 e0       	ldi	r25, 0x01	; 1
 674:	0e 94 66 00 	call	0xcc	; 0xcc <UART_TString>
	
	/* Create and return the request */
	
	request* req = (request*)malloc(sizeof(request));
 678:	84 e0       	ldi	r24, 0x04	; 4
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	0e 94 70 05 	call	0xae0	; 0xae0 <malloc>
 680:	fc 01       	movw	r30, r24
	req->pumps = pumps;
 682:	11 83       	std	Z+1, r17	; 0x01
 684:	00 83       	st	Z, r16
	req->parPumps = parPumps;
 686:	82 82       	std	Z+2, r8	; 0x02
	req->seqPumps = seqPumps;
 688:	73 82       	std	Z+3, r7	; 0x03
	return req;
 68a:	9f 2f       	mov	r25, r31
 68c:	2c c0       	rjmp	.+88     	; 0x6e6 <processRequest+0x2a6>
	unsigned char seqPumps = UART_Receive();
	parPumps -= 48; seqPumps -= 48;
	
	// Error checking
	if(parPumps + seqPumps > MAXPUMPS)
		return NULL;
 68e:	80 e0       	ldi	r24, 0x00	; 0
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	29 c0       	rjmp	.+82     	; 0x6e6 <processRequest+0x2a6>
					
	if(parPumps > MAXPUMPS || parPumps < 0)
		return NULL;
 694:	80 e0       	ldi	r24, 0x00	; 0
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	26 c0       	rjmp	.+76     	; 0x6e6 <processRequest+0x2a6>
		
	if(seqPumps > MAXPUMPS || seqPumps < 0)
		return NULL;
 69a:	80 e0       	ldi	r24, 0x00	; 0
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	23 c0       	rjmp	.+70     	; 0x6e6 <processRequest+0x2a6>
		for(; i < parPumps; i++){
			UART_TString("OK");
			// Get label info
			pumps[i].label = UART_Receive();
			if(pumps[i].label < 65 || pumps[i].label > 70 )
				return NULL;
 6a0:	80 e0       	ldi	r24, 0x00	; 0
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	20 c0       	rjmp	.+64     	; 0x6e6 <processRequest+0x2a6>
			UART_TString("OK");
			// Get amount info
			uint8_t ones = UART_Receive() - 48;
			if(ones < 0 || ones > 8 )
				return NULL;
 6a6:	80 e0       	ldi	r24, 0x00	; 0
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	1d c0       	rjmp	.+58     	; 0x6e6 <processRequest+0x2a6>
			if(UART_Receive() != '.')
				return NULL;			
 6ac:	80 e0       	ldi	r24, 0x00	; 0
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	1a c0       	rjmp	.+52     	; 0x6e6 <processRequest+0x2a6>
			uint8_t tens = UART_Receive() - 48;
			if(tens < 0 || tens > 9 )
				return NULL;			
 6b2:	80 e0       	ldi	r24, 0x00	; 0
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	17 c0       	rjmp	.+46     	; 0x6e6 <processRequest+0x2a6>
			pumps[i].amount = (float)ones + (float)(tens)*0.1;
			if(pumps[i].amount < 0 || pumps[i].amount > 8)
				return NULL;
 6b8:	80 e0       	ldi	r24, 0x00	; 0
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	14 c0       	rjmp	.+40     	; 0x6e6 <processRequest+0x2a6>
 6be:	80 e0       	ldi	r24, 0x00	; 0
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	11 c0       	rjmp	.+34     	; 0x6e6 <processRequest+0x2a6>
		for(; i < j; i++){
			UART_TString("OK");
			// Get label info
			pumps[i].label = UART_Receive();
			if(pumps[i].label < 65 || pumps[i].label > 70)
				return NULL;
 6c4:	80 e0       	ldi	r24, 0x00	; 0
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	0e c0       	rjmp	.+28     	; 0x6e6 <processRequest+0x2a6>
			UART_TString("OK");
			// Get amount info
			uint8_t ones = UART_Receive() - 48;
			if(ones < 0 || ones > 8 )
				return NULL;
 6ca:	80 e0       	ldi	r24, 0x00	; 0
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	0b c0       	rjmp	.+22     	; 0x6e6 <processRequest+0x2a6>
			if(UART_Receive() != '.')
				return NULL;			
 6d0:	80 e0       	ldi	r24, 0x00	; 0
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	08 c0       	rjmp	.+16     	; 0x6e6 <processRequest+0x2a6>
			uint8_t tens = UART_Receive() - 48;
			if(tens < 0 || tens > 9 )
				return NULL;			
 6d6:	80 e0       	ldi	r24, 0x00	; 0
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	05 c0       	rjmp	.+10     	; 0x6e6 <processRequest+0x2a6>
			pumps[i].amount = (float)ones + (float)(tens)*0.1;
			if(pumps[i].amount < 0 || pumps[i].amount > 8)
				return NULL;
 6dc:	80 e0       	ldi	r24, 0x00	; 0
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <processRequest+0x2a6>
 6e2:	80 e0       	ldi	r24, 0x00	; 0
 6e4:	90 e0       	ldi	r25, 0x00	; 0
	request* req = (request*)malloc(sizeof(request));
	req->pumps = pumps;
	req->parPumps = parPumps;
	req->seqPumps = seqPumps;
	return req;
}
 6e6:	df 91       	pop	r29
 6e8:	cf 91       	pop	r28
 6ea:	1f 91       	pop	r17
 6ec:	0f 91       	pop	r16
 6ee:	ff 90       	pop	r15
 6f0:	ef 90       	pop	r14
 6f2:	df 90       	pop	r13
 6f4:	cf 90       	pop	r12
 6f6:	bf 90       	pop	r11
 6f8:	af 90       	pop	r10
 6fa:	9f 90       	pop	r9
 6fc:	8f 90       	pop	r8
 6fe:	7f 90       	pop	r7
 700:	6f 90       	pop	r6
 702:	08 95       	ret

00000704 <main>:
	* Change UART transmitted messages as necessary 
*/

/* Entry point */
int main(void){
	init();
 704:	0e 94 0c 02 	call	0x418	; 0x418 <init>
	request* req;
	/* Primary loop */
	while(1){	
		println("Ready.");
 708:	82 e6       	ldi	r24, 0x62	; 98
 70a:	91 e0       	ldi	r25, 0x01	; 1
 70c:	0e 94 82 00 	call	0x104	; 0x104 <println>
		unsigned char temp = UART_Receive();
 710:	0e 94 87 00 	call	0x10e	; 0x10e <UART_Receive>
		if(temp == 'R'){
 714:	82 35       	cpi	r24, 0x52	; 82
 716:	89 f5       	brne	.+98     	; 0x77a <main+0x76>
			if((req = processRequest()) == NULL){
 718:	0e 94 20 02 	call	0x440	; 0x440 <processRequest>
 71c:	ec 01       	movw	r28, r24
 71e:	00 97       	sbiw	r24, 0x00	; 0
 720:	39 f4       	brne	.+14     	; 0x730 <main+0x2c>
				CRLF();
 722:	0e 94 7b 00 	call	0xf6	; 0xf6 <CRLF>
				println("ERROR: Failed to process request!");
 726:	89 e6       	ldi	r24, 0x69	; 105
 728:	91 e0       	ldi	r25, 0x01	; 1
 72a:	0e 94 82 00 	call	0x104	; 0x104 <println>
				continue;
 72e:	ec cf       	rjmp	.-40     	; 0x708 <main+0x4>
			}
			CRLF();
 730:	0e 94 7b 00 	call	0xf6	; 0xf6 <CRLF>
			if(req->parPumps > 0){
 734:	8a 81       	ldd	r24, Y+2	; 0x02
 736:	88 23       	and	r24, r24
 738:	61 f0       	breq	.+24     	; 0x752 <main+0x4e>
				parallelDispense(req);
 73a:	ce 01       	movw	r24, r28
 73c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <parallelDispense>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 740:	2f ef       	ldi	r18, 0xFF	; 255
 742:	83 ed       	ldi	r24, 0xD3	; 211
 744:	90 e3       	ldi	r25, 0x30	; 48
 746:	21 50       	subi	r18, 0x01	; 1
 748:	80 40       	sbci	r24, 0x00	; 0
 74a:	90 40       	sbci	r25, 0x00	; 0
 74c:	e1 f7       	brne	.-8      	; 0x746 <main+0x42>
 74e:	00 c0       	rjmp	.+0      	; 0x750 <main+0x4c>
 750:	00 00       	nop
				_delay_ms(MODEDELAY); // Delay between modes, will tweak
			}
			if(req->seqPumps > 0){
 752:	8b 81       	ldd	r24, Y+3	; 0x03
 754:	88 23       	and	r24, r24
 756:	61 f0       	breq	.+24     	; 0x770 <main+0x6c>
				sequentialDispense(req);
 758:	ce 01       	movw	r24, r28
 75a:	0e 94 b3 01 	call	0x366	; 0x366 <sequentialDispense>
 75e:	2f ef       	ldi	r18, 0xFF	; 255
 760:	83 ed       	ldi	r24, 0xD3	; 211
 762:	90 e3       	ldi	r25, 0x30	; 48
 764:	21 50       	subi	r18, 0x01	; 1
 766:	80 40       	sbci	r24, 0x00	; 0
 768:	90 40       	sbci	r25, 0x00	; 0
 76a:	e1 f7       	brne	.-8      	; 0x764 <main+0x60>
 76c:	00 c0       	rjmp	.+0      	; 0x76e <main+0x6a>
 76e:	00 00       	nop
				_delay_ms(MODEDELAY); // Delay between modes, will tweak
			}
			println("Request completed");			
 770:	8b e8       	ldi	r24, 0x8B	; 139
 772:	91 e0       	ldi	r25, 0x01	; 1
 774:	0e 94 82 00 	call	0x104	; 0x104 <println>
 778:	c7 cf       	rjmp	.-114    	; 0x708 <main+0x4>
		}
		else
			println("Invalid request command");
 77a:	8d e9       	ldi	r24, 0x9D	; 157
 77c:	91 e0       	ldi	r25, 0x01	; 1
 77e:	0e 94 82 00 	call	0x104	; 0x104 <println>
 782:	c2 cf       	rjmp	.-124    	; 0x708 <main+0x4>

00000784 <__subsf3>:
 784:	50 58       	subi	r21, 0x80	; 128

00000786 <__addsf3>:
 786:	bb 27       	eor	r27, r27
 788:	aa 27       	eor	r26, r26
 78a:	0e d0       	rcall	.+28     	; 0x7a8 <__addsf3x>
 78c:	08 c1       	rjmp	.+528    	; 0x99e <__fp_round>
 78e:	f9 d0       	rcall	.+498    	; 0x982 <__fp_pscA>
 790:	30 f0       	brcs	.+12     	; 0x79e <__addsf3+0x18>
 792:	fe d0       	rcall	.+508    	; 0x990 <__fp_pscB>
 794:	20 f0       	brcs	.+8      	; 0x79e <__addsf3+0x18>
 796:	31 f4       	brne	.+12     	; 0x7a4 <__addsf3+0x1e>
 798:	9f 3f       	cpi	r25, 0xFF	; 255
 79a:	11 f4       	brne	.+4      	; 0x7a0 <__addsf3+0x1a>
 79c:	1e f4       	brtc	.+6      	; 0x7a4 <__addsf3+0x1e>
 79e:	ee c0       	rjmp	.+476    	; 0x97c <__fp_nan>
 7a0:	0e f4       	brtc	.+2      	; 0x7a4 <__addsf3+0x1e>
 7a2:	e0 95       	com	r30
 7a4:	e7 fb       	bst	r30, 7
 7a6:	e4 c0       	rjmp	.+456    	; 0x970 <__fp_inf>

000007a8 <__addsf3x>:
 7a8:	e9 2f       	mov	r30, r25
 7aa:	0a d1       	rcall	.+532    	; 0x9c0 <__fp_split3>
 7ac:	80 f3       	brcs	.-32     	; 0x78e <__addsf3+0x8>
 7ae:	ba 17       	cp	r27, r26
 7b0:	62 07       	cpc	r22, r18
 7b2:	73 07       	cpc	r23, r19
 7b4:	84 07       	cpc	r24, r20
 7b6:	95 07       	cpc	r25, r21
 7b8:	18 f0       	brcs	.+6      	; 0x7c0 <__addsf3x+0x18>
 7ba:	71 f4       	brne	.+28     	; 0x7d8 <__addsf3x+0x30>
 7bc:	9e f5       	brtc	.+102    	; 0x824 <__addsf3x+0x7c>
 7be:	22 c1       	rjmp	.+580    	; 0xa04 <__fp_zero>
 7c0:	0e f4       	brtc	.+2      	; 0x7c4 <__addsf3x+0x1c>
 7c2:	e0 95       	com	r30
 7c4:	0b 2e       	mov	r0, r27
 7c6:	ba 2f       	mov	r27, r26
 7c8:	a0 2d       	mov	r26, r0
 7ca:	0b 01       	movw	r0, r22
 7cc:	b9 01       	movw	r22, r18
 7ce:	90 01       	movw	r18, r0
 7d0:	0c 01       	movw	r0, r24
 7d2:	ca 01       	movw	r24, r20
 7d4:	a0 01       	movw	r20, r0
 7d6:	11 24       	eor	r1, r1
 7d8:	ff 27       	eor	r31, r31
 7da:	59 1b       	sub	r21, r25
 7dc:	99 f0       	breq	.+38     	; 0x804 <__addsf3x+0x5c>
 7de:	59 3f       	cpi	r21, 0xF9	; 249
 7e0:	50 f4       	brcc	.+20     	; 0x7f6 <__addsf3x+0x4e>
 7e2:	50 3e       	cpi	r21, 0xE0	; 224
 7e4:	68 f1       	brcs	.+90     	; 0x840 <__addsf3x+0x98>
 7e6:	1a 16       	cp	r1, r26
 7e8:	f0 40       	sbci	r31, 0x00	; 0
 7ea:	a2 2f       	mov	r26, r18
 7ec:	23 2f       	mov	r18, r19
 7ee:	34 2f       	mov	r19, r20
 7f0:	44 27       	eor	r20, r20
 7f2:	58 5f       	subi	r21, 0xF8	; 248
 7f4:	f3 cf       	rjmp	.-26     	; 0x7dc <__addsf3x+0x34>
 7f6:	46 95       	lsr	r20
 7f8:	37 95       	ror	r19
 7fa:	27 95       	ror	r18
 7fc:	a7 95       	ror	r26
 7fe:	f0 40       	sbci	r31, 0x00	; 0
 800:	53 95       	inc	r21
 802:	c9 f7       	brne	.-14     	; 0x7f6 <__addsf3x+0x4e>
 804:	7e f4       	brtc	.+30     	; 0x824 <__addsf3x+0x7c>
 806:	1f 16       	cp	r1, r31
 808:	ba 0b       	sbc	r27, r26
 80a:	62 0b       	sbc	r22, r18
 80c:	73 0b       	sbc	r23, r19
 80e:	84 0b       	sbc	r24, r20
 810:	ba f0       	brmi	.+46     	; 0x840 <__addsf3x+0x98>
 812:	91 50       	subi	r25, 0x01	; 1
 814:	a1 f0       	breq	.+40     	; 0x83e <__addsf3x+0x96>
 816:	ff 0f       	add	r31, r31
 818:	bb 1f       	adc	r27, r27
 81a:	66 1f       	adc	r22, r22
 81c:	77 1f       	adc	r23, r23
 81e:	88 1f       	adc	r24, r24
 820:	c2 f7       	brpl	.-16     	; 0x812 <__addsf3x+0x6a>
 822:	0e c0       	rjmp	.+28     	; 0x840 <__addsf3x+0x98>
 824:	ba 0f       	add	r27, r26
 826:	62 1f       	adc	r22, r18
 828:	73 1f       	adc	r23, r19
 82a:	84 1f       	adc	r24, r20
 82c:	48 f4       	brcc	.+18     	; 0x840 <__addsf3x+0x98>
 82e:	87 95       	ror	r24
 830:	77 95       	ror	r23
 832:	67 95       	ror	r22
 834:	b7 95       	ror	r27
 836:	f7 95       	ror	r31
 838:	9e 3f       	cpi	r25, 0xFE	; 254
 83a:	08 f0       	brcs	.+2      	; 0x83e <__addsf3x+0x96>
 83c:	b3 cf       	rjmp	.-154    	; 0x7a4 <__addsf3+0x1e>
 83e:	93 95       	inc	r25
 840:	88 0f       	add	r24, r24
 842:	08 f0       	brcs	.+2      	; 0x846 <__addsf3x+0x9e>
 844:	99 27       	eor	r25, r25
 846:	ee 0f       	add	r30, r30
 848:	97 95       	ror	r25
 84a:	87 95       	ror	r24
 84c:	08 95       	ret

0000084e <__cmpsf2>:
 84e:	6c d0       	rcall	.+216    	; 0x928 <__fp_cmp>
 850:	08 f4       	brcc	.+2      	; 0x854 <__cmpsf2+0x6>
 852:	81 e0       	ldi	r24, 0x01	; 1
 854:	08 95       	ret

00000856 <__fixunssfsi>:
 856:	bc d0       	rcall	.+376    	; 0x9d0 <__fp_splitA>
 858:	88 f0       	brcs	.+34     	; 0x87c <__fixunssfsi+0x26>
 85a:	9f 57       	subi	r25, 0x7F	; 127
 85c:	90 f0       	brcs	.+36     	; 0x882 <__fixunssfsi+0x2c>
 85e:	b9 2f       	mov	r27, r25
 860:	99 27       	eor	r25, r25
 862:	b7 51       	subi	r27, 0x17	; 23
 864:	a0 f0       	brcs	.+40     	; 0x88e <__fixunssfsi+0x38>
 866:	d1 f0       	breq	.+52     	; 0x89c <__fixunssfsi+0x46>
 868:	66 0f       	add	r22, r22
 86a:	77 1f       	adc	r23, r23
 86c:	88 1f       	adc	r24, r24
 86e:	99 1f       	adc	r25, r25
 870:	1a f0       	brmi	.+6      	; 0x878 <__fixunssfsi+0x22>
 872:	ba 95       	dec	r27
 874:	c9 f7       	brne	.-14     	; 0x868 <__fixunssfsi+0x12>
 876:	12 c0       	rjmp	.+36     	; 0x89c <__fixunssfsi+0x46>
 878:	b1 30       	cpi	r27, 0x01	; 1
 87a:	81 f0       	breq	.+32     	; 0x89c <__fixunssfsi+0x46>
 87c:	c3 d0       	rcall	.+390    	; 0xa04 <__fp_zero>
 87e:	b1 e0       	ldi	r27, 0x01	; 1
 880:	08 95       	ret
 882:	c0 c0       	rjmp	.+384    	; 0xa04 <__fp_zero>
 884:	67 2f       	mov	r22, r23
 886:	78 2f       	mov	r23, r24
 888:	88 27       	eor	r24, r24
 88a:	b8 5f       	subi	r27, 0xF8	; 248
 88c:	39 f0       	breq	.+14     	; 0x89c <__fixunssfsi+0x46>
 88e:	b9 3f       	cpi	r27, 0xF9	; 249
 890:	cc f3       	brlt	.-14     	; 0x884 <__fixunssfsi+0x2e>
 892:	86 95       	lsr	r24
 894:	77 95       	ror	r23
 896:	67 95       	ror	r22
 898:	b3 95       	inc	r27
 89a:	d9 f7       	brne	.-10     	; 0x892 <__fixunssfsi+0x3c>
 89c:	3e f4       	brtc	.+14     	; 0x8ac <__fixunssfsi+0x56>
 89e:	90 95       	com	r25
 8a0:	80 95       	com	r24
 8a2:	70 95       	com	r23
 8a4:	61 95       	neg	r22
 8a6:	7f 4f       	sbci	r23, 0xFF	; 255
 8a8:	8f 4f       	sbci	r24, 0xFF	; 255
 8aa:	9f 4f       	sbci	r25, 0xFF	; 255
 8ac:	08 95       	ret

000008ae <__floatunsisf>:
 8ae:	e8 94       	clt
 8b0:	09 c0       	rjmp	.+18     	; 0x8c4 <__floatsisf+0x12>

000008b2 <__floatsisf>:
 8b2:	97 fb       	bst	r25, 7
 8b4:	3e f4       	brtc	.+14     	; 0x8c4 <__floatsisf+0x12>
 8b6:	90 95       	com	r25
 8b8:	80 95       	com	r24
 8ba:	70 95       	com	r23
 8bc:	61 95       	neg	r22
 8be:	7f 4f       	sbci	r23, 0xFF	; 255
 8c0:	8f 4f       	sbci	r24, 0xFF	; 255
 8c2:	9f 4f       	sbci	r25, 0xFF	; 255
 8c4:	99 23       	and	r25, r25
 8c6:	a9 f0       	breq	.+42     	; 0x8f2 <__floatsisf+0x40>
 8c8:	f9 2f       	mov	r31, r25
 8ca:	96 e9       	ldi	r25, 0x96	; 150
 8cc:	bb 27       	eor	r27, r27
 8ce:	93 95       	inc	r25
 8d0:	f6 95       	lsr	r31
 8d2:	87 95       	ror	r24
 8d4:	77 95       	ror	r23
 8d6:	67 95       	ror	r22
 8d8:	b7 95       	ror	r27
 8da:	f1 11       	cpse	r31, r1
 8dc:	f8 cf       	rjmp	.-16     	; 0x8ce <__floatsisf+0x1c>
 8de:	fa f4       	brpl	.+62     	; 0x91e <__stack+0x1f>
 8e0:	bb 0f       	add	r27, r27
 8e2:	11 f4       	brne	.+4      	; 0x8e8 <__floatsisf+0x36>
 8e4:	60 ff       	sbrs	r22, 0
 8e6:	1b c0       	rjmp	.+54     	; 0x91e <__stack+0x1f>
 8e8:	6f 5f       	subi	r22, 0xFF	; 255
 8ea:	7f 4f       	sbci	r23, 0xFF	; 255
 8ec:	8f 4f       	sbci	r24, 0xFF	; 255
 8ee:	9f 4f       	sbci	r25, 0xFF	; 255
 8f0:	16 c0       	rjmp	.+44     	; 0x91e <__stack+0x1f>
 8f2:	88 23       	and	r24, r24
 8f4:	11 f0       	breq	.+4      	; 0x8fa <__floatsisf+0x48>
 8f6:	96 e9       	ldi	r25, 0x96	; 150
 8f8:	11 c0       	rjmp	.+34     	; 0x91c <__stack+0x1d>
 8fa:	77 23       	and	r23, r23
 8fc:	21 f0       	breq	.+8      	; 0x906 <__stack+0x7>
 8fe:	9e e8       	ldi	r25, 0x8E	; 142
 900:	87 2f       	mov	r24, r23
 902:	76 2f       	mov	r23, r22
 904:	05 c0       	rjmp	.+10     	; 0x910 <__stack+0x11>
 906:	66 23       	and	r22, r22
 908:	71 f0       	breq	.+28     	; 0x926 <__stack+0x27>
 90a:	96 e8       	ldi	r25, 0x86	; 134
 90c:	86 2f       	mov	r24, r22
 90e:	70 e0       	ldi	r23, 0x00	; 0
 910:	60 e0       	ldi	r22, 0x00	; 0
 912:	2a f0       	brmi	.+10     	; 0x91e <__stack+0x1f>
 914:	9a 95       	dec	r25
 916:	66 0f       	add	r22, r22
 918:	77 1f       	adc	r23, r23
 91a:	88 1f       	adc	r24, r24
 91c:	da f7       	brpl	.-10     	; 0x914 <__stack+0x15>
 91e:	88 0f       	add	r24, r24
 920:	96 95       	lsr	r25
 922:	87 95       	ror	r24
 924:	97 f9       	bld	r25, 7
 926:	08 95       	ret

00000928 <__fp_cmp>:
 928:	99 0f       	add	r25, r25
 92a:	00 08       	sbc	r0, r0
 92c:	55 0f       	add	r21, r21
 92e:	aa 0b       	sbc	r26, r26
 930:	e0 e8       	ldi	r30, 0x80	; 128
 932:	fe ef       	ldi	r31, 0xFE	; 254
 934:	16 16       	cp	r1, r22
 936:	17 06       	cpc	r1, r23
 938:	e8 07       	cpc	r30, r24
 93a:	f9 07       	cpc	r31, r25
 93c:	c0 f0       	brcs	.+48     	; 0x96e <__fp_cmp+0x46>
 93e:	12 16       	cp	r1, r18
 940:	13 06       	cpc	r1, r19
 942:	e4 07       	cpc	r30, r20
 944:	f5 07       	cpc	r31, r21
 946:	98 f0       	brcs	.+38     	; 0x96e <__fp_cmp+0x46>
 948:	62 1b       	sub	r22, r18
 94a:	73 0b       	sbc	r23, r19
 94c:	84 0b       	sbc	r24, r20
 94e:	95 0b       	sbc	r25, r21
 950:	39 f4       	brne	.+14     	; 0x960 <__fp_cmp+0x38>
 952:	0a 26       	eor	r0, r26
 954:	61 f0       	breq	.+24     	; 0x96e <__fp_cmp+0x46>
 956:	23 2b       	or	r18, r19
 958:	24 2b       	or	r18, r20
 95a:	25 2b       	or	r18, r21
 95c:	21 f4       	brne	.+8      	; 0x966 <__fp_cmp+0x3e>
 95e:	08 95       	ret
 960:	0a 26       	eor	r0, r26
 962:	09 f4       	brne	.+2      	; 0x966 <__fp_cmp+0x3e>
 964:	a1 40       	sbci	r26, 0x01	; 1
 966:	a6 95       	lsr	r26
 968:	8f ef       	ldi	r24, 0xFF	; 255
 96a:	81 1d       	adc	r24, r1
 96c:	81 1d       	adc	r24, r1
 96e:	08 95       	ret

00000970 <__fp_inf>:
 970:	97 f9       	bld	r25, 7
 972:	9f 67       	ori	r25, 0x7F	; 127
 974:	80 e8       	ldi	r24, 0x80	; 128
 976:	70 e0       	ldi	r23, 0x00	; 0
 978:	60 e0       	ldi	r22, 0x00	; 0
 97a:	08 95       	ret

0000097c <__fp_nan>:
 97c:	9f ef       	ldi	r25, 0xFF	; 255
 97e:	80 ec       	ldi	r24, 0xC0	; 192
 980:	08 95       	ret

00000982 <__fp_pscA>:
 982:	00 24       	eor	r0, r0
 984:	0a 94       	dec	r0
 986:	16 16       	cp	r1, r22
 988:	17 06       	cpc	r1, r23
 98a:	18 06       	cpc	r1, r24
 98c:	09 06       	cpc	r0, r25
 98e:	08 95       	ret

00000990 <__fp_pscB>:
 990:	00 24       	eor	r0, r0
 992:	0a 94       	dec	r0
 994:	12 16       	cp	r1, r18
 996:	13 06       	cpc	r1, r19
 998:	14 06       	cpc	r1, r20
 99a:	05 06       	cpc	r0, r21
 99c:	08 95       	ret

0000099e <__fp_round>:
 99e:	09 2e       	mov	r0, r25
 9a0:	03 94       	inc	r0
 9a2:	00 0c       	add	r0, r0
 9a4:	11 f4       	brne	.+4      	; 0x9aa <__fp_round+0xc>
 9a6:	88 23       	and	r24, r24
 9a8:	52 f0       	brmi	.+20     	; 0x9be <__fp_round+0x20>
 9aa:	bb 0f       	add	r27, r27
 9ac:	40 f4       	brcc	.+16     	; 0x9be <__fp_round+0x20>
 9ae:	bf 2b       	or	r27, r31
 9b0:	11 f4       	brne	.+4      	; 0x9b6 <__fp_round+0x18>
 9b2:	60 ff       	sbrs	r22, 0
 9b4:	04 c0       	rjmp	.+8      	; 0x9be <__fp_round+0x20>
 9b6:	6f 5f       	subi	r22, 0xFF	; 255
 9b8:	7f 4f       	sbci	r23, 0xFF	; 255
 9ba:	8f 4f       	sbci	r24, 0xFF	; 255
 9bc:	9f 4f       	sbci	r25, 0xFF	; 255
 9be:	08 95       	ret

000009c0 <__fp_split3>:
 9c0:	57 fd       	sbrc	r21, 7
 9c2:	90 58       	subi	r25, 0x80	; 128
 9c4:	44 0f       	add	r20, r20
 9c6:	55 1f       	adc	r21, r21
 9c8:	59 f0       	breq	.+22     	; 0x9e0 <__fp_splitA+0x10>
 9ca:	5f 3f       	cpi	r21, 0xFF	; 255
 9cc:	71 f0       	breq	.+28     	; 0x9ea <__fp_splitA+0x1a>
 9ce:	47 95       	ror	r20

000009d0 <__fp_splitA>:
 9d0:	88 0f       	add	r24, r24
 9d2:	97 fb       	bst	r25, 7
 9d4:	99 1f       	adc	r25, r25
 9d6:	61 f0       	breq	.+24     	; 0x9f0 <__fp_splitA+0x20>
 9d8:	9f 3f       	cpi	r25, 0xFF	; 255
 9da:	79 f0       	breq	.+30     	; 0x9fa <__fp_splitA+0x2a>
 9dc:	87 95       	ror	r24
 9de:	08 95       	ret
 9e0:	12 16       	cp	r1, r18
 9e2:	13 06       	cpc	r1, r19
 9e4:	14 06       	cpc	r1, r20
 9e6:	55 1f       	adc	r21, r21
 9e8:	f2 cf       	rjmp	.-28     	; 0x9ce <__fp_split3+0xe>
 9ea:	46 95       	lsr	r20
 9ec:	f1 df       	rcall	.-30     	; 0x9d0 <__fp_splitA>
 9ee:	08 c0       	rjmp	.+16     	; 0xa00 <__fp_splitA+0x30>
 9f0:	16 16       	cp	r1, r22
 9f2:	17 06       	cpc	r1, r23
 9f4:	18 06       	cpc	r1, r24
 9f6:	99 1f       	adc	r25, r25
 9f8:	f1 cf       	rjmp	.-30     	; 0x9dc <__fp_splitA+0xc>
 9fa:	86 95       	lsr	r24
 9fc:	71 05       	cpc	r23, r1
 9fe:	61 05       	cpc	r22, r1
 a00:	08 94       	sec
 a02:	08 95       	ret

00000a04 <__fp_zero>:
 a04:	e8 94       	clt

00000a06 <__fp_szero>:
 a06:	bb 27       	eor	r27, r27
 a08:	66 27       	eor	r22, r22
 a0a:	77 27       	eor	r23, r23
 a0c:	cb 01       	movw	r24, r22
 a0e:	97 f9       	bld	r25, 7
 a10:	08 95       	ret

00000a12 <__gesf2>:
 a12:	8a df       	rcall	.-236    	; 0x928 <__fp_cmp>
 a14:	08 f4       	brcc	.+2      	; 0xa18 <__gesf2+0x6>
 a16:	8f ef       	ldi	r24, 0xFF	; 255
 a18:	08 95       	ret

00000a1a <__mulsf3>:
 a1a:	0b d0       	rcall	.+22     	; 0xa32 <__mulsf3x>
 a1c:	c0 cf       	rjmp	.-128    	; 0x99e <__fp_round>
 a1e:	b1 df       	rcall	.-158    	; 0x982 <__fp_pscA>
 a20:	28 f0       	brcs	.+10     	; 0xa2c <__mulsf3+0x12>
 a22:	b6 df       	rcall	.-148    	; 0x990 <__fp_pscB>
 a24:	18 f0       	brcs	.+6      	; 0xa2c <__mulsf3+0x12>
 a26:	95 23       	and	r25, r21
 a28:	09 f0       	breq	.+2      	; 0xa2c <__mulsf3+0x12>
 a2a:	a2 cf       	rjmp	.-188    	; 0x970 <__fp_inf>
 a2c:	a7 cf       	rjmp	.-178    	; 0x97c <__fp_nan>
 a2e:	11 24       	eor	r1, r1
 a30:	ea cf       	rjmp	.-44     	; 0xa06 <__fp_szero>

00000a32 <__mulsf3x>:
 a32:	c6 df       	rcall	.-116    	; 0x9c0 <__fp_split3>
 a34:	a0 f3       	brcs	.-24     	; 0xa1e <__mulsf3+0x4>

00000a36 <__mulsf3_pse>:
 a36:	95 9f       	mul	r25, r21
 a38:	d1 f3       	breq	.-12     	; 0xa2e <__mulsf3+0x14>
 a3a:	95 0f       	add	r25, r21
 a3c:	50 e0       	ldi	r21, 0x00	; 0
 a3e:	55 1f       	adc	r21, r21
 a40:	62 9f       	mul	r22, r18
 a42:	f0 01       	movw	r30, r0
 a44:	72 9f       	mul	r23, r18
 a46:	bb 27       	eor	r27, r27
 a48:	f0 0d       	add	r31, r0
 a4a:	b1 1d       	adc	r27, r1
 a4c:	63 9f       	mul	r22, r19
 a4e:	aa 27       	eor	r26, r26
 a50:	f0 0d       	add	r31, r0
 a52:	b1 1d       	adc	r27, r1
 a54:	aa 1f       	adc	r26, r26
 a56:	64 9f       	mul	r22, r20
 a58:	66 27       	eor	r22, r22
 a5a:	b0 0d       	add	r27, r0
 a5c:	a1 1d       	adc	r26, r1
 a5e:	66 1f       	adc	r22, r22
 a60:	82 9f       	mul	r24, r18
 a62:	22 27       	eor	r18, r18
 a64:	b0 0d       	add	r27, r0
 a66:	a1 1d       	adc	r26, r1
 a68:	62 1f       	adc	r22, r18
 a6a:	73 9f       	mul	r23, r19
 a6c:	b0 0d       	add	r27, r0
 a6e:	a1 1d       	adc	r26, r1
 a70:	62 1f       	adc	r22, r18
 a72:	83 9f       	mul	r24, r19
 a74:	a0 0d       	add	r26, r0
 a76:	61 1d       	adc	r22, r1
 a78:	22 1f       	adc	r18, r18
 a7a:	74 9f       	mul	r23, r20
 a7c:	33 27       	eor	r19, r19
 a7e:	a0 0d       	add	r26, r0
 a80:	61 1d       	adc	r22, r1
 a82:	23 1f       	adc	r18, r19
 a84:	84 9f       	mul	r24, r20
 a86:	60 0d       	add	r22, r0
 a88:	21 1d       	adc	r18, r1
 a8a:	82 2f       	mov	r24, r18
 a8c:	76 2f       	mov	r23, r22
 a8e:	6a 2f       	mov	r22, r26
 a90:	11 24       	eor	r1, r1
 a92:	9f 57       	subi	r25, 0x7F	; 127
 a94:	50 40       	sbci	r21, 0x00	; 0
 a96:	8a f0       	brmi	.+34     	; 0xaba <__mulsf3_pse+0x84>
 a98:	e1 f0       	breq	.+56     	; 0xad2 <__mulsf3_pse+0x9c>
 a9a:	88 23       	and	r24, r24
 a9c:	4a f0       	brmi	.+18     	; 0xab0 <__mulsf3_pse+0x7a>
 a9e:	ee 0f       	add	r30, r30
 aa0:	ff 1f       	adc	r31, r31
 aa2:	bb 1f       	adc	r27, r27
 aa4:	66 1f       	adc	r22, r22
 aa6:	77 1f       	adc	r23, r23
 aa8:	88 1f       	adc	r24, r24
 aaa:	91 50       	subi	r25, 0x01	; 1
 aac:	50 40       	sbci	r21, 0x00	; 0
 aae:	a9 f7       	brne	.-22     	; 0xa9a <__mulsf3_pse+0x64>
 ab0:	9e 3f       	cpi	r25, 0xFE	; 254
 ab2:	51 05       	cpc	r21, r1
 ab4:	70 f0       	brcs	.+28     	; 0xad2 <__mulsf3_pse+0x9c>
 ab6:	5c cf       	rjmp	.-328    	; 0x970 <__fp_inf>
 ab8:	a6 cf       	rjmp	.-180    	; 0xa06 <__fp_szero>
 aba:	5f 3f       	cpi	r21, 0xFF	; 255
 abc:	ec f3       	brlt	.-6      	; 0xab8 <__mulsf3_pse+0x82>
 abe:	98 3e       	cpi	r25, 0xE8	; 232
 ac0:	dc f3       	brlt	.-10     	; 0xab8 <__mulsf3_pse+0x82>
 ac2:	86 95       	lsr	r24
 ac4:	77 95       	ror	r23
 ac6:	67 95       	ror	r22
 ac8:	b7 95       	ror	r27
 aca:	f7 95       	ror	r31
 acc:	e7 95       	ror	r30
 ace:	9f 5f       	subi	r25, 0xFF	; 255
 ad0:	c1 f7       	brne	.-16     	; 0xac2 <__mulsf3_pse+0x8c>
 ad2:	fe 2b       	or	r31, r30
 ad4:	88 0f       	add	r24, r24
 ad6:	91 1d       	adc	r25, r1
 ad8:	96 95       	lsr	r25
 ada:	87 95       	ror	r24
 adc:	97 f9       	bld	r25, 7
 ade:	08 95       	ret

00000ae0 <malloc>:
 ae0:	cf 93       	push	r28
 ae2:	df 93       	push	r29
 ae4:	82 30       	cpi	r24, 0x02	; 2
 ae6:	91 05       	cpc	r25, r1
 ae8:	10 f4       	brcc	.+4      	; 0xaee <malloc+0xe>
 aea:	82 e0       	ldi	r24, 0x02	; 2
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	e0 91 ba 01 	lds	r30, 0x01BA
 af2:	f0 91 bb 01 	lds	r31, 0x01BB
 af6:	20 e0       	ldi	r18, 0x00	; 0
 af8:	30 e0       	ldi	r19, 0x00	; 0
 afa:	a0 e0       	ldi	r26, 0x00	; 0
 afc:	b0 e0       	ldi	r27, 0x00	; 0
 afe:	30 97       	sbiw	r30, 0x00	; 0
 b00:	39 f1       	breq	.+78     	; 0xb50 <malloc+0x70>
 b02:	40 81       	ld	r20, Z
 b04:	51 81       	ldd	r21, Z+1	; 0x01
 b06:	48 17       	cp	r20, r24
 b08:	59 07       	cpc	r21, r25
 b0a:	b8 f0       	brcs	.+46     	; 0xb3a <malloc+0x5a>
 b0c:	48 17       	cp	r20, r24
 b0e:	59 07       	cpc	r21, r25
 b10:	71 f4       	brne	.+28     	; 0xb2e <malloc+0x4e>
 b12:	82 81       	ldd	r24, Z+2	; 0x02
 b14:	93 81       	ldd	r25, Z+3	; 0x03
 b16:	10 97       	sbiw	r26, 0x00	; 0
 b18:	29 f0       	breq	.+10     	; 0xb24 <malloc+0x44>
 b1a:	13 96       	adiw	r26, 0x03	; 3
 b1c:	9c 93       	st	X, r25
 b1e:	8e 93       	st	-X, r24
 b20:	12 97       	sbiw	r26, 0x02	; 2
 b22:	2c c0       	rjmp	.+88     	; 0xb7c <malloc+0x9c>
 b24:	90 93 bb 01 	sts	0x01BB, r25
 b28:	80 93 ba 01 	sts	0x01BA, r24
 b2c:	27 c0       	rjmp	.+78     	; 0xb7c <malloc+0x9c>
 b2e:	21 15       	cp	r18, r1
 b30:	31 05       	cpc	r19, r1
 b32:	31 f0       	breq	.+12     	; 0xb40 <malloc+0x60>
 b34:	42 17       	cp	r20, r18
 b36:	53 07       	cpc	r21, r19
 b38:	18 f0       	brcs	.+6      	; 0xb40 <malloc+0x60>
 b3a:	a9 01       	movw	r20, r18
 b3c:	db 01       	movw	r26, r22
 b3e:	01 c0       	rjmp	.+2      	; 0xb42 <malloc+0x62>
 b40:	ef 01       	movw	r28, r30
 b42:	9a 01       	movw	r18, r20
 b44:	bd 01       	movw	r22, r26
 b46:	df 01       	movw	r26, r30
 b48:	02 80       	ldd	r0, Z+2	; 0x02
 b4a:	f3 81       	ldd	r31, Z+3	; 0x03
 b4c:	e0 2d       	mov	r30, r0
 b4e:	d7 cf       	rjmp	.-82     	; 0xafe <malloc+0x1e>
 b50:	21 15       	cp	r18, r1
 b52:	31 05       	cpc	r19, r1
 b54:	f9 f0       	breq	.+62     	; 0xb94 <malloc+0xb4>
 b56:	28 1b       	sub	r18, r24
 b58:	39 0b       	sbc	r19, r25
 b5a:	24 30       	cpi	r18, 0x04	; 4
 b5c:	31 05       	cpc	r19, r1
 b5e:	80 f4       	brcc	.+32     	; 0xb80 <malloc+0xa0>
 b60:	8a 81       	ldd	r24, Y+2	; 0x02
 b62:	9b 81       	ldd	r25, Y+3	; 0x03
 b64:	61 15       	cp	r22, r1
 b66:	71 05       	cpc	r23, r1
 b68:	21 f0       	breq	.+8      	; 0xb72 <malloc+0x92>
 b6a:	fb 01       	movw	r30, r22
 b6c:	93 83       	std	Z+3, r25	; 0x03
 b6e:	82 83       	std	Z+2, r24	; 0x02
 b70:	04 c0       	rjmp	.+8      	; 0xb7a <malloc+0x9a>
 b72:	90 93 bb 01 	sts	0x01BB, r25
 b76:	80 93 ba 01 	sts	0x01BA, r24
 b7a:	fe 01       	movw	r30, r28
 b7c:	32 96       	adiw	r30, 0x02	; 2
 b7e:	44 c0       	rjmp	.+136    	; 0xc08 <malloc+0x128>
 b80:	fe 01       	movw	r30, r28
 b82:	e2 0f       	add	r30, r18
 b84:	f3 1f       	adc	r31, r19
 b86:	81 93       	st	Z+, r24
 b88:	91 93       	st	Z+, r25
 b8a:	22 50       	subi	r18, 0x02	; 2
 b8c:	31 09       	sbc	r19, r1
 b8e:	39 83       	std	Y+1, r19	; 0x01
 b90:	28 83       	st	Y, r18
 b92:	3a c0       	rjmp	.+116    	; 0xc08 <malloc+0x128>
 b94:	20 91 b8 01 	lds	r18, 0x01B8
 b98:	30 91 b9 01 	lds	r19, 0x01B9
 b9c:	23 2b       	or	r18, r19
 b9e:	41 f4       	brne	.+16     	; 0xbb0 <malloc+0xd0>
 ba0:	20 91 02 01 	lds	r18, 0x0102
 ba4:	30 91 03 01 	lds	r19, 0x0103
 ba8:	30 93 b9 01 	sts	0x01B9, r19
 bac:	20 93 b8 01 	sts	0x01B8, r18
 bb0:	20 91 00 01 	lds	r18, 0x0100
 bb4:	30 91 01 01 	lds	r19, 0x0101
 bb8:	21 15       	cp	r18, r1
 bba:	31 05       	cpc	r19, r1
 bbc:	41 f4       	brne	.+16     	; 0xbce <malloc+0xee>
 bbe:	2d b7       	in	r18, 0x3d	; 61
 bc0:	3e b7       	in	r19, 0x3e	; 62
 bc2:	40 91 04 01 	lds	r20, 0x0104
 bc6:	50 91 05 01 	lds	r21, 0x0105
 bca:	24 1b       	sub	r18, r20
 bcc:	35 0b       	sbc	r19, r21
 bce:	e0 91 b8 01 	lds	r30, 0x01B8
 bd2:	f0 91 b9 01 	lds	r31, 0x01B9
 bd6:	e2 17       	cp	r30, r18
 bd8:	f3 07       	cpc	r31, r19
 bda:	a0 f4       	brcc	.+40     	; 0xc04 <malloc+0x124>
 bdc:	2e 1b       	sub	r18, r30
 bde:	3f 0b       	sbc	r19, r31
 be0:	28 17       	cp	r18, r24
 be2:	39 07       	cpc	r19, r25
 be4:	78 f0       	brcs	.+30     	; 0xc04 <malloc+0x124>
 be6:	ac 01       	movw	r20, r24
 be8:	4e 5f       	subi	r20, 0xFE	; 254
 bea:	5f 4f       	sbci	r21, 0xFF	; 255
 bec:	24 17       	cp	r18, r20
 bee:	35 07       	cpc	r19, r21
 bf0:	48 f0       	brcs	.+18     	; 0xc04 <malloc+0x124>
 bf2:	4e 0f       	add	r20, r30
 bf4:	5f 1f       	adc	r21, r31
 bf6:	50 93 b9 01 	sts	0x01B9, r21
 bfa:	40 93 b8 01 	sts	0x01B8, r20
 bfe:	81 93       	st	Z+, r24
 c00:	91 93       	st	Z+, r25
 c02:	02 c0       	rjmp	.+4      	; 0xc08 <malloc+0x128>
 c04:	e0 e0       	ldi	r30, 0x00	; 0
 c06:	f0 e0       	ldi	r31, 0x00	; 0
 c08:	cf 01       	movw	r24, r30
 c0a:	df 91       	pop	r29
 c0c:	cf 91       	pop	r28
 c0e:	08 95       	ret

00000c10 <free>:
 c10:	cf 93       	push	r28
 c12:	df 93       	push	r29
 c14:	00 97       	sbiw	r24, 0x00	; 0
 c16:	09 f4       	brne	.+2      	; 0xc1a <free+0xa>
 c18:	87 c0       	rjmp	.+270    	; 0xd28 <free+0x118>
 c1a:	fc 01       	movw	r30, r24
 c1c:	32 97       	sbiw	r30, 0x02	; 2
 c1e:	13 82       	std	Z+3, r1	; 0x03
 c20:	12 82       	std	Z+2, r1	; 0x02
 c22:	c0 91 ba 01 	lds	r28, 0x01BA
 c26:	d0 91 bb 01 	lds	r29, 0x01BB
 c2a:	20 97       	sbiw	r28, 0x00	; 0
 c2c:	81 f4       	brne	.+32     	; 0xc4e <free+0x3e>
 c2e:	20 81       	ld	r18, Z
 c30:	31 81       	ldd	r19, Z+1	; 0x01
 c32:	28 0f       	add	r18, r24
 c34:	39 1f       	adc	r19, r25
 c36:	80 91 b8 01 	lds	r24, 0x01B8
 c3a:	90 91 b9 01 	lds	r25, 0x01B9
 c3e:	82 17       	cp	r24, r18
 c40:	93 07       	cpc	r25, r19
 c42:	79 f5       	brne	.+94     	; 0xca2 <free+0x92>
 c44:	f0 93 b9 01 	sts	0x01B9, r31
 c48:	e0 93 b8 01 	sts	0x01B8, r30
 c4c:	6d c0       	rjmp	.+218    	; 0xd28 <free+0x118>
 c4e:	de 01       	movw	r26, r28
 c50:	20 e0       	ldi	r18, 0x00	; 0
 c52:	30 e0       	ldi	r19, 0x00	; 0
 c54:	ae 17       	cp	r26, r30
 c56:	bf 07       	cpc	r27, r31
 c58:	50 f4       	brcc	.+20     	; 0xc6e <free+0x5e>
 c5a:	12 96       	adiw	r26, 0x02	; 2
 c5c:	4d 91       	ld	r20, X+
 c5e:	5c 91       	ld	r21, X
 c60:	13 97       	sbiw	r26, 0x03	; 3
 c62:	9d 01       	movw	r18, r26
 c64:	41 15       	cp	r20, r1
 c66:	51 05       	cpc	r21, r1
 c68:	09 f1       	breq	.+66     	; 0xcac <free+0x9c>
 c6a:	da 01       	movw	r26, r20
 c6c:	f3 cf       	rjmp	.-26     	; 0xc54 <free+0x44>
 c6e:	b3 83       	std	Z+3, r27	; 0x03
 c70:	a2 83       	std	Z+2, r26	; 0x02
 c72:	40 81       	ld	r20, Z
 c74:	51 81       	ldd	r21, Z+1	; 0x01
 c76:	84 0f       	add	r24, r20
 c78:	95 1f       	adc	r25, r21
 c7a:	8a 17       	cp	r24, r26
 c7c:	9b 07       	cpc	r25, r27
 c7e:	71 f4       	brne	.+28     	; 0xc9c <free+0x8c>
 c80:	8d 91       	ld	r24, X+
 c82:	9c 91       	ld	r25, X
 c84:	11 97       	sbiw	r26, 0x01	; 1
 c86:	84 0f       	add	r24, r20
 c88:	95 1f       	adc	r25, r21
 c8a:	02 96       	adiw	r24, 0x02	; 2
 c8c:	91 83       	std	Z+1, r25	; 0x01
 c8e:	80 83       	st	Z, r24
 c90:	12 96       	adiw	r26, 0x02	; 2
 c92:	8d 91       	ld	r24, X+
 c94:	9c 91       	ld	r25, X
 c96:	13 97       	sbiw	r26, 0x03	; 3
 c98:	93 83       	std	Z+3, r25	; 0x03
 c9a:	82 83       	std	Z+2, r24	; 0x02
 c9c:	21 15       	cp	r18, r1
 c9e:	31 05       	cpc	r19, r1
 ca0:	29 f4       	brne	.+10     	; 0xcac <free+0x9c>
 ca2:	f0 93 bb 01 	sts	0x01BB, r31
 ca6:	e0 93 ba 01 	sts	0x01BA, r30
 caa:	3e c0       	rjmp	.+124    	; 0xd28 <free+0x118>
 cac:	d9 01       	movw	r26, r18
 cae:	13 96       	adiw	r26, 0x03	; 3
 cb0:	fc 93       	st	X, r31
 cb2:	ee 93       	st	-X, r30
 cb4:	12 97       	sbiw	r26, 0x02	; 2
 cb6:	4d 91       	ld	r20, X+
 cb8:	5d 91       	ld	r21, X+
 cba:	a4 0f       	add	r26, r20
 cbc:	b5 1f       	adc	r27, r21
 cbe:	ea 17       	cp	r30, r26
 cc0:	fb 07       	cpc	r31, r27
 cc2:	79 f4       	brne	.+30     	; 0xce2 <free+0xd2>
 cc4:	80 81       	ld	r24, Z
 cc6:	91 81       	ldd	r25, Z+1	; 0x01
 cc8:	84 0f       	add	r24, r20
 cca:	95 1f       	adc	r25, r21
 ccc:	02 96       	adiw	r24, 0x02	; 2
 cce:	d9 01       	movw	r26, r18
 cd0:	11 96       	adiw	r26, 0x01	; 1
 cd2:	9c 93       	st	X, r25
 cd4:	8e 93       	st	-X, r24
 cd6:	82 81       	ldd	r24, Z+2	; 0x02
 cd8:	93 81       	ldd	r25, Z+3	; 0x03
 cda:	13 96       	adiw	r26, 0x03	; 3
 cdc:	9c 93       	st	X, r25
 cde:	8e 93       	st	-X, r24
 ce0:	12 97       	sbiw	r26, 0x02	; 2
 ce2:	e0 e0       	ldi	r30, 0x00	; 0
 ce4:	f0 e0       	ldi	r31, 0x00	; 0
 ce6:	8a 81       	ldd	r24, Y+2	; 0x02
 ce8:	9b 81       	ldd	r25, Y+3	; 0x03
 cea:	00 97       	sbiw	r24, 0x00	; 0
 cec:	19 f0       	breq	.+6      	; 0xcf4 <free+0xe4>
 cee:	fe 01       	movw	r30, r28
 cf0:	ec 01       	movw	r28, r24
 cf2:	f9 cf       	rjmp	.-14     	; 0xce6 <free+0xd6>
 cf4:	ce 01       	movw	r24, r28
 cf6:	02 96       	adiw	r24, 0x02	; 2
 cf8:	28 81       	ld	r18, Y
 cfa:	39 81       	ldd	r19, Y+1	; 0x01
 cfc:	82 0f       	add	r24, r18
 cfe:	93 1f       	adc	r25, r19
 d00:	20 91 b8 01 	lds	r18, 0x01B8
 d04:	30 91 b9 01 	lds	r19, 0x01B9
 d08:	28 17       	cp	r18, r24
 d0a:	39 07       	cpc	r19, r25
 d0c:	69 f4       	brne	.+26     	; 0xd28 <free+0x118>
 d0e:	30 97       	sbiw	r30, 0x00	; 0
 d10:	29 f4       	brne	.+10     	; 0xd1c <free+0x10c>
 d12:	10 92 bb 01 	sts	0x01BB, r1
 d16:	10 92 ba 01 	sts	0x01BA, r1
 d1a:	02 c0       	rjmp	.+4      	; 0xd20 <free+0x110>
 d1c:	13 82       	std	Z+3, r1	; 0x03
 d1e:	12 82       	std	Z+2, r1	; 0x02
 d20:	d0 93 b9 01 	sts	0x01B9, r29
 d24:	c0 93 b8 01 	sts	0x01B8, r28
 d28:	df 91       	pop	r29
 d2a:	cf 91       	pop	r28
 d2c:	08 95       	ret

00000d2e <_exit>:
 d2e:	f8 94       	cli

00000d30 <__stop_program>:
 d30:	ff cf       	rjmp	.-2      	; 0xd30 <__stop_program>
